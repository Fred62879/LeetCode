## Specification
We are given N different types of stickers. Each sticker has a lowercase English word on it.
You would like to spell out the given target string by cutting individual letters from your
collection of stickers and rearranging them. You can use each sticker more than once if you
want, and you have infinite quantities of each sticker. What is the minimum number of 
stickers that you need to spell out the target? If the task is impossible, return -1.

Example 1:
Input:
["with", "example", "science"], "thehat"
Output:
3
Explanation:
We can use 2 "with" stickers, and 1 "example" sticker.
After cutting and rearrange the letters of those stickers, we can form the target "thehat".
Also, this is the minimum number of stickers necessary to form the target string.

Example 2:
Input:
["notice", "possible"], "basicbasic"
Output:
-1
Explanation:
We can't form the target "basicbasic" from cutting letters from the given stickers.

Note:
stickers has length in the range [1, 50].
stickers consists of lowercase English words (without apostrophes).
target has length in the range [1, 15], and consists of lowercase English letters.
In all test cases, all words were chosen randomly from the 1000 most common US English words, 
and the target was chosen as a concatenation of two random words.
The time limit may be more challenging than usual. It is expected that a 50 sticker test case 
can be solved within 35ms on average.


## Testcases
["and","pound","force","human","fair","back","sign","course","sight","world","close","saw","best","fill","late","silent","open","noon","seat","cell","take","between","it","hundred","hat","until","either","play","triangle","stay","separate","season","tool","direct","part","student","path","ear","grow","ago","main","was","rule","element","thing","place","common","led","support","mean"]
"quietchord"

["heavy","claim","seven","set","had","it","dead","jump","design","question","sugar","dress","any","special","ground","huge","use","busy","prove","there","lone","window","trip","also","hot","choose","tie","several","be","that","corn","after","excite","insect","cat","cook","glad","like","wont","gray","especially","level","when","cover","ocean","try","clean","property","root","wing"]
"travelbell"

["seven","set","design","question","sugar","dress","any","special","busy"]
"travelbell"


## Ideas
(5) BFS
(4) DP_mem
(3) DP_bitwise_bottom_up
(2) DFS_backtracking
(1) DFS(Exhaust_search)_indep.

## Code
# (5) BFS
class Solution {
    
    private String toSortedString(int[] word) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 26; i++)
            for (int j = 0; j < word[i]; j++)
                sb.append((char) (i +'a'));
        return sb.toString();
    }
    
    private boolean wordIsSpelled(int[] word) {
        for (int i = 0; i < word.length; i++)
            if (word[i] > 0) return false;
        return true;
    }
    
    public int minStickers(String[] stickers, String target) {
        if (target == null || target.length() == 0) return 0;
        
        // construct map for stickers and target
        int min = 1, sLen = stickers.length;
        int[] tMap = new int[26];
        for (int i = 0; i < target.length(); i++) tMap[target.charAt(i) -'a']++;
        int[][] sMap = new int[sLen][26];
        for (int i = 0; i < sLen; i++) for (int j = 0; j < stickers[i].length(); j++)
            sMap[i][stickers[i].charAt(j) -'a']++;
        
        LinkedList<int[]> queue = new LinkedList<int[]>(); queue.offer(tMap);
        Set set = new HashSet<>();         // record in processing substrings
        while (!queue.isEmpty()) {
            int sz = queue.size();         // must instantiate for iteration
            for (int i = 0; i < sz; i++) { // current BFS level commence
                int[] cur = queue.poll();
                String cs = toSortedString(cur); // current string
                if (!set.add(cs)) continue;      // * prune out cs already presented
                for (int j = 0; j < sLen; j++) { // spell cs start with each sticker
                    // lack 1st char of cur string, impossible to have following char
                    if (sMap[j][cs.charAt(0) -'a'] == 0) continue;
                    int[] temp = cur.clone();
                    for (int k = 0; k < 26; k++) if (temp[k] > 0)
                        temp[k] = temp[k] - sMap[j][k];
                    if (wordIsSpelled(temp)) return min;
                    queue.offer(temp);
                }                
            }
            min++; // current BFS level terminate
        }
        return -1;
    }
}
