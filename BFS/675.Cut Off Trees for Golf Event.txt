## Specification
You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:

0 represents the obstacle can't be reached.
1 represents the ground can be walked through.
The place with number bigger than 1 represents a tree can be walked through, and this positive number represents the tree's height. 

You are asked to cut off all the trees in this forest in the order of tree's height - always cut off the tree with lowest height first. And after cutting, the original place has the tree will become a grass (value 1). You will start from the point (0, 0) and you should output the minimum steps you need to walk to cut off all the trees. If you can't cut off all the trees, output -1 in that situation. You are guaranteed that no two trees have the same height and there is at least one tree needs to be cut off.

Example 1:
Input: 
[[1,2,3],[0,0,4],[7,6,5]]
Output: 6

Example 2:
Input: 
[[1,2,3],[0,0,0],[7,6,5]]
Output: -1

Example 3:
Input: 
[[2,3,4],[0,0,5],[8,7,6]]
Output: 6
Explanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.

Hint: size of the given matrix will not exceed 50x50.




## Ideas
# (III) BFS_Hadlock's

		  1   2   3  4   5   6          *1*  2  3  4  5  *6*
		  7  [s]  8  9 *10* 11           7  [s] 8  9 10  11
		 12  13  14 15  16  17          12  13 14  0  0  17
		 18  19  20 21  [t] 22          18  19 20  0 [t] 22
		 23 *24* 25 26  26  28         *23* 24 25 26 26 *28*

An intuition is that within the square defined by the source and target tree, if there do not exist obstacles, the distance is fixed as the Manhattan distance. Moreover, even if there do exist some obstacles, if a path exists linking the source with the target which does not entail any trees beyond the square, the distance is still the Manhattan distance. However, if neither of these two conditions (left Fig) fit, to reach the target, we have to go beyond the square (s-10-t-19) (right Fig).

After the square extension (1-6-28-23), if we can now find a path linking the source and the target without extending further beyond the current extended square, then the distance is still fixed, but as the Manhanttan distance + 2, which entails one step going beyond the original square and one step returning into it. If we still cannot find such a path, then extend further until we can find such a path.

Note that it is actually not necessary that we go outside the sphere to reach the next level. For the left above, if from s to t we have to go inside the smallest square to left or up at certain move then that path will entail two more moves than the current manhattan distance and should be treated as the next level.

To implement this idea, we maintain two queues at each BFS level. One of it is used to record places newly reached within current manhattan distance while the other record entries that go exactly two more than current m distance. As we are only iterating over the queue for the entries within m distance, the other queue will therefore be guaranteed to have entries being exactly 2 more the m distance.

https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/107396/Python-solution-based-on-wufangjie's-(Hadlock's-algorithm)

https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/107415/my-python-solution-inspired-by-A*-algorithm


# (II) BFS_A*/Dijkstra
https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/272841/C%2B%2B-solution-using-a*-search

As a SP question, distance between a given source and target can also be addressed by Dijkstra's and herein a special case called the A* algorithm. Essentially, BFS can be performed based on priority of, for instance, distances of trees from the source, instead of randomly searching all possible trees in a BFS round. However, we cannot do it only incorporating distTo[s] as all trees reachable from the source in one BFS level would locate the same distance away from the source.

In this case, it would be better that for each tree reached in a BFS round, we decide its priority based on the sum of its distance from the source (which is known for sure) and its distance to the target. This actually turns out to be the distance from the source to the target which is what we need to figure out. Indeed, we will never know the distance from a particular tree to the target until we real reach the target but this distance can be deduced as the Manhattan distance between the two trees without considering about the obstacles.

       [1][1][1][1][1] 0
       [3] 0  0  0 [1] 0
	s [6] 0  0 *1  1  1
	7 [1] 0  0 [1] 0  t
	  [1] 0  0 [1] 0
	  [1] 0  0 [1] 0
	  [1] 0  0 [1] 0
	  [1][1][1][1] 0

       [1][1][1][1][1] 0
       [3] 0  0  0 [1] 0
	s [6] 0  0 *1  1  1
	7 [1] 0  0 [1] 0  t
	  [1] 0  0 [1] 0
	  [1][1][1][1] 0

Thus, if obstacles do not present or if certain path still maintain the Manhanttan disance, then our priority works perfectly. However, if this is not the case, it also does not hurt as we are doing BFS and the priority only determines which element to be evaluated first. Thus, the A* algorithm essentially optimized the BFS via selecting a temporally optimal next.

(The official solution may not be correct


# (I) BFS
https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/217864/c%2B%2B-priority-queue-%2B-bfs-solution-with-comments

https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/107427/C%2B%2B-BFS-with-optimization-86ms-beats-100

Given the row and column index of a source and a target tree in the forest, to derive the distance between them, the most straightforward way is to do a BFS from the source. However, this easily get TLE and lots of optimization need to be taken into account.

# (O) Basis
Since we do not know the distribution of trees with varying heights, we need to first order the trees to simplify the processing. Iterating over the forests, we collect all trees and then sort them based on tree height. Then, the problem can be simplified as  finding the sum of the distance from each tree in the forest to its consecutive neighbour in the collection which is the shortest tree taller than it.



## Code
# (III) BFS_Hadlock's
// indep_140ms_130.9MB
// for loop bfs imple
class Solution {
public:
    int n, m;
    
    void helper(int id, vector<int>& arr) {
        arr.push_back(id);
    }
    
    int bfs(int tr, int tc, int cr, int cc, vector<vector<int>>& forest) {
        int mdist = abs(tr - cr) + abs(tc - cc);
        vector<int> nxt, now{cr * m + cc}, visited(n * m, 0);
        
        while(!now.empty()) {
            for (int i = 0; i < now.size(); i++) if (!visited[now[i]]) {
                int curid = now[i], r = curid / m, c = curid % m;
                if (r == tr && c == tc) return mdist;
                
                visited[curid] = 1;
                if (r - 1 >= 0 && forest[r - 1][c]) helper(curid - m, r - 1 >= tr ? now : nxt);
                if (r + 1 < n && forest[r + 1][c]) helper(curid + m, r + 1 <= tr ? now : nxt);
                if (c - 1 >= 0 && forest[r][c - 1]) helper(curid - 1, c - 1 >= tc ? now : nxt);
                if (c + 1 < m && forest[r][c + 1]) helper(curid + 1, c + 1 <= tc ? now : nxt);
            }
            now = nxt, nxt.clear(), mdist += 2;
        }
        return -1;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        if (forest.size() == 0 || forest[0].size() == 0) return -1;
        
        n = forest.size(), m = forest[0].size();
        vector<int> order(n * m);
        iota(begin(order), end(order), 0);
        
        sort(order.begin(), order.end(), [this, &forest](const int a, const int b) {
            return forest[a / m][a % m] < forest[b / m][b % m];
        });
        
        int i = 0, cr = 0, cc = 0, res = 0;
        while(i < n * m) {
            int c = order[i++], tr = c / m, tc = c % m;
            if (forest[tr][tc] == 0) continue;
            int cdist = bfs(tr, tc, cr, cc, forest);
            
            if (cdist == -1) return -1;
            res += cdist;
            cr = tr, cc = tc;
        }
        return res;
    }
};

// derived_436ms_159.8MB
// normal bfs imple
class Solution {
public:
    int n, m;
    
    void add(vector<int>& q, int toadd) {
        q.push_back(toadd);
    }
    
    int caldist(int tr, int tc, int cr, int cc, vector<vector<int>>& forest) {
        int res = abs(tr - cr) + abs(tc - cc), c = cr * m + cc, t = tr * m + tc;
        unordered_set<int> marked;
        vector<int> now, nxt;
        now.push_back(c);
        int i = 0;
        while(!now.empty() || !nxt.empty()) {
            if (i == now.size()) now = nxt, nxt.clear(), res += 2, i = 0;
            int cur = now[i++];
            if (cur == t) return res;
            if (marked.count(cur)) continue;
            
            marked.insert(cur);
            int r = cur / m, c = cur % m;
            if (r + 1 < n && forest[r + 1][c]) add(r + 1 <= tr ? now : nxt, cur + m);
            if (c + 1 < m && forest[r][c + 1]) add(c + 1 <= tc ? now : nxt, cur + 1);
            if (r > 0 && forest[r - 1][c]) add(r - 1 >= tr ? now : nxt, cur - m);
            if (c > 0 && forest[r][c - 1]) add(c - 1 >= tc ? now : nxt, cur - 1);
        }
        return -1;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        if (forest.size() == 0 || forest[0].size() == 0) return -1;
        
        n = forest.size(), m = forest[0].size();
        vector<int> order(n * m);
        iota(begin(order), end(order), 0);
        
        sort(order.begin(), order.end(), [this, &forest](const int a, const int b) {
            return forest[a / m][a % m] < forest[b / m][b % m]));
            // return (forest[b / m][b % m] || (!forest[a / m][a % m] && forest[a / m][a % m] < forest[b / m][b % m]));
        });
        
        int i = 0, cr = 0, cc = 0, res = 0;
        while(i < n * m) {
            int c = order[i++], tr = c / m, tc = c % m;
            if (forest[tr][tc] == 0) continue;
            int cdist = caldist(tr, tc, cr, cc, forest);
            
            if (cdist == -1) return -1;
            res += cdist;
            cr = tr, cc = tc;
        }
        return res;
    }
};


# (II) BFS_A*/Dijkstra
// derived_Dec-7-2019_672ms/107.5MB
class Solution {
public:
    int n, m;
    
    // calculate manhattan distance
    int mhtDist(int sr, int sc, int tr, int tc) {
        return abs(sr - tr) + abs(sc - tc);
    }
    
    // A* bfs, find shortest distance from cr:cc to tr:tc
    int caldist(int tr, int tc, int cr, int cc, vector<vector<int>>& forest) {
        vector<int> marked(n * m, 0);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({ mhtDist(cr, cc, tr, tc), cr * m + cc });
        
        while(!pq.empty()) {
            auto cur = pq.top(); pq.pop();
            int tdist = cur.first, curid = cur.second, r = curid / m, c = curid % m;
            if (marked[curid]) continue;
            if (r == tr && c == tc) return tdist;
            
            marked[curid] = 1;
            int distFS = tdist - mhtDist(r, c, tr, tc), dist = distFS + 1;
            if (r - 1 >= 0 && forest[r - 1][c]) pq.push({ dist + mhtDist(tr, tc, r - 1, c), curid - m });
            if (r + 1 < n && forest[r + 1][c]) pq.push({ dist + mhtDist(tr, tc, r + 1, c), curid + m });
            if (c - 1 >= 0 && forest[r][c - 1]) pq.push({ dist + mhtDist(tr, tc, r, c - 1), curid - 1 });
            if (c + 1 < m && forest[r][c + 1]) pq.push({ dist + mhtDist(tr, tc, r, c + 1), curid + 1 });
        }
        return -1;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        if (forest.size() == 0 || forest[0].size() == 0) return -1;
        
        n = forest.size(), m = forest[0].size();
        vector<int> order(n * m);
        iota(begin(order), end(order), 0);
        
        sort(order.begin(), order.end(), [this, &forest](const int a, const int b) {
            return forest[a / m][a % m] < forest[b / m][b % m];
        });
        
        int i = 0, cr = 0, cc = 0, res = 0;
        while(i < n * m) {
            int c = order[i++], tr = c / m, tc = c % m;
            if (forest[tr][tc] == 0) continue;
            int cdist = caldist(tr, tc, cr, cc, forest);
            
            // cout << cr << "/" << cc << " " << tr << "/" << tc << ": " << cdist << endl;
            if (cdist == -1) return -1;
            res += cdist;
            cr = tr, cc = tc;
        }
        return res;
    }
};


# (I) BFS_Classical
// indep_2nd-visit_Oct 11 2019_TLE->AC
class Solution {
public:
    int n, m;
    vector<int> trees;
    
    // return len of shortest path from 'from' to 'to'
    int bfs(int from, int to, vector<vector<int>>& forest) {
        if (from == to) return 0;
        
        vector<pair<int, int>> q;
        int visited[n][m]{};
        visited[from / m][from % m] = 1;
        q.push_back(make_pair(from, 0));
        
        for (int i = 0; i < q.size(); i++) {
            int pos = q[i].first, dist = q[i].second, fr = pos / m, fc = pos % m;
            if (pos == to) return dist;
            
            if (fc + 1 < m && forest[fr][fc + 1] && !visited[fr][fc + 1]) // right
                q.push_back(make_pair(pos + 1, dist + 1)), visited[fr][fc + 1] = 1;
            if (fc - 1 >= 0 && forest[fr][fc - 1] && !visited[fr][fc - 1]) // left
                q.push_back(make_pair(pos - 1, dist + 1)), visited[fr][fc - 1] = 1;
            if (fr + 1 < n && forest[fr + 1][fc] && !visited[fr + 1][fc]) // down 
                q.push_back(make_pair(pos + m, dist + 1)), visited[fr + 1][fc] = 1;
            if (fr - 1 >= 0 && forest[fr - 1][fc] && !visited[fr - 1][fc]) // up
                q.push_back(make_pair(pos - m, dist + 1)), visited[fr - 1][fc] = 1;
        }
        return INT_MAX;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        if (forest.size() == 0 || forest[0].size() == 0) return -1;
        n = forest.size(), m = forest[0].size();
        int sz = n * m, res = 0;
        
        trees.resize(sz);
        for (int i = 0; i < sz; i++) trees[i] = i;
        sort(trees.begin(), trees.end(), [&forest, this] (int i, int j) {
            return forest[i / m][i % m] < forest[j / m][j % m]; });
        
        for (int i = 0, from = 0; i < sz; i++) {
            int r = trees[i] / m, c = trees[i] % m;
            if (!forest[r][c]) continue;
            
            int curLen = bfs(from, trees[i], forest);
            if (curLen == INT_MAX) return -1;
            res += curLen;
            from = trees[i];
        }
        return res;
    }
};


// others_fastest
class Solution {
public:
    int cutOffTree(vector<vector<int>>& forest) {
        int rows = forest.size(), cols = rows ? forest[0].size() : 0;
        if (!rows || !cols) return 0;
        if (forest[0][0] == 0) return -1;
        
         priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> trees;
        for (int r = 0; r < rows; ++r)
            for (int c = 0; c < cols; ++c) if (forest[r][c] > 1
                trees.push({forest[r][c], {r, c}});
        
        int moves[][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        vector<vector<int>> visited(rows, vector<int>(cols, -1));
        int totalDist = 0, i = 0;
        pair<int, int> start = {0, 0};
        
        // Iterate through trees in increasing height order
        while (!trees.empty()) {
            pair<int, int> to = trees.top().second;
            trees.pop();
            bool found = false;
            int dist = -1;
            
            queue<pair<int, int>> qu;
            qu.push({start.first, start.second});
            visited[start.first][start.second] = i;
            while (!qu.empty() && !found) {
                ++dist;
                for (int j = 0, r, c, size = qu.size(); j < size && !found; ++j) {
                    tie(r, c) = qu.front(); qu.pop();
                    if (r == to.first && c == to.second) { found = true; break; }
                    
                    for (int m = 0, nr, nc; m < 4; ++m) {
                        nr = r + moves[m].first, nc = c + moves[m].second;
                        if (nr < 0 || nr >= rows || nc < 0 || nc >= cols || visited[nr][nc] == i || !forest[nr][nc])
                            continue;
                        
                        visited[nr][nc] = i;
                        qu.push({nr, nc});
                    }
                }
            }    
            if (!found) return -1;
            totalDist += dist;
            start = to;
            ++i;
        }
        return totalDist;
    }
};

// others_java
class Solution {
    int[] dr = {-1, 1, 0, 0};
    int[] dc = {0, 0, -1, 1};
    
    public int bfs(List<List<Integer>> forest, int sr, int sc, int tr, int tc) {
       int R = forest.size(), C = forest.get(0).size();
        Queue<int[]> queue = new LinkedList();
        queue.add(new int[]{sr, sc, 0});
        boolean[][] seen = new boolean[R][C];
        seen[sr][sc] = true;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == tr && cur[1] == tc) return cur[2];
            for (int di = 0; di < 4; ++di) {
                int r = cur[0] + dr[di];
                int c = cur[1] + dc[di];
                if (0 <= r && r < R && 0 <= c && c < C &&
                    !seen[r][c] && forest.get(r).get(c) > 0) {
                    seen[r][c] = true;
                    queue.add(new int[]{r, c, cur[2]+1});
                }
            }
        }
        return -1;
    }

    public int cutOffTree(List<List<Integer>> forest) {
        List<int[]> trees = new ArrayList();
        for (int r = 0; r < forest.size(); ++r) {
            for (int c = 0; c < forest.get(0).size(); ++c) {
                int v = forest.get(r).get(c);
                if (v > 1) trees.add(new int[]{v, r, c});
            }
        }

        Collections.sort(trees, (a, b) -> Integer.compare(a[0], b[0]));

        int ans = 0, sr = 0, sc = 0;
        for (int[] tree: trees) {
            int d = bfs(forest, sr, sc, tree[1], tree[2]);
            if (d < 0) return -1;
            ans += d;
            sr = tree[1]; sc = tree[2];
        }
        return ans;
    }
}

// cpp
class Solution {
public:
    int n, m;
    vector<int> dr{ -1, 1, 0, 0 }, dc{ 0, 0, -1, 1 };
    
    int dist(int sx, int sy, int tx, int ty, vector<vector<int>>& f) {
        if (sx == tx && sy == ty) return 0;
        
        vector<vector<int>> marked(n, vector<int>(m, 0));
        queue<pair<int, int>> q; // **** USE PAIR OR TLE ****
        q.push({ sx, sy });
        marked[sx][sy] = 1;
        int ans = 0;
        
        while (!q.empty()) {
            ans++;
            int sz = q.size();
            while (--sz >= 0) {
                pair<int, int> cur = q.front(); q.pop();
                int curx = cur.first, cury = cur.second;
                if (curx == tx && cury == ty) return ans;
            
                for (int i = 0; i < 4; i++) {
                    int nx = curx + dr[i], ny = cury + dc[i];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < m && f[nx][ny] && !marked[nx][ny]) {
                        if (nx == tx && ny == ty) return ans;
                        marked[nx][ny] = 1, q.push({ nx, ny });
                    }
                }
            }
        }
        return -1;
    }
    
    int cutOffTree(vector<vector<int>>& f) {
        n = f.size(), m = f[0].size();
        // process forest
        vector<vector<int>> col;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++) if (f[i][j] > 1)
                col.push_back({ f[i][j], i, j });
        // sort(col.begin(), col.end(), [] (vector<int> a, vector<int> b) { return a[2] < b[2]; });
        sort(col.begin(), col.end()); // **** THIS IS FASTER ****
        // pair-wise distance calculation
        int ans = 0, sr = 0, sc = 0;
        for (auto& cur : col) {
            int cdist = dist(sr, sc, cur[1], cur[2], f);
            if (cdist == -1) return -1;
            ans += cdist;
            sr = cur[1], sc = cur[2];
        }
        return ans;
    }
};


// indep_not imple_complicated
class Solution {
public:
    int n, m;
    
    int check(int nx, int ny, int curx, int cury, int px, int py, int ppx, int ppy, vector<vector<int>>& f) {
        if (nx < 0 || nx >= n || ny < 0 || ny >= m || !f[nx][ny]) return false;
        if (curx == ppx && cury == ppy && nx == px && ny == py) return false; // loop around
        return true;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        n = forest.size(), m = forest[0].size();
        vector<int> col, marked;
        // obtain tree height order
        for (auto& f : forest)
            for (int h : f) if (h > 1)
                col.push_back(h), marked.push_back(0);
        sort(col.begin(), col.end());
        // BFS
        queue<vector<int>> q;
        q.push({ 0, 0, -1, -1, -1, -1, 0, 0 });
        while (!q.empty()) {
            vector<int> cur = q.front(); q.pop();
            if (marked[cur[6]]) continue; // tree reached already in other check 
            
            int curx = cur[0], cury = cur[1], px = cur[2], py = cur[3];
            int ppx = cur[4], ppy = cur[5], htid = cur[6], steps = cur[7];
            vector<vector<int>> nxt = { {curx-1, cury}, {curx+1, cury}, {curx, cury-1}, {curx, cury+1} };
            cout << curx << "," << cury << ": ";
            for (auto& loc : nxt)
                if (check(loc[0], loc[1], curx, cury, px, py, ppx, ppy, forest)) {
                    cout << loc[0] << "," << loc[1] << " | ";
                    int curh = forest[loc[0]][loc[1]], nhtid = htid, flag = 0;
                    
                    // if (htid == 7 && curx == 3 && cury == 1) cout << loc[0] << "/" << loc[1] << ": " << steps << endl;
                    // if (htid == 7 && curx == 3 && cury == 0) cout << loc[0] << "/" << loc[1] << ": " << steps << endl;
                    // if (htid == 7) cout << curx << "/" << cury << endl;
                    
                    if (curh == col[htid]) { // reach target tree
                        cout << col[htid] << ": " << steps << endl;
                        if (htid == col.size() - 1) return steps + 1; // being the last tree
                        marked[htid] = 1, nhtid = htid + 1, flag = 1;
                    }
                    q.push({loc[0], loc[1], curx, cury, px, py, nhtid, steps + 1});
                    if (flag) break;
                }
            cout << endl;
        }
        return -1;
    }
};


# (0) DFS
// indep_2nd visited_Oct 11 2019_TLE
class Solution {
public:
    int n, m;
    vector<vector<int>> visited;
    
    // return len of shortest path from 'from' to 'to'
    int dfs(int fr, int fc, int tr, int tc, vector<vector<int>>& forest) {
        if (fr < 0 || fr >= n || fc < 0 || fc >= m || forest[fr][fc] == 0 || visited[fr][fc]) return INT_MAX;
        if (fr == tr && fc == tc) return 0;
        
        visited[fr][fc] = 1;
        int l = dfs(fr, fc + 1, tr, tc, forest);
        int r = dfs(fr, fc - 1, tr, tc, forest);
        int u = dfs(fr + 1, fc, tr, tc, forest);
        int d = dfs(fr - 1, fc, tr, tc, forest);
        int res = min({l, r, u, d});
        visited[fr][fc] = 0;
        return res == INT_MAX ? INT_MAX : res + 1;
    }
    
    int cutOffTree(vector<vector<int>>& forest) {
        if (forest.size() == 0 || forest[0].size() == 0) return -1;
        n = forest.size(), m = forest[0].size();
        visited.assign(n, vector<int>(m, 0));
        int sz = n * m, res = 0;
        
        vector<int> trees(sz);
        for (int i = 0; i < sz; i++) trees[i] = i;
        sort(trees.begin(), trees.end(), [&forest, this] (int i, int j) {
            return forest[i / m][i % m] < forest[j / m][j % m]; });
        
        for (int i = 0, from = 0; i < sz; i++) {
            int r = trees[i] / m, c = trees[i] % m;
            if (!forest[r][c]) continue;
            
            int curLen = dfs(from / m, from % m, r, c, forest);
            if (curLen == INT_MAX) return -1;
            res += curLen;
            from = trees[i];
        }
        return res;
    }
};




## Testcases
[[1,0,0,0],[9,0,0,2],[4,0,0,6],[7,8,3,5]]

[[1,0,0],[9,0,2],[4,0,6]]

[[1,19,15,17],[9,18,11,2],[4,10,12,6],[7,8,3,5]]

[[0,8764,1202,0,0,2769,5770],[0,0,2521,0,5111,9321,0]]

[[2,3,4],[0,0,5],[8,7,6]]

[[63750247,40643210,95516857,89928134,66334829,58741187,76532780,45104329],[3219401,97566322,9135413,75944198,93735601,33923288,50116695,83660397],[64460750,53045740,31903386,78155821,90848739,38769489,99349027,85982891],[30628785,51077683,70534803,67460877,91077770,74197235,5696362,91459886],[56105195,82479378,45937951,52817583,2768114,43329099,28189138,21418604]]

[[0,0,0,3528,2256,9394,3153],[8740,1758,6319,3400,4502,7475,6812],[0,0,3079,6312,0,0,0],[6828,0,0,0,0,0,8145],[6964,4631,0,0,0,4811,0],[0,0,0,0,9734,4696,4246],[3413,8887,0,4766,0,0,0],[7739,0,0,2920,0,5321,2250],[3032,0,3015,0,3269,8582,0]]

[[69438,55243,0,43779,5241,93591,73380],[847,49990,53242,21837,89404,63929,48214],[90332,49751,0,3088,16374,70121,25385],[14694,4338,87873,86281,5204,84169,5024],[31711,47313,1885,28332,11646,42583,31460],[59845,94855,29286,53221,9803,41305,60749],[95077,50343,27947,92852,0,0,19731],[86158,63553,56822,90251,0,23826,17478],[60387,23279,78048,78835,5310,99720,0],[74799,48845,60658,29773,96129,90443,14391],[65448,63358,78089,93914,7931,68804,72633],[93431,90868,55280,30860,59354,62083,47669],[81064,93220,22386,22341,95485,20696,13436],[50083,0,89399,43882,0,13593,27847],[0,12256,33652,69301,73395,93440,0],[42818,87197,81249,33936,7027,5744,64710],[35843,0,99746,52442,17494,49407,63016],[86042,44524,0,0,26787,97651,28572],[54183,83466,96754,89861,84143,13413,72921],[89405,52305,39907,27366,14603,0,14104],[70909,61104,70236,30365,0,30944,98378],[20124,87188,6515,98319,78146,99325,88919],[89669,0,64218,85795,2449,48939,12869],[93539,28909,90973,77642,0,72170,98359],[88628,16422,80512,0,38651,50854,55768],[13639,2889,74835,80416,26051,78859,25721],[90182,23154,16586,0,27459,3272,84893],[2480,33654,87321,93272,93079,0,38394],[34676,72427,95024,12240,72012,0,57763],[97957,56,83817,45472,0,24087,90245],[32056,0,92049,21380,4980,38458,3490],[21509,76628,0,90430,10113,76264,45840],[97192,58807,74165,65921,45726,47265,56084],[16276,27751,37985,47944,54895,80706,2372],[28438,53073,0,67255,38416,63354,69262],[23926,75497,91347,58436,73946,39565,10841],[34372,69647,44093,62680,32424,69858,68719],[24425,4014,94871,1031,99852,88692,31503],[24475,12295,33326,37771,37883,74568,25163],[0,18411,88185,60924,29028,69789,0],[34697,75631,7636,16190,60178,39082,7052],[24876,9570,53630,98605,22331,79320,88317],[27204,89103,15221,91346,35428,94251,62745],[26636,28759,12998,58412,38113,14678,0],[80871,79706,45325,3861,12504,0,4872],[79662,15626,995,80546,64775,0,68820],[25160,82123,81706,21494,92958,33594,5243]]
