class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& arr) {
        int n = arr.size(), m = arr[0].size();
        int dp[n + 1][m + 2]{}; // dp[i][j], min sum of path stopping at arr[i][j]
        dp[0][0] = dp[0][m + 1] = INT_MAX;
        
        for (int i = 1; i <= n; i++) {
            dp[i][0] = dp[i][m + 1] = INT_MAX;
            for (int j = 1; j <= m; j++) {
                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j + 1]) + arr[i - 1][j - 1];
                cout << dp[i][j] << " ";
            }
            cout << endl;
        }
        int res = INT_MAX;
        for (int i : dp[n]) res = min(res, i);
        return res;
    }
};


class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& arr) {
        int n = arr.size(), m = arr[0].size();
        int dp[n + 1][m + 2]{}; // dp[i][j], min sum of path stopping at arr[i - 1][j - 1]
        int mdp[n + 1][m + 2]{}; // mdp[i][j], min sum of path not stopping at arr[i - 1][j - 1]
        dp[0][0] = dp[0][m + 1] = INT_MAX;
        
        for (int i = 1; i <= n; i++) {
            dp[i][0] = dp[i][m + 1] = INT_MAX;
            int minSoFar = INT_MAX, j;
            for (j = 1; j <= m; j++) {
                // calculate min sum of path stopping at arr[i - 1][j - 1]
                dp[i][j] = mdp[i - 1][j] + arr[i - 1][j - 1];
                // calculate left-ward min
                mdp[i][j] = minSoFar; // msf, min dp until row i col j - 1;
                minSoFar = min(minSoFar, dp[i][j]);
            }
            for (j = m, minSoFar = INT_MAX; j >= 1; j--)
                
                
        }
        int res = INT_MAX;
        for (int i : dp[n]) res = min(res, i);
        return res;
    }
};



for (int i = 0; i <= n; i++) {
            for (int j = 0; j < m; j++)
                cout << dp[i][j] << " ";
            cout << endl;
        }
        cout << endl;
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < m; j++)
                cout << mdp[i][j] << " ";
            cout << endl;
        }
