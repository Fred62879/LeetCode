## Specification
In a given integer array A, we must move every element of A to either list B or list C. (B and C initially start empty.) Return true if and only if after such a move, it is possible that the average value of B is equal to the average value of C, and B and C are both non-empty.

Example :
Input: 
[1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have the average of 4.5.

Note: The length of A will be in the range [1, 30]. A[i] will be in the range of [0, 10000].



## Testcases
[0,3,5,2,6,1,8,10,4,17,9]
[3,1]
[17,3,7,12,1]
[60,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]



## Ideas
# (II) DP
_(ii) bitset_
https://leetcode.com/problems/split-array-with-same-average/discuss/120842/DP-with-bitset-over-*sum*-(fast-PythonRuby-decent-C%2B%2B)

https://leetcode.com/problems/split-array-with-same-average/discuss/120830/Simple-DP

_(i) knapsack_
https://leetcode.com/problems/split-array-with-same-average/discuss/120667/C%2B%2B-Solution-with-explanation-early-termination-(Updated-for-new-test-case)




## Code
# (II) DP
_(ii) bitset_
// derived
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), sum = accumulate(A.begin(), A.end(), 0), m = n / 2;
        // pruning
        int exist = 0;
        for (int i = 1; i <= m; i++)
            if (sum * i % n == 0) exist = 1;
        if (!exist) return false;
        // dp[i], all combin sum for subsets of len i
        int dp[sum + 1] = {1};
        for (int num : A) {
            for (int s = sum - num; s >= 0; s--)
                dp[s + num] |= dp[s] << 1;
        }
        // check
        for (int i = 1; i <= m; i++)
            if (sum * i % n == 0 && dp[sum*i/n] & (1 << i)) return true;
        return false;
    }
};


_(i) knapsack_
// others
class Solution {
    public boolean splitArraySameAverage(int[] A) {
        int sum = 0;
        for(int num : A){
            sum += num;
        }
        boolean[][] dp = new boolean[sum+1][A.length/2 + 1];
        dp[0][0] = true;
        for(int num : A){
            for(int i = sum; i >= num; i--){
                for(int j = 1; j <= A.length/2; j++){
                    dp[i][j] = dp[i][j] || dp[i-num][j - 1];
                }
            }
        }
        for (int i = 1; i <= A.length/2; ++i) 
            if (sum*i%A.length == 0 && dp[sum*i/A.length][i]) return true;
        return false;
    }
}

// derived_O(n) space
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), sum = accumulate(A.begin(), A.end(), 0), m = n / 2;
        // pruning
        int exist = 0;
        for (int i = 1; i <= m; i++)
            if (sum * i % n == 0) exist = 1;
        if (!exist) return false;
        
        // dp[i], all combin sum for subsets of len i
        vector<unordered_set<int>> dp(m + 1);
        dp[0] = { 0 };
        for (int j = 0; j < n; j++) // current right bound
            for (int i = min(m, j + 1); i >= 1; i--) // current length
                for (int num : dp[i-1])
                    dp[i].insert(num + A[j]);
        // check
        for (int i = 1; i <= m; i++)
            if (sum * i % n == 0 && dp[i].find(sum * i / n) != dp[i].end()) return true;
        return false;
    }
};

// derived_O(n^2) space
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), sum = accumulate(A.begin(), A.end(), 0), m = n / 2;
        // pruning
        int exist = 0;
        for (int i = 1; i <= m; i++)
            if (sum * i % n == 0) exist = 1;
        if (!exist) return false;
        // dp[i][j], all combin sum for subsets of len i within A[0:j]
        vector<vector<unordered_set<int>>> dp(m + 1, vector<unordered_set<int>>(n));
        for (int j = 0; j < n; j++) dp[0][j] = { 0 };
        dp[1][0] = { A[0] };
        for (int j = 1; j < n; j++) // current right bound
            for (int i = 1; i <= min(m, j + 1); i++) { // current length
                for (int num : dp[i-1][j-1])
                    dp[i][j].insert(num + A[j]);
                for (int num : dp[i][j-1])
                    dp[i][j].insert(num);
            }
        // check
        for (int i = 1; i <= m; i++) if (sum * i % n == 0)
            for (int j = 0; j < n; j++)
                if (dp[i][j].find(sum * i / n) != dp[i][j].end()) return true;
        return false;
    }
};


# (I) DFS
// others_TLE
class Solution {
public:
    // check the existence of subset of size sz that is valid
    bool check(int lo, int sz, int t, vector<int>& a) {
        if (t > a[lo] * sz) return false;
        if (sz == 0) return t == 0;
        for (int i = lo; i <= a.size() - sz; i++) { // from i onward
            if (a[i] <= t && check(lo + 1, sz - 1, t - a[i], a)) return true;
        }
        return false;
    }
    
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), sum = accumulate(A.begin(), A.end(), 0);
        sort(A.rbegin(), A.rend());
        for (int i = 1; i <= n / 2; i++)
            if (sum * i % n == 0 && check(0, i, sum * i / n, A)) return true;
        return false;
    }
};

// indep
#define cal(cur, run, sum, n, m) ( (cur + run) * n -  sum * m )

class Solution {
public:
    // 
    bool check(int lo, int run, int sum, int n, int m, vector<int>& a) {
        if (m && run * n == sum * m) {
            cout << lo << " " << run << " " << m << endl;
            return true;
        }
        for (int i = lo; i < n && cal(a[i], run, sum, n, m + 1) <= 0; i++)
            if (check(lo + 1, run + a[i], sum, n, m + 1, a)) return true;
        return false;
    }
    
    bool splitArraySameAverage(vector<int>& A) {
        sort(A.begin(), A.end());
        int n = A.size(), sum = accumulate(A.begin(), A.end(), 0);
        if (check(0, 0, sum, n, 0, A)) return true;
        return false;
    }
};

//
#define cal(cur, run, sum, n, m) ( (cur + run) * n -  sum * m )

class Solution {
public:
    // whether subarray of size #sz is valid
    bool check(int lo, int run, int sum, int n, int m, vector<int>& a) {
        if (run * n == sum * m) return true;
        for (int i = lo; i < n && !cal(a[i], run, sum, n, m); i++)
            if (check(lo + 1, run + a[i], sum, n, m + 1, a)) return true;
        return false;
    }
    
    bool splitArraySameAverage(vector<int>& A) {
        sort(A.begin(), A.end());
        int n = A.size(), sum = accumulate(A.begin(), A.end());
        int incre = sum % n ? 2 : 1, ini = sum % n ? 2 : 1;
        for (int i = ini; i < n / 2; i += incre) // subarray of size i
            if (check(i, 0, sum, n, 0, A)) return true;
        return false;
    }
};
