## Specification
Implementing the class MajorityChecker, which has the following API:

MajorityChecker(int[] arr) constructs an instance of MajorityChecker with the given array arr;
int query(int left, int right, int threshold) has arguments such that:
0 <= left <= right < arr.length representing a subarray of arr;
2 * threshold > right - left + 1, ie. the threshold is always a strict majority of the length of the subarray
Each query(...) returns the element in arr[left], arr[left+1], ..., arr[right] that occurs at least threshold times, or -1 if no such element exists.

 

Example:

MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // returns 1
majorityChecker.query(0,3,3); // returns -1
majorityChecker.query(2,3,2); // returns 2
 

Constraints:

1 <= arr.length <= 20000
1 <= arr[i] <= 20000
For each query, 0 <= left <= right < len(arr)
For each query, 2 * threshold > right - left + 1
The number of queries is at most 10000


## Testcases
["MajorityChecker","query","query","query"]
[[[1,1,2,2]],[0,3,3],[1,3,3],[2,3,2]]


["MajorityChecker","query","query","query"]
[[[1,2,1,2,1,3,3,1]],[0,3,3],[1,3,3],[2,3,2]]

["MajorityChecker","query","query","query","query","query","query","query","query","query","query"]
[[[2,2,1,2,1,2,2,1,1,2]],[2,5,4],[0,5,6],[0,1,2],[2,3,2],[6,6,1],[0,3,3],[4,9,6],[4,8,4],[5,9,5],[0,1,2]]



## Ideas
https://leetcode.com/problems/online-majority-element-in-subarray/discuss/356227/C%2B%2B-Codes-of-different-approaches-(Random-Pick-Trade-off-Segment-Tree-Bucket)
# (IV) Segment Tree
// others
Instead, we can calculate a segment tree to maintain the majority of intervals starting from the dividing of the whole array into two. When doing queries, we check all sub-intervals of the query range. Based on the idea that the majority of the query range must be the majority of at least one of its sub-interval, the correctness is proved.


# (Below)
All below methods rely on two sub-functions (i) find potential majority elemnet in a subarray and (ii) count # of occurrences of that element in the array (binary search or pre-compute)

// from discussion of above link: To remove the log(n) factor of binary search for occurrence of counting, we can pre-comput a_k for each popular number k where a_k[i] = occurrence of k in the leftmost i integers, so you can just do a_k[right]-a_k[left-1] when you want to count the occurrence of k between left and right. That makes pre-compute O(n*sqrt(n)) and query O(sqrt(n)).


# (III) Tradeoff
Another idea is that if we can collect all potential majoritys, then given a query range, we can iterate over all these majorities to check each of their validity. In this optimization, assuming we define majority as element that appear at least t times, then for the whole array, there are at most n/t such potential majorities and a iteration will consume only linear time. However, it is notable that such itertion is only applicable when the query threshold is smaller than the given t. In this case, the query range will be less than 2t which makes the potential majorities possible to be majority of the query range. (Simply, we need t to be larger than len / 2, otherwise, there would be unqualified elements involved. Since threshold > len / 2, we can force threshold < t, which ends up as len / 2 < threshold < t)


# (II) Bucket
// idea
The general idea is that if we divide the whole query interval into several equal-sized sub-intervals, the majority element (if exists) must be the majority of at least one of these sub-intervals. As a result, we can pre-calculate the majority of each sub-intervals of a selected size for the whole given array and when doing queries, we can go thru all intact sub-intervals contained inside the query interval to check if any of these pre-calculated majority is the majority of the whole query interval. And if segmented intervals exist in the front and tail, we need to calculate at real time the potential majority and then check if its a real majority.

This idea can be optimized based on the selection of the specified size of sub-intervals. In bucket case, this is generally selected as sqrt(n) to reduce runnimg time.


# (I) Random pick
https://leetcode.com/problems/online-majority-element-in-subarray/discuss/355848/Python-Binary-Search-%2B-Find-the-Majority-Element

Random Pick number a from the range of query. If there is a majority element, we have >50% chance to get it for each pick. Here I random pick 20 times, because there are at most 10000 queries and 2^20 = 1048576 is much bigger than 10000. If there is a majority element, I only have 1/(2^20) possibility to miss it. And we'll query at most 10000 times, the expectation of fail times is about 0.01 time, which sounds good.



## Code
# (IV) Segment tree



# (III) // tradeoff
**** WAIT ****



# (II) Bucket
// derived
class MajorityChecker {
public:
    int bsz, n;
    vector<int> arr, bucket;
    unordered_map<int, vector<int>> map;
    
    MajorityChecker(vector<int>& arr) {
        n = arr.size(), bsz = (int)sqrt(n);
        this->arr = arr;
        for (int i = 0; i < n; i++)
            map[arr[i]].push_back(i);
        calculateBucket();
    }

    // can be improved
    void calculateBucket() {
        int num = n / bsz;
        bucket.resize(num);
        for (int i = 0; i < num; i++)
            bucket[i] = getMajor(i * bsz, i * bsz + bsz - 1);
        if (bsz * num != n)
            bucket.push_back(getMajor(bsz * num, n - 1));
    }
    
    // count # of occurrences of val in arr[left:right]
    int occurrence(int val, int left, int right) {
        if (!map.count(val)) return 0;
        
        auto lo = lower_bound(map[val].begin(), map[val].end(), left);
	if (lo == map[val].end()) return 0;
        auto hi = upper_bound(map[val].begin(), map[val].end(), right);
        return hi - lo;
    }
    
    // find majority element in arr[left:right]
    int getMajor(int left, int right) {
        int res = -1, ct = 0;
        for (int i = left; i <= right; i++) {
            if (ct == 0) res = arr[i], ct = 1;
            else if (arr[i] == res) ct++;
            else if (--ct == 0) res = arr[i], ct = 1;
        }
        return res;
    }
    
    int query(int left, int right, int threshold) {
        if (left == right) return threshold == 1 ? arr[left] : -1;
        int lo = left / bsz, hi = right / bsz;
        if (left == right) {
            int res = getMajor(left, right);
            return occurrence(res, left, right) >= threshold ? res : -1;
        } else {
            int lomj = getMajor(left, (lo + 1) * bsz - 1);
            if (occurrence(lomj, left, right) >= threshold) return lomj;
            
            int himj = getMajor(hi * bsz, right);
            if (occurrence(himj, left, right) >= threshold) return himj;
            
            for (int j = lo + 1; j < hi; j++)
                if (occurrence(bucket[j], left, right) >= threshold)
                    return bucket[j];
            return -1;
        }
    }
};


# (I) Random pick
// 2nd visit_derived_Dec-2-2019
class MajorityChecker {
public:
    int n;
    vector<int> arr;
    unordered_map<int, vector<int>> ids;
    
    MajorityChecker(vector<int>& arr) {
        n = arr.size();
        this->arr = arr;
        for (int i = 0; i < n; i++) {
            if (!ids.count(arr[i])) ids[arr[i]] = {};
            ids[arr[i]].push_back(i);
        }
        
    }
    
    int count(int lo, int hi, int t) {
        auto left = lower_bound(ids[t].begin(), ids[t].end(), lo);
        auto right = upper_bound(ids[t].begin(), ids[t].end(), hi);
        return right - left;
    }
    
    int query(int left, int right, int threshold) {
        if (left == right) return threshold <= 1 ? arr[left] : -1;
        int len = right - left;
        for (int i = 0; i < 20; i++) {
            int id = left + rand() % len;
            if (count(left, right, arr[id]) >= threshold)
                return arr[id];
        }
        return -1;
    }
};


# (0) Failed attempts
// 2nd
class MajorityChecker {
public:
    vector<int> arr;
    unordered_map<int, vector<int>> map;
    
    MajorityChecker(vector<int>& arr) {
        this->arr = arr;
        for (int i = 0; i < arr.size(); i++)
            map[arr[i]].push_back(i);
        
    }
    
    int query(int left, int right, int threshold) {
        if (left == right) return threshold == 1 ? arr[left] : -1;
        int res = -1, ct = 0;
        for (int i = left; i <= right; i++) {
            if (ct == 0) res = arr[i], ct = 1;
            else if (arr[i] == res) ct++;
            else if (--ct == 0) res = arr[i], ct = 1;
        }
        if (res == -1) return -1;
        // check validity
        auto lo = lower_bound(map[res].begin(), map[res].end(), left);
        auto hi = upper_bound(map[res].begin(), map[res].end(), right);
        return hi - lo >= threshold ? res : -1;
    }
};

// 1st
class MajorityChecker {
public:
    vector<int> arr;
    unordered_map<int, int> map;
    
    MajorityChecker(vector<int>& arr) {
        this->arr = arr;
    }
    
    int query(int left, int right, int threshold) {
        if (left == right) return threshold == 1 ? arr[left] : -1;
        int res1 = arr[left], res2 = arr[right], ct1 = 1, ct2 = 1;
        for (int i = 1; i <= right - left; i++) {
            // left to right
            if (arr[left + i] != res1 && --ct1 == 0) {
                if (left + i < right) res1 = arr[left + i + 1], ct1 = 1;
                else res1 = -1;
            } else if (arr[left + i] == res1) ct1++;
            
            // right to left
            if (arr[right - i] != res2 && --ct2 == 0) {
                if (right - i >= left) res2 = arr[right - i - 1], ct2 = 1;
                else res2 = -1;
            } else if (arr[right - i] == res2) ct2++;
        }
        if (res1 == -1 || res2 == -1 || res1 != res2) return -1;
        return res1;
    }
};


// indep
class MajorityChecker {
public:
    vector<int> arr;
    
    MajorityChecker(vector<int>& arr) {
        this->arr = arr;
    }
    
    int query(int left, int right, int threshold) {
        if (left == right) return threshold == 1 ? arr[left] : -1;
        int res = arr[left], ct = 1;
	for (int i = left; i <= right; i++) {
            if (ct == 0) res = arr[i], ct = 1;
            else if (arr[i] == res) ct++;
            else if (--ct == 0) res = arr[i], ct = 1;
        }
	/*
        for (int i = left + 1; i <= right; i++) {
            if (arr[i] != res && --ct == 0) {
                if (i < right) res = arr[++i], ct = 1;
                else res = -1;
            } else if (arr[i] == res) ct++;
        }
	*/
        if (res == -1) return -1;
        
        int total = 0;
        for (int i = left; i <= right; i++)
            if (arr[i] == res) total++;
        return total >= threshold ? res : -1;
    }
};

/**
 * Your MajorityChecker object will be instantiated and called as such:
 * MajorityChecker* obj = new MajorityChecker(arr);
 * int param_1 = obj->query(left,right,threshold);
 */
