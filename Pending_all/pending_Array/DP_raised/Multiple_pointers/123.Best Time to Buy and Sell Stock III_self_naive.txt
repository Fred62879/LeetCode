class Solution {
    public int maxProfit(int[] p) {
        int n = p.length;
        if (n < 2) return 0;
        if (n == 2) return p[1] > p[0] ? p[1] - p[0] : 0;
        int[] rmax = new int[n - 1];
        rmax[n - 2] = p[n - 1] > p[n - 2] ? p[n - 1] - p[n - 2] : 0;
        int f = 0, s = 0, res = rmax[n - 2];
        for (int i = n - 3; i >= 0; i--) {
            int max = 0;
            int crmax = 0;
            for (int j = i + 1; j < n; j++) {
                int cur = p[j] > p[i] ? p[j] - p[i] : 0;
                max = Math.max(max, cur);
                if (j < n - 2) cur += rmax[j + 1];
                crmax = Math.max(cur, crmax);  // max tran profit in current row
            }
            rmax[i] = Math.max(max, rmax[i + 1]); // max row maximum from row n - 1 to row i;
            res = Math.max(res, crmax);
        }
        return res;
    }
}