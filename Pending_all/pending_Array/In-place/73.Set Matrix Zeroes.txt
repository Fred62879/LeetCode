## Specification
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.

Example 1:
Input: 
[[1,1,1],[1,0,1],[1,1,1]]
Output: 
[[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: 
[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: 
[[0,0,0,0],[0,4,5,0],[0,3,1,0]]

Follow up: A straight forward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution?


## Testcases
[[0,1,2,0],[3,4,5,2],[1,3,1,5]]


## Ideas
# (I) Sentinel
For a in-place modification, we can set elements at mtrx[0][j] and mtrx[i][0] to be zero given the discovery of a 0 at mtrx[i][j]. After we set sentinels for all zero entries, when we traverse the matrix to modify non-zero elements, for each element mtrx[i][j], we only need to refer to the first element on its row and column to evaluate whether it should be set as 0.
Notably, we start from row 1 and column 1, otherwise, the first row and column would be modified immediately which means all sentinels would be set to 0 only if one zero present.



## Code
# (I) Sentinel
// O(1) space
// others
class Solution {
public:
    void setZeroes(vector<vector<int>>& mtrx) {
        int n = mtrx.size(), m = mtrx[0].size();
        int row = 0, col = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) if (mtrx[i][j] == 0) {
                mtrx[i][0] = mtrx[0][j] = 0;
                if (i == 0) row = 1;
                if (j == 0) col = 1;
            }
        }
        for (int i = 1; i < n; i++)
            for (int j = 1; j < m; j++) if (mtrx[i][0] == 0 || mtrx[0][j] == 0)
                mtrx[i][j] = 0;
        if (col)
            for (int i = 0; i < n; i++) mtrx[i][0] = 0;
        if (row)
            for (int j = 0; j < m; j++) mtrx[0][j] = 0;
    }
};

// indep_not imple_complex
class Solution {
public:
    void horizontaProlif(int right, int i, int j, vector<vector<int>>& mtrx) {
        mtrx[i][j] = 0;
        if (right && j < m - 1 && mtrx[i][j+1]) mtrx[i][j+1] = -2; // right
        else if (!right && j > 0 && mtrx[i][j-1]) mtrx[i][j-1] = -2; // left
    }
    
    void verticalProlif(int down, int i, int j, vector<vector<int>>& mtrx) {
        mtrx[i][j] = 0;
        if (down && i < n - 1) {
            if (mtrx[i+1][j] == 1) mtrx[i+1][j] = -1; // down
            else if (mtrx[i+1][j] == -2) mtrx[i+1][j] = -3; // junction
        } else if (!down && i > 0) {
            if (mtrx[i-1][j] == 1) mtrx[i-1][j] = -1; // up
            else if (mtrx[i-1][j] == -2) mtrx[i+1][j] = -3; // junction
        }
    }
    
    void setZeroes(vector<vector<int>>& mtrx) {
        int n = mtrx.size(), m = mtrx[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!mtrx[i][j]) {
                    if (i > 0 && mtrx[i-1][j]) mtrx[i-1][j] = -1; // vertical 
                    if (i < n - 1 && mtrx[i+1][j]) mtrx[i+1][j] = -1;
                    if (j > 0 && mtrx[i][j-1]) mtrx[i][j-1] = -2; // horizontal
                    if (j < m - 1 && mtrx[i][j+1]) mtrx[i][j+1] = -2;
                } 
                else if (mtrx[i][j] == -1 || mtrx[i][j] == -3)
                    verticalProlif(1, i, j, mtrx); // propagate down
                else if (mtrx[i][j] == -2 || mtrx[i][j] == -3)
                    horizontalProlif(1, i, j, mtrx); // propagate right
            }
        }
        
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                if (mtrx[i][j] == -1 || mtrx[i][j] == -3)
                    verticalProlif(0, i, j, mtrx); // up
                else if (mtrx[i][j] == -2 || mtrx[i][j] == -3)
                    horizontalProlif(0, i, j, mtrx); // left
            }
        }
    }
};
