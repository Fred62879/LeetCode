## Specification
Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:
Given nums = [1,1,1,2,2,3],
Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It doesn't matter what you leave beyond the returned length.

Example 2:
Given nums = [0,0,1,1,1,1,2,3,3],
Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.
It doesn't matter what values are set beyond the returned length.

Clarification:
Confused why the returned value is an integer but your answer is an array? Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well. Internally you can think of this:



## Ideas
# (I) In-place_Pointer
// others
This imple works better without replying on swap. In this case, index points to the element before the first redundant element. Since
we do not care about the leftover elements that are beyond ans, we only need to ensure the appearance of non-redundant element
at the correct place. Thus, we shall monitor only the condition around index. To maintain idx to point to the right element, we only update idx when we already have two identical elements (nums[idx] == nums[idx-1]) in the non-redundant part in the front and the newly discovered
element is still an identical one.

// indep
Since at most two identical elements can be tolerated in the resulting array, we can keep swapping valid entries with those redundant ones. To do this, we can keep a pointer (lo) pointing to the index where the first redundant elelment locates. As
we encounter a new element, we immediately swap it with that pointed by lo. Then, after incrementing lo, if the current element has a duplicate following it, we swap the duplicate with that pointed by the incremented lo. After this, all elements indetical
to the current element would be new redundant ones and we can simply increment i to record this.


## Code
# (I) In-place_Pointer
// others
class Solution {
public:
    int removeDuplicates(vector<int>& nums){
        if (nums.empty())
            return 0;
        if (nums.size() < 2)
            return nums.size();

        int index = 1;
        for (int i = 2; i < nums.size(); ++i){
            if (nums.at(index) == nums.at(index-1) && nums.at(i) == nums.at(index))
                continue;
            nums.at(++index) = nums.at(i);
        }
        return index + 1;
    }
};

// indep
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int lo = 0;
        for (int i = 0; i < nums.size(); ) {
            swap(nums[i++], nums[lo++]);
            if (i < nums.size() && nums[i] == nums[lo - 1])
                swap(nums[i++], nums[lo++]);
            while (i < nums.size() && nums[i] == nums[lo - 1]) i++;
        }
        return lo;
    }
};