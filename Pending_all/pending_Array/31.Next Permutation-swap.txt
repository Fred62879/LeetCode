## Specification
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order). The replacement must be in-place and use only constant extra memory. Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


## Ideas
Starting from the last element, iterating back until the first element (valley) which is smaller than its successor (peak). Then find the ceiling element of this valley element and swap them. Then sort the part of the array starting from peak onward.


## Code
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        for (int n = nums.size(), i = n - 2; i >= 0; i--) {
            if (nums[i] >= nums[i + 1]) {
                if (i == 0) sort(nums.begin(), nums.end());
                continue;
            }
            int npos = n - 1;
            for (int j = i + 1; npos == n - 1 && j < n; j++)
                if (nums[j] <= nums[i]) npos = j - 1;
            swap(nums[i], nums[npos]);
            sort(nums.begin() + i + 1, nums.end());
            return;
        }
    }
};
