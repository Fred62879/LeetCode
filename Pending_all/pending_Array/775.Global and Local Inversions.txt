## Specification
We have some permutation A of [0, 1, ..., N - 1], where N is the length of A. The number of (global) inversions is the number of i < j with 0 <= i < j < N and A[i] > A[j]. The number of local inversions is the number of i with 0 <= i < N and A[i] > A[i+1]. Return true if and only if the number of global inversions is equal to the number of local inversions.

Example 1:
Input: A = [1,0,2]
Output: true
Explanation: There is 1 global inversion, and 1 local inversion.

Example 2:
Input: A = [1,2,0]
Output: false
Explanation: There are 2 global inversions, and 1 local inversion.

Note:
A will be a permutation of [0, 1, ..., A.length - 1].
A will have length in range [1, 5000].
The time limit for this problem has been reduced.



## Testcases
[2,0,1]
[3,0,4,1,2]



## Ideas
# (II) Swap_simulation
Since a valid permutation must only swap two elements directly adjacent to each other in the ascending array, it comes as a product that each element i can only be in index i-1, i, or i+1. If every element locate at i, its original index, then its trivial to prove the validity. If swaps do occur, then since only A[i] and A[i + 1] are swapped, the swapped elements can only be one cell away from its origial location.


# (I) MaxSoFar
The claim is equivalent to say that only adjacent elements of the original ascending array can be swapped. Therefore, we can keep a pointer recording
the max elements until the elements two steps before. At each index i, we only need to compare A[i] with the max among A[0] to A[i - 2]. If A[i] is smaller, then we are sure that this value violates the rule.


## Code
# (II) Swap_simulation
**** WAIT ****

# (I) MaxSoFar
// indep
class Solution {
public:
    bool isIdealPermutation(vector<int>& A) {
        int n = A.size(), mtp = -1; // max till prev
        for (int i = 1; i < n; i++) {
            if (A[i] < mtp) return false;
            mtp = max(mtp, A[i - 1]);
        }
        return true;
    }
};
