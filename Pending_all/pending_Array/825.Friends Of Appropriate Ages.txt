## Specification
Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. Person A will NOT friend request person B (B != A) if any of the following conditions are true:
age[B] <= 0.5 * age[A] + 7
age[B] > age[A]
age[B] > 100 && age[A] < 100
Otherwise, A will friend request B. Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves. How many total friend requests are made?

Example 1:
Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.

Example 2:
Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.

Example 3:
Input: [20,30,100,110,120]
Output: 
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

Notes:
1 <= ages.length <= 20000.
1 <= ages[i] <= 120.



## Testcases
[90,70,75,72,67,100,120,118,120,109,104]
[16,16,16,16,16,16,16,16]



## Ideas
# (II) Counting
https://leetcode.com/problems/friends-of-appropriate-ages/discuss/127029/C%2B%2BJavaPython-Easy-and-Straight-Forward

https://leetcode.com/problems/friends-of-appropriate-ages/discuss/126930/C%2B%2B-5-lines-O(n)-sliding-sum

https://leetcode.com/problems/friends-of-appropriate-ages/discuss/152040/CPP-100-easy-to-understand-and-elegant




## Code
# (II) Counting
// 

# (I) Binary Search
// indep_slow
class Solution {
public:
    int numFriendRequests(vector<int>& ages) {
        sort(ages.begin(), ages.end());
        int ans = 0, n = ages.size(), pre = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1 && ages[i] != ages[i + 1]) pre = i;
            int lo = ages[i] / 2 + 8;
            if (lo > ages[i]) continue;
            
            ans += pre - i; // same ages to the right
            auto it = lower_bound(ages.begin(), ages.begin() + i + 1, lo); // diff ages
            if (it != ages.begin() + i) ans += ages.begin() + i - it;
        }
        return ans;
    }
};
