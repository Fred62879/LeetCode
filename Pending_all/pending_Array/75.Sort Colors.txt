## Specification
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. Note: You are not suppose to use the library's sort function for this problem.

Example:
Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Follow up: A rather straight forward solution is a two-pass algorithm using counting sort. First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's. Could you come up with a one-pass algorithm using only constant space?


## Ideas
# (III) Lomouto partition
The idea is to record the terminate id for each color. When we reach i, to incorporate the new element into the already sorted 0~i-1, we manipulate the three flags. If the new element is a zero, then apparently, we should insert it to where the zero flag is, and push the 1 and 2 flag forward serially.

To be concise, we keep a loop invariant that [0,i) [i, j) [j, k) are 0s, 1s and 2s sorted in place for [0,k). We don't need to swap because we know the values we want.



## Code
# (III) Lomouto partition
// others
class Solution { 
public:
    void sortColors(vector<int>& nums) {
        int r = 0, w = 0, b = 0; // label the end of different colors;
        for (int num: nums) {
            if (num == 0) { nums[b++] = 2; nums[w++] = 1; nums[r++] = 0; } 
            else if (num == 1) { nums[b++] = 2; nums[w++] = 1; }
            else if (num == 2) b++;
        }
    }
};

// concise_others
def sortColors(self, nums):
    i = j = 0
    for k in xrange(len(nums)):
        v = nums[k]
        nums[k] = 2
        if v < 2:
            nums[j] = 1
            j += 1
        if v == 0:
            nums[i] = 0
            i += 1


# (II) Quick sort/Swap
// others
class Solution { 
public:
    void sortColors(vector<int>& nums) {
        int i = 0, j = i, k = nums.size() - 1;
        while (j <= k) {
            if (nums[j] == 0) swap(nums[i++], nums[j++]);
            else if (nums[j] == 1) j++;
            else swap(nums[k--], nums[j]);
        }
    }
}; 


# (I) Count sort
// indep
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int ct[3];
        for (int i = 0; i < n; i++)
            ct[nums[i]]++;
        for (int i = 0, cl = 0; i < n; i++) {
            while (ct[cl] == 0) cl++;
            nums[i] = cl,ct[cl]--;
        }
    }
};
