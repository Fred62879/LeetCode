## Specification
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12

Note: You may assume that the matrix does not change. There are many calls to sumRegion function. You may assume that row1 ≤ row2 and col1 ≤ col2.



## Testcases
["NumMatrix","sumRegion","sumRegion","sumRegion"]
[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]]]

["NumMatrix"]
[[[]]]



## Code
# (I) Prefix Sum
// others_concise and faster
class NumMatrix {
public:
    vector<vector<int>> sum;
    
    NumMatrix(vector<vector<int>>& matrix) {
        if (matrix.size() == 0) return;
        int n = matrix.size(), m = matrix[0].size(), ans = 0;
        sum.assign(n + 1, vector<int>(m + 1, 0));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + matrix[i][j];
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return sum[row2+1][col2+1] - sum[row2+1][col1] - sum[row1][col2+1] + sum[row1][col1];
    }
};

// indep
class NumMatrix {
public:
    vector<vector<int>> sum;
    
    NumMatrix(vector<vector<int>>& matrix) {
        if (matrix.size() == 0) return;
        int n = matrix.size(), m = matrix[0].size(), ans = 0;
        sum.assign(n, vector<int>(m));
        sum[0][0] = matrix[0][0]; // sum from [0,0] to [i,j]
        
        for (int i = 1; i < n; i++) sum[i][0] = sum[i-1][0] + matrix[i][0];
        for (int j = 1; j < m; j++) sum[0][j] = sum[0][j-1] + matrix[0][j];
        for (int i = 1; i < n; i++)
            for (int j = 1; j < m; j++)
                sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + matrix[i][j];
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        if (row1 == 0)
            return sum[row2][col2] - ( !col1 ? 0 : sum[row2][col1-1] );
        else if (col1 == 0)
            return sum[row2][col2] - sum[row1-1][col2];
        
        int total = sum[row2][col2], corner = sum[row1-1][col1-1];
        int lftpole = sum[row2][col1-1], topole = sum[row1-1][col2];
        return total -lftpole - topole + corner;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
