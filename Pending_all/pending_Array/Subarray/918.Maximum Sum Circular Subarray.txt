## Specification
Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C. Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.) Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.) 

Example 1:
Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3

Example 2:
Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10

Example 3:
Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4

Example 4:
Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3

Example 5:
Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1

Note:
-30000 <= A[i] <= 30000
1 <= A.length <= 30000



## Idea
# (3) Naive

# (2) Queue
Since every possible subarray that possesses the largest sum would be a joint subarray of A+A, we simply append two A together. To derive the largest sum, we first calculate sum of elements from 0 to i for every i and we are then simply selecting two indexes from 0 to 2i whose difference in this sum is the largest.

# (1) Kadane's


## Code
# (2) Queue
// derived
class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        int n = A.size(), mx = A[0];
        vector<int> sum(n * 2 + 1, 0);
        for (int i = 0; i < n * 2; i++)
            sum[i + 1] = sum[i] + A[i % n];
        
        deque<int> q; q.push_back(0);
        for (int i = 1; i <= n * 2; i++) {
            if (i - q.front() > n)
                q.pop_front();
            mx = max(mx, sum[i] - sum[q.front()]);
            while (!q.empty() && sum[q.back()] >= sum[i])
                q.pop_back();
            q.push_back(i);
        }
        return mx;
    }
};
