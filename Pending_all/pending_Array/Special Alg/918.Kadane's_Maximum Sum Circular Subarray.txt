## Specification
Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C. Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.) Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.) 

Example 1:
Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3

Example 2:
Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10

Example 3:
Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4

Example 4:
Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3

Example 5:
Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1

Note:
-30000 <= A[i] <= 30000
1 <= A.length <= 30000



## Idea
# (3) Naive

# (2) Queue

# (1) Kadane's 
Preferred: O(n) & O(1)
Circular array can be classified as joint (take elements in the middle of the array) and disjoint (drop elements in the middle). For joint array, mx sum can be found constantly updating the max sum so far. Based on DP, we can update progressively the max array sum ending at each element and in this process, mx total is simultaneously updated. As for disjoint array, we can minimize the sum of the array in the middle from 1 ~ n-2 and subtract this from total array sum.

Notice when combine the two for loops, runtime increase a bit.


## Code
# (1) Kadane's
// optimize
class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        int n = A.size(), maxSofar = A[0], mx = A[0], sum = A[0], minSofar = A[1], mn = A[1];
        for (int i = 1; i < n; i++) {
            maxSofar = A[i] + max(0, maxSofar);
            mx = max(mx, maxSofar);
            if (i >= 2 && i < n - 1) { 
                minSofar = A[i] + min(0, minSofar);
                mn = min(mn, minSofar); 
            }
            sum += A[i];
        }
        return max(mx, sum - mn);
    }
};

// derived
class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        int n = A.size(), maxSofar = A[0], mx = A[0], sum = A[0];
        for (int i = 1; i < n; i++) {
            maxSofar = A[i] + max(0, maxSofar);
            mx = max(mx, maxSofar);
            sum += A[i];
        }
        int minSofar = A[1], mn = A[1];
        for (int i = 2; i < n - 1; i++) {
            minSofar = A[i] + min(0, minSofar);
            mn = min(mn, minSofar);
        }
        cout << mx << ", " << mn;
        return max(mx, sum - mn);
    }
};
