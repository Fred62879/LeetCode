## Specification
Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1. Return the least number of moves to make every value in A unique.

Example 1:
Input: [1,2,2]
Output: 1

Example 2:
Input: [3,2,1,2,1,7]
Output: 6

Note:
0 <= A.length <= 40000
0 <= A[i] < 40000


## Testcases
[0,0]
[2,1,2,4,3,3]
[2,1,2,4,3,6,3]



## Ideas
# (III) Union find
The union find name is given by Lee. Actually, this is similar with my original idea to store the unique value to be taken for each value i in a map. Take testcase-2 for instance. If A[i] is not recorded in map, it means that value is never touched and the unique value for A[i] is simply itself which is the case for "2" and "1".

Then as we reach the 2nd "2", we found that it was recorded with 2. In this case, we shall expect the next value - 3 - to be corresponding unique value for this 2. Indeed, 3 is not touched. However, since we are using 3 here, it means that when we reach a real 3 in the future, we shall be aware of the what we have done now. Thus, we also record 3 in the map as if it was taken.

However, as we reach 3, we can find the expected value 4 is also taken. In that case, we take 4 and keep going to decide what value to take as if the current value is 4.
    i   1   2    3   4    5   
map[i]  1  2/3  3/5  4    5

When we reach the second 3, we can find that map[3] is 5. If we still follow the scheme above, we need to take 4 and keep going. However, we clearly know that map[3] should be larger than 5 and in that case, we shall take 6 immediately and recurse.

Testcase 3 can be used to indicate how the clause indicated works.


# (II) Count
Similar to counting sort, we first count the amount of all numbers. Then we iterate thru all numbers from smallest to largest. For instance, as we reach number i, all number less than i shall now be made unique. This may be at the cost of rendering certain numbers oringinally being smaller than i, now exceeding i. We shall record this value for our reference.

# (I) Sort



## Code
# (III) Union find
// others_optmizied_slow
class Solution {
public:
    unordered_map<int, int> root;

    int minIncrementForUnique(vector<int>& A) {
        int res = 0;
        for (int a : A)
            res += find(a) - a;
        return res;
    }
    int find(int x) {
        if (!root.count(x))
            root[x] = x;
        else if (x != root[x])
            root[x] = find(root[x]);
        else if (root.count(x + 1))
            root[x] = find(root[x + 1]);
        else
            root[x] = root[x + 1] = x + 1;
        return root[x];
    }
};

// indep_too slow
class Solution {
public:
    // map[i] denotes the min unique val to be taken
    // for the original number i
    unordered_map<int, int> map;
    
    int nxt(int a) {
        if (!map.count(a)) {
            map[a] = a;
        } else if (map[a] == a) {
            if (!map.count(a + 1)) map[a] = map[a + 1] = a + 1;
            else map[a] = nxt(map[a + 1]);
        } else { // (i)
            if (!map.count(map[a] + 1)) map[a] = map[map[a] + 1] = map[a] + 1;
            else map[a] = nxt(map[a] + 1);  // testcase 3
        }
	// else map[a] = nxt(map[a] + 1); // equivalent to (i)
        return map[a];
    }
    
    int minIncrementForUnique(vector<int>& A) {
        int res = 0;
        for (int a : A)
            res += nxt(a) - a;
        return res;
    }
};


# (II) Count
// others_similar idea
class Solution {
    public int minIncrementForUnique(int[] A) {
        int[] count = new int[40002];
        int result = 0;
        int max = 0;
        for (int a : A) {
            count[a]++;
            max = Math.max(max, a);
        }
        for (int i = 0; i < max; i++) {
            if (count[i] <= 1) {
                continue;
            }
            int diff = count[i] - 1;
            result += diff;
            count[i + 1] += diff;
            count[i] = 1;
        }
        int diff = count[max] - 1;
        result += (1 + diff) * diff / 2;
        return result;
    }
}

// indep
class Solution {
public:
    int minIncrementForUnique(vector<int>& A) {
        int ans = 0, n = A.size(), hi = -1;
        int ct[40000]{};
        for (int i = 0; i < n; i++) ct[A[i]]++;
        for (int i = 0; i < 40000; i++) if (ct[i]) {
            if (hi < i) { 
                ans += (ct[i] - 1) * ct[i] / 2;
                hi = i + ct[i] - 1;
            } else {
                ans += ( (hi - i + 1) + (hi - i + ct[i]) ) * ct[i] / 2;
                hi += ct[i];
            }
        }
        return ans;
    }
};


# (I) Sort
// indep
class Solution {
public:
    int minIncrementForUnique(vector<int>& A) {
        int ans = 0;
        sort(A.begin(), A.end());
        for (int i = 1; i < A.size(); i++) {
            if (A[i] == A[i - 1]) {
                A[i]++, ans++;
            } else if (A[i] < A[i - 1]) {
                int incre = A[i - 1] - A[i] + 1;
                A[i] += incre, ans += incre;
            }
        }
        return ans;
    }
};
