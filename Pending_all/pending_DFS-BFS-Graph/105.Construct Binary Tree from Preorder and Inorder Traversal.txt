## Specification
Given preorder and inorder traversal of a tree, construct the binary tree.

Note: You may assume that duplicates do not exist in the tree.

Example:
preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7



## Testcases
[5,1,2,3,4,6,7,8,9,10]
[1,3,2,4,5,7,6,9,8,10]

[5,6,7,8,10,11,9,12,13,14,16,17,15,18,19]
[5,10,8,11,7,9,12,6,16,14,17,13,18,15,19]

[1,2,4,7,13,8,14,15,5,9,16,17,18,3,6,10,11,12]
[13,7,4,14,8,15,2,5,17,16,18,9,1,3,11,10,12,6]



## Ideas
# (I) DFS/Recursion
_(ii) imple_
// adapted
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34543/Simple-O(n)-without-map

Instead of using lo and hi to specify which subtree use nodes in which portion of inorder and preorder, since the separating points is always the temporal 1st preorder element, we can simply remember that value somehow and cease the specific recursion when that value is reached.

_(i) logic_
// preorder & inorder
Take the 1st testcase for instance. Since the first entry in preorder is always the root, assuming the same node is the ith entry in inorder, then inorder[0:i-1] and preorder[1:i] specifies the same subtree which is the left subtree of the root. In this case, 1,3,2,4 would be the collection of nodes in the left subtree of the root which has value 5.

// postorder & inorder
Mistakenly set up, not for this problem but worth pondering. Instead of finding corresponding elements of entries in preorder, when postorder traversal result is given, we shall use elements in inorder as reference. In this case, assuming the ith postorder node has the same value as the 1st inorder node, then inorder[1:i] and postorder[0:i-1] specify the right subtree rooted at inorder[0]. And the whole temporal tree _order[0:i] is the left subtree of node inorder[i+1].

Based on this, we can construct the temporal tree and pass it as the left subtree to the following tree.



## Code
# (I) DFS/Recursion
// adapted
**** WAIT ****

// indep
class Solution {
public:
    unordered_map<int, int> idi;
    
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int pl, int ph, int il, int ih) {
        // cout << pl << "/" << ph << ", " << il << "/" << ih << endl;
        if (ph < pl || ih < il) return nullptr;
        TreeNode* cur = new TreeNode(preorder[pl]);
        if (pl == ph && il == ih) return cur;
        
        int hi = idi[preorder[pl]]; // id of preorder[x] in inorder
        int nph = hi - il + pl;
        cur->left = build(preorder, inorder, pl + 1, nph, il, hi - 1);
        cur->right = build(preorder, inorder, nph + 1, ph, hi + 1, ih);

        return cur;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        for (int i = 0; i < n; i++)
            idi[inorder[i]] = i;
        return build(preorder, inorder, 0, n - 1, 0, n - 1);
    }
};


// mistakenly set up for
// postorder & inorder
// **** STAY TUNED ****
class Solution {
public:
    int np, ni;
    unordered_map<int> p;
    
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, TreeNode* lft, int pl, int ph, int il, int ih) {
        if (ph < pl || ih < il) return nullptr;
        TreeNode* cur = new TreeNode(inorder[il]);
        if (pl == ph && il == ih) return cur;
        
        int hi = p[inorder[il]]; // id of inorder[0] in preorder
        fst->right = build(preorder, inorder, nullptr, 0, hi - 1, 1, hi);
        fst->left = lft;
        
        TreeNode* p = build(preorder, inorder, cur, hi + 1, ph, hi + 1, ih); // propagate right
        return p;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        np = preorder.size(), ni = inorder.size();
        unordered_map<int> p;
        for (int i = 0; i < np, i++)
            p[preorder[i]] = i;
        return build(preorder, inorder, nullptr, 0, np - 1, 0, ni - 1);
    }
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
