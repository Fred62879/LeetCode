## Specification
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 
You may serialize the following tree as "[1,2,3,null,null,4,5]"
    1
   / \
  2   3
     / \
    4   5
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



## Testcases
[-1,2,0,null,null,3,null,null,5,7]
[-1]
[-50,-49,null,-30]
[]



## Ideas
# (III) Tuplify + json (Python)
https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74430/Tuplify-%2B-json-Python


# (II) DFS/Pre-order traversal
https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74252/Clean-C%2B%2B-solution.

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74259/Recursive-preorder-Python-and-C%2B%2B-O(n)

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74260/Recursive-DFS-Iterative-DFS-and-BFS

Instead of level-wise traversl, pre-order (p + l + r) traversal also works and tend to be tidy when imple recursively. Or else, this can also be implemented iteratively.



# (I) BFS traversal
https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74446/C%2B%2B-Accepted-O(n)-Easy-Solution

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74385/Leetcode-way-in-C%2B%2B-and-Python

I tried to encode the tree level-by-level but this requires every node, including the null nodes, to be recorded with children as placeholders which leads to TLE. Inspired by others solution, it seems that we can encode the tree just like the testcase where the null nodes will not be tracked with children anymore.

To decode such string, we can make use of queue again. Every node, if not null, will have both two of its children recorded even if the children may be null node. In this case, since we are manipulating with pointers, we can start with the root node and add its left and right children to it first. Then, we can ignore the root and only concentrate to update its left and right child node which have already been linked with the root.

Since the null node will not be tracked with children node anymore, after reaching a null node, we do not add it into the queue. As a result, as we are traversing the string, every two nodes we encounter are exactly the two children of the currently poped out node.




## Code
# (II) DFS/Pre-order traversal
**** WAIT ****
// iterative


// recursive


# (I) BFS traversal
// others_stringstream
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res = "";
        queue<TreeNode*> col;
        col.push(root);
        while (!col.empty()) {
            TreeNode* cur = col.front(); col.pop();
            res += (cur ? to_string(cur->val) : "n") + " ";
            if (cur != nullptr) col.push(cur->left), col.push(cur->right);
        }
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        cout << data << endl;
        istringstream in(data);
        string tmp;
        vector<TreeNode*> col;
        
        while (in >> tmp)
            col.push_back(tmp == "n" ? NULL : new TreeNode(stoi(tmp)) );
        
        int id = 0, child = 1, m = col.size();
        while (child < m) if (col[id++] != nullptr) {
            col[id - 1]->left = col[child++];
            if (child < m) col[id - 1]->right = col[child++];
        }
        return col[0];
    }
};

// others_double pointer
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        string str;
        while (!q.empty()) {
            if (q.front() == nullptr) {
                str = str + "#,";
            } else {
                q.push(q.front()->left);
                q.push(q.front()->right);
                str = str + to_string(q.front()->val) + ",";
            }
            q.pop();
        }
        return str;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        TreeNode* root = nullptr;
        queue<TreeNode**> q; q.push(&root);
        string::iterator first = data.begin();
        while (first != data.end()) {
            TreeNode** pp = q.front();
            if (*first == '#') {
                // *pp = nullptr;
                advance(first, 2);
            } else {
                string::iterator last = find(first, data.end(), ',');
                int val = stoi(string(first, last));
                *pp = new TreeNode(val);
                q.push(&((*pp)->left));
                q.push(&((*pp)->right));
                first = next(last);
            }
            q.pop();
        }
        return root;
    }
};


// derived
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res = "";
        queue<TreeNode*> col;
        col.push(root);
        while (!col.empty()) {
            TreeNode* cur = col.front(); col.pop();
            res += (cur ? to_string(cur->val) : "n") + ",";
            if (cur != nullptr) col.push(cur->left), col.push(cur->right);
        }
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<string> col; // collect nodes
        for (int i = 0, j; i < data.size(); i = j + 1) {
            for (j = i + 1; j < data.size(); j++) 
                if (data[j] == ',') break;
            col.push_back(data.substr(i, j - i));
        }
        
        TreeNode* root = col[0][0] != 'n' ? new TreeNode(stoi(col[0])) : NULL;
        queue<TreeNode*> q; q.push(root);
        int id = 1, m = col.size();
        while (!q.empty()) {
            TreeNode* cur = q.front(); q.pop(); 
            if (id < m && col[id++][0] != 'n') {
                TreeNode* lft = new TreeNode(stoi(col[id - 1]));
                cur->left = lft, q.push(lft);
            }
            if (id < m && col[id++][0] != 'n') {
                TreeNode* rht = new TreeNode(stoi(col[id - 1]));
                cur->right = rht, q.push(rht);
            }
        }
        return root;
    }
};


// indep_TLE
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res = "";
        queue<TreeNode*> col;
        col.push(root);
        int allNull = 0;
        while (!allNull) {
            int sz = col.size(); allNull = 1;
            for (int i = 0; i < sz; i++) {
                TreeNode* cur = col.front(); col.pop();
                res += (cur ? to_string(cur->val) : "n") + ",";
                // cout << (cur ? cur->val : 0) << ": " << res << endl;
                col.push(cur != NULL ? cur->left : NULL);
                col.push(cur != NULL ? cur->right : NULL);
                if (cur != NULL && (cur->left || cur->right)) allNull = 0;
            }
        }
        return res;
    }
    
    // construct node with given id
    TreeNode* helper(int id, vector<string>& col) {
        if (id >= col.size() || col[id] == "n") return NULL;
        TreeNode* cur = new TreeNode(stoi(col[id]));
        cur->left = helper(id *2 + 1, col), cur->right = helper(id * 2 + 2, col);
        return cur;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<string> col; // collect nodes
        for (int i = 0, j; i < data.size(); i = j + 1) {
            for (j = i + 1; j < data.size(); j++) 
                if (data[j] == ',') break;
            col.push_back(data.substr(i, j - i));
        }
        return helper(0, col);
    }

    /*
    // Iterative_not imple
    TreeNode* deserialize(string data) {
        TreeNode* a;
        return a;
        /*
        
        // generate trees
        int m = col.size(), h = log(m + 1) / log(2), st = pow(h - 1, 2) - 1, ed = st * 2;
        vector<TreeNode*> tmp, prev;
        for (int i = h, k = 0; i >= 1; i--, ed = st-1, st = ed/2, k = 0, prev = tmp) {
            for (int j = st; j <= ed; j++) if (!col[j]) {
                TreeNode* newnd(col[j]);
                if (!prev.empty()) newnd->left = prev[k++], newnd->right = prev[k++];
                tmp.push_back(newnd);
            }
        }
        return tmp[0];
        */
    }
    */
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
