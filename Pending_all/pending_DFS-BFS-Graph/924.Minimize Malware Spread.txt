## Specification
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1. Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.

This spread of malware will continue until no more nodes can be infected in this manner. Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops. We will remove one node from the initial list.

Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index. Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length



## Testcases
[[1,1,1,0,0,0,0],[1,1,1,0,0,0,0],[1,1,1,0,0,0,0],[0,0,0,1,1,1,1],[0,0,0,1,1,1,1],[0,0,0,1,1,1,1],[0,0,0,1,1,1,1]]
[0,3]
[0,3,5]
[0,2,3,4]

[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]
[0,1]

[[1,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,0,1,0,0,0,0],[0,0,0,1,1,1,0],[0,0,0,1,1,0,0],[0,0,0,1,0,1,1],[0,0,0,0,0,1,1]]
[0,3]

[[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[0,1,1,0,0,1,0,0,0,0],[0,1,0,1,0,0,0,1,0,1],[0,0,0,0,1,0,1,0,0,0],[0,0,1,0,0,1,0,0,0,1],[0,0,0,0,1,0,1,0,1,0],[0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,1,0],[0,0,0,1,0,1,0,0,0,1]]
[3,1,9]

[[1,1,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,1],[0,0,1,0,1,0,0,0,0,1],[0,0,0,1,0,0,0,0,0,1],[0,0,1,0,1,0,1,0,0,1],[0,0,0,0,0,1,1,0,0,0],[0,0,0,0,1,1,1,0,0,1],[0,0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,1,1,0],[0,1,1,1,1,0,1,0,0,1]]
[9,0,2]


## Ideas
# (II) DSU
Exactly the same idea, imple using disjoint set union

# (I) DFS
// spread
https://leetcode.com/problems/minimize-malware-spread/discuss/182055/C%2B%2B-10-lines-unique-malware-signatures

// Connected Component
Once we process the graph to connected components, it can be conferred from the specification that if a particulr cc possesses more than 1 nodes initially infected, it does not help to remove any one of them. Thus, if all cc's possess more than 1 initially infected nodes, we simply return the smallest element in "initial". Otherwise, given certain cc possesses exactly one ini infected node, we constantly update the # of nodes can be saved given its removal which is the # of nodes in that cc.



## Code
# (II) DSU
// DSU_others_faster
class Solution {  
public:
    vector<int> parent;
    
    // find root of x
    int find(int x) {
        return parent[x] == -1 ? x : find(parent[x]);
    }
    
    void Union(int x, int y) {
        parent[y] = x, parent[x] = -1;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parent.assign(n, -1);
        unordered_map<int,int> count;
        for(int i = 0; i < n; i++) count[i]=1;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) if (graph[i][j] == 1) {
                int parx=find(i), pary=find(j);
                if (parx == pary) continue;
                Union(parx, pary);
                count[parx] += count[pary];
            }
        }
        int ans = INT_MAX, maxi = 0, m = initial.size();
        unordered_map<int,int> seen;
        for (int i = 0; i < m; i++) {
            seen[find(initial[i])]++;
            ans = min(ans, initial[i]);
        }
        
        for (int i = 0; i < m; i++) {
            int par = find(initial[i]);
            if (seen[par] != 1) continue;
            
            if (count[par] > maxi)
                maxi = count[par], ans = initial[i];
            else if (count[par] == maxi) 
                ans=min(ans, initial[i]);
        }
        return ans;
    }
};

// others_concise_python manner
class Solution {  
public:
    vector<int> parents;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; ++i) parents.push_back(i);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j]) uni(i, j);
        vector<int> area(n, 0), malware(n, 0);
        for (int i = 0; i < n; ++i) area[find(i)]++;
        for (int i : initial) malware[find(i)]++;
        vector<int> res = {1, 0};
        for (int i : initial)
            res = min(res, {(malware[find(i)] == 1 ) * (-area[find(i)]), i});
        return res[1];
    }

    int find(int x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }
    void uni(int x, int y) {
        parents[find(x)] = find(y);
    }
};


# (I) DFS
// others_slightly diff setup
class Solution {  
public:
    int spread(vector<vector<int>>& g, int i, int idx) {
        int size = 0;
        if (g[i][i] == 1)
            for (auto j = 0; j < g.size(); ++j)
                if (g[i][j] == 1) g[i][j] = idx, size += 1 + spread(g, j, idx);
        return size;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int sizes[301] = {};
        for (auto idx : initial) {
            if (graph[idx][idx] == 1) sizes[idx] = spread(graph, idx, idx + 2);
            else sizes[graph[idx][idx] - 2] = sizes[idx] = 1;
        }
        return max_element(begin(sizes), end(sizes)) - begin(sizes);
    }
};

// indep_Connected Component
class Solution {
public:
    vector<int> cc, sz;
    
    void dfs(int root, int idx, vector<vector<int>>& graph) {
        // cout << root << "/" << idx << endl;
        cc[root] = idx, sz[idx]++;
        for (int i = 0; i < graph.size(); i++)
            if (graph[root][i] && cc[i] == -1) dfs(i, idx, graph);
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), m = initial.size(), idx = 0;
        cc.assign(n, -1);
        // find connected component
        for (int i = 0; i < n; i++) if (cc[i] == -1) {
            sz.push_back(0);
            dfs(i, idx++, graph);
        }
        // evaluate initially infected nodes
        int saved = 0, ans = INT_MAX, candi = INT_MAX;
        vector<vector<int>> infected(idx, vector<int>()); // ini ifcted nodes in each cc
        for (int src : initial) {
            candi = min(candi, src);
            infected[cc[src]].push_back(src);
        }
        // check each cc
        for (int i = 0; i < idx; i++) {
            if (infected[i].size() == 1 && saved <= sz[i]) {
                if (saved == sz[i]) ans = min(ans, infected[i][0]);
                else ans = infected[i][0], saved = sz[i];
                // cout << i << ", " << saved << ", " << ans << endl;
            }
        }
        return ans == INT_MAX ? candi : ans;
    }
};
