## Specification
An undirected, connected tree with N nodes labelled 0...N-1 and N-1 edges are given. The ith edge connects nodes edges[i][0] and edges[i][1] together. Return a list ans, where ans[i] is the sum of the distances between node i and all other nodes.

Example 1:
Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: Here is a diagram of the given tree:
  0
 / \
1   2
   /|\
  3 4 5
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on. 

Note: 1 <= N <= 10000



## Ideas
# (I) DFS/Count
     0
   /   \
  1     2
 /|    /|\
3 4   5 6 7
To count distances from, say node 1 to all other nodes, we can divide the counting into two parts. (i) It can be quite easy to derive the total distances from node 1 to all nodes in the tree rooted at 1. (ii) We can induce the other part given our knowledge of the distances from node 0 to all nodes in its right subtree. To derive the distances from node 1 to all these nodes, we only need to add 1 to the distance from node 0 to each node in the right subtree. Namely, we only need to add total number of nodes in node 0's right subtree (inclusive).

For imple, since the edges are for an undirected graph, when construct the graph, we shall add each of the two boundary to the other's adj list. And when doing in-tree counting and final counting, we shall maintain a set to record nodes that have been taken.

https://leetcode.com/problems/sum-of-distances-in-tree/discuss/130583/C%2B%2BJavaPython-Pre-order-and-Post-order-DFS-O(N)



## Code
# (I) DFS/Count
// others_concise
WAIT

// indep
class Solution {
public:
    vector<int> count, numnd, taken;
    vector<vector<int>> graph;
    
    // update count and numnd for root
    void dfs(int root) {
        if (graph[root].empty()) { count[root] = 0; return; }
        for (int child : graph[root]) if (!taken[child]) {
            taken[child] = 1; dfs(child);
            count[root] += count[child] + numnd[child];
            numnd[root] += numnd[child];
        }
    }
    
    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {
        if (N == 1) return { 0 };
        vector<int> res(N); graph.assign(N, vector<int>());
        count.assign(N, 0), numnd.assign(N, 1), taken.assign(N, 0);
        
        for (auto& edge : edges) { // construct tree
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        taken[0] = 1; dfs(0); // count in-subtree distance and # of children

        // count total distance
        queue<int> q; q.push(0);
        res[0] = count[0], taken.assign(N, 0);
        while (!q.empty()) {
            int cur = q.front(); q.pop(); taken[cur] = 1;
            for (int child : graph[cur]) if (!taken[child]) {
                int restTotal = count[cur] - count[child] - numnd[child];
                res[child] = count[child] = count[child] + restTotal + N - numnd[child];
                q.push(child);
            }
        }
        return res;
    }
};



## Testcases
17
[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[6,11],[6,12],[7,13],[7,14],[10,15],[10,16]]

2
[[0,1]]

5
[[3,1],[1,0],[0,2],[2,4]]


50
[[46,10],[0,8],[26,29],[16,26],[26,37],[45,25],[43,19],[38,33],[28,24],[30,21],[0,15],[27,41],[27,36],[31,26],[43,34],[25,49],[23,47],[25,26],[27,0],[32,10],[33,12],[1,8],[9,42],[19,36],[6,33],[5,20],[33,18],[3,29],[30,9],[21,36],[26,8],[33,47],[21,5],[36,13],[10,48],[47,39],[11,26],[17,44],[21,17],[47,36],[4,21],[14,31],[19,40],[15,35],[43,28],[6,22],[27,10],[20,7],[2,21]]
