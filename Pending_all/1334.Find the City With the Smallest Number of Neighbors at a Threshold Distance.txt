## Specification
There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold. Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number. Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

Example 1:
Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.

Example 2:
Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.

Constraints:
2 <= n <= 100
1 <= edges.length <= n * (n - 1) / 2
edges[i].length == 3
0 <= fromi < toi < n
1 <= weighti, distanceThreshold <= 10^4
All pairs (fromi, toi) are distinct.



## Testcases
4 [[0,1,3],[1,2,1],[1,3,4],[2,3,1]] 4

5 [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]] 2

https://leetcode.com/submissions/detail/303004475/testcase/



## Ideas
The key is to find shortest distance between every two vertices. Available algrs: Floyd, Dijkstra, SPFA, Bellman
# (IV) Summary
https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/493629/Java-Floyd-SPFA-Dijkstra-and-Bellman


# (III) Dijkstra (PQ + BFS)
https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/490283/Java-PriorityQueue-%2B-BFS

https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/500078/Java%3A-Readable-and-concise-Dijsktra-solution

# (II) FLoyd Warshall
One run of this algr updates dist between every two vertices as smallest. Essentially, each of the n vertices is treated as the joint and given a certain vertex being a joint, we update distance between every two vertices considering the joint.


# (I) DFS
Attempted to update based on initial distance. However, the initial distance between two vertices may not be necessarily be the smallest.




## Code
# (III) Dijkstra (PQ + BFS)



# (II) FLoyd Warshall
// derived_44ms_12.3MB
class Solution {
public:
    int n, t;
    vector<vector<int>> dist;
    
    void floyd() {
        for (int joint = 0; joint < n; joint++)
            for (int s = 0; s < n; s++) for (int t = 0; t < n; t++)
                if (dist[s][joint] != INT_MAX && dist[joint][t] != INT_MAX && dist[s][joint] + dist[joint][t] < dist[s][t])
                        dist[s][t] = dist[s][joint] + dist[joint][t];
    }
    
    int findTheCity(int n, vector<vector<int>>& edges, int t) {
        this->n = n, this->t = t, marked.assign(n, 0);
        dist.assign(n, vector<int>(n, INT_MAX)); // distance between city i and j
        // init
        for (int i = 0; i < n; i++) dist[i][i] = 0;
        for (auto edge : edges)
            dist[edge[0]][edge[1]] = dist[edge[1]][edge[0]] = edge[2];
        floyd(); // find min dist between every two vertices
        // find max city
        int min = INT_MAX, res = 0;
        for (int i = 0, cur = 0; i < n; i++, cur = 0) {
            for (int j = 0; j < n; j++)
                if (dist[i][j] <= t) cur++;
            if (min >= cur) min = cur, res = i;
        }
        return res;
    }
};

# (I) DFS
// indep_Wrong
class Solution {
public:
    int n, t;
    vector<int> marked;
    vector<vector<int>> dist;
    
    // find min distance from i to j (if less than t)
    // dist - current accumulated dist
    int findDist(int i, int j) {
        if (dist[i][j] != INT_MAX) return dist[i][j];
        if (marked[i]) return INT_MAX;
        
        marked[i] = 1;
        int res = INT_MAX;
        for (int k = 0; k < n; k++) if (dist[i][k] < t) {
            if (dist[k][j] != INT_MAX) { res = min(res, dist[i][k] + dist[k][j]); continue; }
            int d = findDist(k, j); // min dist from k to j
            if (d != INT_MAX) res = min(res, d + dist[i][k]);
        }
        marked[i] = 0;
        return dist[i][j] = res;
    }
    
    int findTheCity(int n, vector<vector<int>>& edges, int t) {
        this->n = n, this->t = t, marked.assign(n, 0);
        dist.assign(n, vector<int>(n + 1, INT_MAX)); // distance between city i and j
        // init
        for (int i = 0; i < n; i++) dist[i][n] = 0, dist[i][i] = 0;
        for (auto edge : edges)
            dist[edge[0]][edge[1]] = dist[edge[1]][edge[0]] = edge[2];
        // propagate
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (i != j && findDist(i, j) <= t) dist[i][n]++;
        // find max city
        int min = dist[0][n], res = 0;
        for (int i = 1; i < n; i++)
            if (min >= dist[i][n]) min = dist[i][n], res = i;
        return res;
    }
};
