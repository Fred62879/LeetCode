## Specification
Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing. In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j]. If there is no way to make arr1 strictly increasing, return -1.

Example 1:
Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].

Example 2:
Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].

Example 3:
Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.

Constraints:
1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i]



## Ideas
# (II) DFS/DP-top down
_(ii)_ LIS based
A different imple of LIS bottom up idea.


_(i)_ Normal DFS
The basic idea of dfs is that at each entry of arr1, we have at most two options. If this is larger than its previous element (or INT_MIN in case of arr1[0]), then we can marching without doing anything at index i. Or we can swap arr1[i] with a smaller element in arr2 which is still the ceiling of prev of arr1[i] given we can find such a element.

On the other hand, if arr1[i] is not larger than its previous element, then we must swap it with the ceiling of its prev in arr2. If we cannot find such ceiling, then we cannot make arr1[0:i] strictly increasing.

Note, these schemes covered all possibilities. To make the array increasing, switch with ceiling at each entry regardless of its relative value with prev ensure a increaseing array can be contributed if one exists. To keep going without swap at certain entries makes it possible to check the smallest # of swaps.

To decrease run time, we memorize the value for each index with its specified previous value. This can be done using a vector of unordered_map of an unordered_map of pairs.


// optimize_concise_148ms
https://leetcode.com/problems/make-array-strictly-increasing/discuss/379095/C%2B%2B-DFS-%2B-Memo

Mem cache is constructed in a different way. Make it possible to get rid of all kinds of map. Similar to dp mem. Space efficient. Also take into account the fact that each number in arr2 can only be used for one time. Incorporating such knowledge into imple also saves time.

// map_builtin hash_1124ms
https://leetcode.com/problems/make-array-strictly-increasing/discuss/377629/C%2B%2B-memo-with-maps

// others_python_mem trick
https://leetcode.com/problems/make-array-strictly-increasing/discuss/377531/O(n2-log(n))-solutionStarting-from-brute-force-improve-by-memoization

// unordered_map specified hash_628ms
https://leetcode.com/problems/make-array-strictly-increasing/discuss/377402/C%2B%2B-DFS-%2B-memo-based-on-Longest-Increasing-subsequence-solution-with-explanation


# (I) DP_bottom-up
// elegant dp construction
https://leetcode.com/problems/make-array-strictly-increasing/discuss/377599/C%2B%2B-20ms-solution

We maintain a 2D vector dp, where dp[i][j] record the last element when arr1[0:i] is sorted using j swaps. Classically, we can decrease space usage compressing the vector to have two rows between which we iterate over. (This imple is space and time efficient 20ms!!)

// naive dp_rely on LIS
https://leetcode.com/problems/make-array-strictly-increasing/discuss/377495/Java-dp-solution-%3A-A-simple-change-from-Longest-Increasing-Subsequence

Assume hook points bounding a portion of the array which is completely swapped and the bounding hook points are not changed. To do this, we have to insert INT_MIN to the very front and INT_MAX to the very end.


## Testcases
[1,5,3,6,7]
[1,3,2,4]

[1,5,3,6,7]
[4,3,1]

[1,5,3,6,7]
[1,6,3,3]

[5,16,19,2,1,12,7,14,5,16]
[6,17,4,3,6,13,4,3,18,17,16,7,14,1,16]



## Code
# (II) DFS/DP_top-down
_(ii)_ LIS based
// 3rd visit-indep_120ms
class Solution {
public:
    int n;
    vector<unordered_map<int, int>> mem;
    
    // min # of swaps to reorder arr1[i:] using arr2[k:]
    int solve(int prev, int i, int k, vector<int>& arr1, vector<int>& arr2) {
        if (i == n - 1) return 0;
        if (mem[i + 1].count(prev)) return mem[i + 1][prev];
        
        int res = INT_MAX;
        auto lo = upper_bound(arr2.begin() + k, arr2.end(), prev);
        for (int j = i + 1; j < n; j++) if (prev < arr1[j]) {
            auto hi = lower_bound(arr2.begin() + k, arr2.end(), arr1[j]);
            if (hi - lo >= j - i - 1) {
                int follow = solve(arr1[j], j, lo - arr2.begin() + j - i - 1, arr1, arr2);
                if (follow != INT_MAX) res = min(res, j - i - 1 + follow);
            }
        }
        return mem[i + 1][prev] = res;
    }
    
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        arr1.push_back(INT_MAX);
        n = arr1.size();
        sort(arr2.begin(), arr2.end());
        arr2.resize(unique(arr2.begin(), arr2.end()) - arr2.begin());
        mem.resize(n);
        
        int res = solve(INT_MIN, -1, 0, arr1, arr2);
        return res == INT_MAX ? -1 : res;
    }
};


_(i)_ pure top-down/dfs
// 2nd-indep_452ms
class Solution {
public:
    vector<unordered_map<int, int>> dp;
    
    // min # of swaps from i onward with previous element being prev
    int solve(int i, int prev, vector<int>& arr1, vector<int>& arr2) {
        if (i == arr1.size()) return 0;
        if (dp[i].count(prev)) return dp[i][prev];
        
        int nswp = INT_MAX, swp = INT_MAX;
        if (arr1[i] > prev)
            nswp = solve(i + 1, arr1[i], arr1, arr2);
        
        auto target = upper_bound(arr2.begin(), arr2.end(), prev);
        if (target != arr2.end() && (arr1[i] <= prev || *target < arr1[i]))
            swp = solve(i + 1, *target, arr1, arr2);
        
        return dp[i][prev] = swp == INT_MAX ? nswp : min(nswp, swp + 1);
    }
    
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(), arr2.end());
        dp.assign(arr1.size(), unordered_map<int, int>());
        int res = solve(0, INT_MIN, arr1, arr2);
        return res == INT_MAX ? -1 : res;
    }
};


// customerized hash
 **** WAIT ****

// derived
class Solution {
public:
    map<pair<int, int>, int> dp;
    
    // find min # of swaps to make arr1 from ith element onward increasing
    // with arr1[i] being strictly larger than prev
    int dfs(vector<int>& arr1, vector<int>& arr2, int i, int prev) {
        if (i == arr1.size()) return 0;
        pair<int, int> p = make_pair(i, prev);
        if (dp.count(p)) return dp[p];
        
        int res = INT_MAX;
        if (arr1[i] > prev) // do not switch
            res = min(res, dfs(arr1, arr2, i + 1, arr1[i]));
        
        auto ceil = upper_bound(arr2.begin(), arr2.end(), prev);
        if (ceil != arr2.end() && (arr1[i] <= prev || *ceil < arr1[i])) {
            
            int nxt = dfs(arr1, arr2, i + 1, *ceil);
            res = min(res, nxt != INT_MAX ? nxt + 1 : nxt);
        }
        return dp[p] = res;
    }
    
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(), arr2.end());
        int res = dfs(arr1, arr2, 0, -1);
        return res == INT_MAX ? -1 : res;
    }
};



# (I) DP_bottom-up
_(ii) Pure bottom up_
// optimizaton


// 3rd visit-indep_192ms_37.3MB_2D vector
class Solution {
public:
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        int n = arr1.size();
        sort(arr2.begin(), arr2.end());
        arr2.resize(std::unique(arr2.begin(), arr2.end()) - arr2.begin());
        // dp[i][j], arr1[i - 1] when arr1[0 : i - 1] are sorted using j swaps
        vector<vector<int>> dp(2, vector<int>(n + 1, INT_MAX));
        
        dp[0][0] = arr1[0]; dp[0][1] = arr2[0];
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= i + 1; j++) {
                int swap = INT_MAX, maintain = INT_MAX, previd = 1 - i % 2, curid = i % 2;
                if (i >= j && dp[previd][j] < arr1[i]) maintain = arr1[i];
                if (j) {
                    auto it = upper_bound(arr2.begin(), arr2.end(), dp[previd][j - 1]);
                    if (it != arr2.end()) swap = *it;
                }
                dp[curid][j] = min(swap, maintain);
            }
        }
        for (int i = 0, id = (n - 1) % 2; i <= n; i++)
            if (dp[id][i] != INT_MAX) return i;
        return -1;
    }
};

_(i) naive dp_rely on LIS
// 2nd visit-indep_108ms_8.9MB
class Solution {
public:
    // whether arr1(i:j) can be replaced by portion of arr2
    // with arr[i] and arr[j] being lo and hi bound
    int canReplace(int j, int i, vector<int>& narr1, vector<int>& narr2) {
        if (i == j + 1) return 1;
        auto lo = upper_bound(narr2.begin(), narr2.end(), narr1[j]);
        
        int max = narr2.end() - lo;
        if (max < i - j - 1) return 0;
        return *(lo + i - j - 2) < narr1[i];
    }
    
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        int n = arr1.size();
        sort(arr2.begin(), arr2.end());
        
        // remove duplicate in arr2
        vector<int> narr2{arr2[0]};
        for (int i = 1; i < arr2.size(); i++)
            if (narr2.back() != arr2[i])
                narr2.push_back(arr2[i]);

        // add tail and front to arr1
        vector<int> narr1(n + 2);
        for (int i = 0; i < n; i++)
            narr1[i + 1] = arr1[i];
        narr1[0] = INT_MIN, narr1[n + 1] = INT_MAX;
        
        // dp
        vector<int> dp(n + 2, INT_MAX); // dp[i], smallest# of swaps to make arr1[0:i) ascending wihtout swapping arr1[0] & arr1[i]
        dp[0] = 0;
        for (int i = 1; i < n + 2; i++)
            for (int j = 0; j < i; j++)
                if(dp[j] != INT_MAX && narr1[j] < narr1[i] && canReplace(j, i, narr1, narr2))
                    dp[i] = min(dp[i], dp[j] + i - j - 1);
        
        return dp[n + 1] == INT_MAX ? -1 : dp[n + 1];
    }
};
