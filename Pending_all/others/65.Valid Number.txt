## Specification
Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.


## Testcases
"  0e1" - true
" 0.e1  " - true
https://leetcode.com/problems/valid-number/discuss/23741/The-worst-problem-i-have-ever-met-in-this-oj



## Ideas
https://leetcode.windliang.cc/leetCode-65-Valid-Number.html#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%88%E5%9B%B0%E9%9A%BE%E9%9A%BE%E5%BA%A6%EF%BC%89 

# (III) DFA
https://leetcode.com/problems/valid-number/discuss/23725/C%2B%2B-My-thought-with-DFA
The asterisks denote repeat of nums on current state. Accidently, these four states (2,3,5,8) are the finally acceptable state.

0 —— +/- ——>  1 —— nums ——>  2* ——.——> 3*
\             /               \       /
 .           .                 e     e
  \         /                   \   / 
   ——> 7 <——                     \ /
	\                         v
	 ——> nums ——> 8* —— e ——> 4 —— nums ——> 5*
				  \            /
				  +/-        nums
				    \         /
				     ——> 6 ——>
				
# (II) Design
https://leetcode.com/problems/valid-number/discuss/23977/A-clean-design-solution-By-using-design-pattern


# (I) Naive
(ii) S can be traversed and checked according to certain RE such as "(\\+|-)?(\\d+(\\.\\d*)?|\\.\\d+)(e(\\+|-)?\\d+)?" or "-?(([1-9]{1}+\\d*|0)(\\.\\d+)?|\\.\\d+)(e-?[1-9]{1}+\\d*)?".

(i) We can also derive several conditions and evaluate the constriants under each condition. For instance, there must be numbers following e, there cannot exist more than one '+'/'-'/'e'/'.' etc.



## Code
# (III) DFA

# (II) Design
// others
interface NumberValidate { 
    boolean validate(String s);
}

// simple checking defined here
abstract class NumberValidateTemplate implements NumberValidate{

    public boolean validate(String s) {
        if (checkStringEmpty(s)) return false;
        s = checkAndProcessHeader(s);
        if (s.length() == 0) return false;
        return doValidate(s);
    }

    private boolean checkStringEmpty(String s) {
        if (s.equals("")) return true;
        return false;
    }

    private String checkAndProcessHeader(String value) {
        value = value.trim();
        if (value.startsWith("+") || value.startsWith("-")) 
            value = value.substring(1);
        return value;
    }
    protected abstract boolean doValidate(String s);
}

// int check
class IntegerValidate extends NumberValidateTemplate{

    protected boolean doValidate(String integer) {
        for (int i = 0; i < integer.length(); i++)
            if(Character.isDigit(integer.charAt(i)) == false)
                return false;
        return true;
    }
}

// scientific notion check
class SienceFormatValidate extends NumberValidateTemplate {

    protected boolean doValidate(String s) {
        s = s.toLowerCase();
        int pos = s.indexOf("e");
        if (pos == -1) return false;
        if (s.length() == 1) return false;

        String first = s.substring(0, pos);
        String second = s.substring(pos+1, s.length());
        if (validatePartBeforeE(first) == false || validatePartAfterE(second) == false)
            return false;
        return true;
    }

    private boolean validatePartBeforeE(String first) {
        if (first.equals("") == true) return false; 

        if (checkHeadAndEndForSpace(first) == false) return false;

        NumberValidate integerValidate = new IntegerValidate();
        NumberValidate floatValidate = new FloatValidate();
        if (integerValidate.validate(first) == false && floatValidate.validate(first) == false)
            return false;
        return true;
    }

    private boolean checkHeadAndEndForSpace(String part) {
        if (part.startsWith(" ") || part.endsWith(" "))
            return false;
        return true;
    }

    private boolean validatePartAfterE(String second) {
        if (second.equals("") == true) return false;
        if (checkHeadAndEndForSpace(second) == false) return false;
        NumberValidate integerValidate = new IntegerValidate();
        if (integerValidate.validate(second) == false) return false;
        return true;
    }
}
// decimal check
class FloatValidate extends NumberValidateTemplate{

    protected boolean doValidate(String floatVal) {
        int pos = floatVal.indexOf(".");
        if (pos == -1) return false;
        if (floatVal.length() == 1) return false;

        NumberValidate nv = new IntegerValidate();
        String first = floatVal.substring(0, pos);
        String second = floatVal.substring(pos + 1, floatVal.length());

        if (checkFirstPart(first) == true && checkFirstPart(second) == true) return true;
        return false;
    }

    private boolean checkFirstPart(String first) {
        if (first.equals("") == false && checkPart(first) == false) return false;
        return true;
    }

    private boolean checkPart(String part) {
        if (Character.isDigit(part.charAt(0)) == false ||
            Character.isDigit(part.charAt(part.length() - 1)) == false)
            return false;

        NumberValidate nv = new IntegerValidate();
        if (nv.validate(part) == false) return false;
        return true;
    }
}
// executer
class NumberValidator implements NumberValidate {

    private ArrayList<NumberValidate> validators = new ArrayList<NumberValidate>();

    public NumberValidator() {
        addValidators();
    }

    private void addValidators() {
        NumberValidate nv = new IntegerValidate();
        validators.add(nv);

        nv = new FloatValidate();
        validators.add(nv);

        // nv = new HexValidate();
        // validators.add(nv);

        nv = new SienceFormatValidate();
        validators.add(nv);
    }

    @Override
    public boolean validate(String s) {
        for (NumberValidate nv : validators)
            if (nv.validate(s) == true) return true;
        return false;
    }
}

class Solution {
    public boolean isNumber(String s) {
        NumberValidate nv = new NumberValidator(); 
        return nv.validate(s);
    }
}


# (I) Naive
// (ii) others_traverse
class Solution {
public:
    bool isNumber(string s) {
        int st = 0, n = s.size();
	// (1) leading spaces
        while (s[st] == ' ') st++;

        // (2) significands
        if (s[st] == '+' || s[st] == '-') st++;

	// (3) numbers & decimal points
        int num = 0, period = 0;
        for (; s[st] == '.' || (s[st] >= '0' && s[st] <= '9'); st++)
            s[st] == '.' ? period++ : num++;
        if (num < 1 || period > 1) return false;
        
	// (4) exponentials
        if (s[st] == 'e') {
            int numPoste = 0;
            if (s[++st] == '+' || s[st] == '-') st++;
            
            for (; s[st] >= '0' && s[st] <= '9'; st++, numPoste++);
            if (numPoste == 0) return false;
        }
        
	// (5) trailing spaces
        while (s[st] == ' ') st++;
        return st == n;
    }
};

// (i) derived_
class Solution {
public:
    bool isNumber(string s) {
        int n = s.size(), lo = 0, hi = n - 1;
        if (!n) return false;
        
        while (lo < hi && s[lo] == ' ') lo++;
        while (hi > lo && s[hi] == ' ') hi--;
        if (lo == hi && s[lo] == ' ') return false;
        
        int e = 0, period = 0, num = 0, numPoste = 0;
        for (int i = lo; i <= hi; i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                num = numPoste = 1;
            } else if (s[i] == 'e') {
                if (e || !num) return false;
                e = 1; numPoste = 0;
            } else if (s[i] == '.') {
                if (period || e) return false;
                period = 1;
            } else if (s[i] == '+' || s[i] == '-') {
                if (i != lo && s[i - 1] != 'e') return false;
                numPoste = 0;
            } else return false;
        }
        return num && numPoste;
    }
};
