## Specification
Similar: LT62, 70, 91, 509

A message containing letters from A-Z is being encoded to numbers using the following mapping way: 'A' -> 1; 'B' -> 2; ...; 'Z' -> 26. Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9. Given the encoded message containing digits and the character '*', return the total number of ways to decode it. Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".

Example 2:
Input: "1*"
Output: 9 + 9 = 18

Note:
The length of the input string will fit in range [1, 105]. The input string will only contain the character '*' and digits '0' - '9'.


## Testcases
"2*"
"**********1111111111"


## Idea

// 2nd
Concise. Ideas adapted from LT91. dp[i] records # of ways s[i:n] can be decoded

// 1st
    1   2   *   2   *   4   *   *
1   1   1
2       1   6
*           9   2
2               1   6
*                   9   2
4                       1   0
*                           9   15
*                               9


## Code
# (II) LookUp table
// others_48ms
class Solution {
public:
    int map[58][58];
    
    void fill(int a, int f) {
        for (int i = 0; i < 58; i++)
            map[a][i] = f;
    }
    
    int numDecodings(string s) {
        fill('*', 1);
        map['*']['*'] = 15;
        map['*']['0'] = 2;
        map['*']['1'] = 2;
        map['*']['2'] = 2;
        map['*']['3'] = 2;
        map['*']['4'] = 2;
        map['*']['5'] = 2;
        map['*']['6'] = 2;
        fill('1', 1);
        map['1']['*'] = 9;
        fill('2', 1);
        map['2']['*'] = 6;
        map['2']['7'] = 0;
        map['2']['8'] = 0;
        map['2']['9'] = 0;
        fill(0, 1);
        map[0]['*'] = 9;
        map[0]['0'] = 0;
        
        long cur = 1, pre = 0;
        char ch = 0, ch1 = '0';
        for (int i = s.size() - 1; i >= 0; i--)
            cur = (map[s[i]][ch1] * pre + map[0][(ch1 = s[i])] * (pre = cur)) % 1000000007;
        return (int) cur;
    }
};

# (I) DP_bottom-up
// 2nd visit_May-24-2019
// others_52ms
class Solution {
public:
    int ways(char c) {
        return c == '0' ? 0 : c == '*' ? 9 : 1;
    }
    
    int ways(char a, char b) {
        if (a == '*') return b == '*' ? 15 : b <= '6' ? 2 : 1;
        if (a == '1') return b == '*' ? 9 : 1;
        if (a == '2') return b == '*' ? 6 : b <= '6' ? 1 : 0;
        return 0;
    }
    
    int numDecodings(string s) {
        int64_t a = 1, b = ways(s[0]); // pp and p
        for (int i = 1; i < s.size(); i++) {
            int64_t c = ways(s[i]) * b + ways(s[i - 1], s[i]) * a;
            a = b;
            b = c % (int)(1e9 + 7);
        }
        return b;
    }
};

// indep_O(1) space_56ms
class Solution {
public:
    int numDecodings(string s) {
        if (s[0] == '0') return 0;
        int n = s.size(), q = 1e9+7;
        long p = 1, pp, cur;
        for (int i = n - 1; i >= 0; i--) {
            cur = s[i] == '0' ? 0 : ( (s[i] == '*' ? 9 : 1) * p % q ) % q;
            if (i == n - 1) { pp = p, p = cur; continue; }
            
            int fold = 0;
            if (s[i] == '*') fold = s[i+1] == '*' ? 15 : (s[i+1] < '7' ? 2 : 1);
            else if (s[i] == '1') fold = s[i+1] == '*' ? 9 : 1;
            else if (s[i] == '2') fold = s[i+1] == '*' ? 6 : (s[i+1] < '7' ? 1 : 0);
                
            cur = (cur +  fold * pp % q) % q;
            pp = p, p = cur;
        }
        return p;
    }
};

// O(N) space
class Solution {
public:
    int numDecodings(string s) {
        if (s[0] == '0') return 0;
        int n = s.size(), q = 1e9+7;
        // dp[i], # of ways s[i:n] can be decoded
        vector<long> dp(n + 1, 0);
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            dp[i] = s[i] == '0' ? 0 : ( (s[i] == '*' ? 9 : 1) * dp[i + 1] ) % q;
            if (i == n - 1) continue;
            
            int fold = 0;
            if (s[i] == '*') fold = s[i+1] == '*' ? 15 : (s[i+1] < '7' ? 2 : 1);
            else if (s[i] == '1') fold = s[i+1] == '*' ? 9 : 1;
            else if (s[i] == '2') fold = s[i+1] == '*' ? 6 : (s[i+1] < '7' ? 1 : 0);
                
            dp[i] = (dp[i] +  fold * dp[i + 2] % q) % q;
        }
        return dp[0];
    }
};

// indep_1st attempt
class Solution {
    public int numDecodings(String s) {
        int sl = s.length();
        long[] ref = new long[sl*2 - 1];
        char[] sc = s.toCharArray();
        long st = 1000000007;
        // construct reference array
        for (int i = 0; i < sl*2 - 1; i += 2) {
            ref[i] = sc[i/2] == '*' ? 9 : (sc[i/2] == '0' ? 0 : 1);
            if (i/2 + 1 == sl) break;
            // next is *: if cur is also *, then gives 15; otherwise if cur >2/=0, gives 0; o 9/6
            if (sc[i/2 + 1] == '*') 
                ref[i + 1] = sc[i/2] == '*' ? 15 : (sc[i/2] > '2' || sc[i/2] == '0' ? 0 : sc[i/2] == '1' ? 9 : 6);
            // next is #, cur is *: if next > 6, gives 1; else 2
            else if (sc[i/2] == '*') ref[i + 1] = sc[i/2 + 1] > '6' ? 1 : 2;
            // next is #, cur is #: if cur >2/=0 gives 0; oif cur = 1 OR next <= 6 gives 1; o 0
            else ref[i + 1] = sc[i/2] > '2' || sc[i/2] == '0' ? 0 : (sc[i/2] == '1' || sc[i/2 + 1] <= '6' ? 1 : 0);
        }
        // go thru ref
        for (int i = sl*2 - 4; i >= 0; i -= 2) {
            if (i + 1 + 3 < sl*2 - 1) ref[i + 1] = (ref[i + 1] * ref[i + 1 + 3]) % st;
            ref[i] = (ref[i] * ref[i + 2] + ref[i + 1]) % st;
        }
        return (int)ref[0];
    }
}
