## Specification
Similar: LT560, 304

Given a matrix, and a target, return the number of non-empty submatrices that sum to target. A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2. Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.

Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

Note:
1 <= matrix.length <= 300
1 <= matrix[0].length <= 300
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8



## Testcases
[[7,6,8,2,-1,0,3],[4,3,6,0,-1,-2,7]]
4



## Ideas
# (I) DP_HashMap
We can calculate the # of valid submatrices within each pair of r1-r2 where all rows will be used with only columns varying. Then, this problem can be boil down to find the number of subarrays sum up to a given target. 



## Code
# (I) DP_HashMap
// others_in place
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& A, int target) {
        int m = A.size(), n = A[0].size();
        for (int i = 0; i < m; i++)
            for (int j = 1; j < n; j++)
                A[i][j] += A[i][j - 1];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                unordered_map<int, int> counter;
                counter[0] = 1;
                int cur = 0;
                for (int k = 0; k < m; k++) {
                    cur += A[k][j] - (i > 0 ? A[k][i - 1] : 0);
                    res += counter[cur - target];
                    counter[cur]++;
                }
            }
        }
        return res;
    }
};

// derived
class Solution {
public:
    vector<vector<int>> sum;
    unordered_map<int, int> freq;
    int n, m;
    
    int count(int r1, int r2, int target) {
        freq.clear();
        int ans = 0;
        for (int col = 0, accu = 0; col < m; col++) {
            if (freq.count(accu)) freq[accu]++;
            else freq[accu] = 1;
            
            accu = ( sum[r2][col] - (r1 ? sum[r1 - 1][col] : 0) );
            if (freq.count(accu - target))
                ans += freq[accu - target];
        }
        return ans;
    }
    
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        n = matrix.size(), m = matrix[0].size();
        sum.assign(n, vector<int>(m, 0));
        sum[0][0] = matrix[0][0]; // sum from [0,0] to [i,j]
        
        for (int i = 1; i < n; i++) sum[i][0] = sum[i-1][0] + matrix[i][0];
        for (int j = 1; j < m; j++) sum[0][j] = sum[0][j-1] + matrix[0][j];
        for (int i = 1; i < n; i++)
            for (int j = 1; j < m; j++)
                sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + matrix[i][j];
        
        int ans = 0;
        for (int i = 0; i < n; i++) // row 1
            for (int j = i; j < n; j++) { // row 2
                ans += count(i, j, target);
                // cout << i << "/" << j << ": " << ans << endl;
            }
        return ans;
    }
};
