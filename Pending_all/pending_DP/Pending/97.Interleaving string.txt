## Specification
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false


## Code
#2nd visit Apr 13 2019, indep, 
// fill form
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();
        if (n1 + n2 != n3) return false;
        vector<int> possess(26, 0);
        for (char c : s1 + s2) possess[c -'a']++;
        for (char c : s3) if (possess[c -'a']-- < 0) return false;
        for (int i : possess) if (i != 0) return false;
        
        vector<vector<int>> dp(n1 + 1, vector<int>(n2 + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n1 && dp[i - 1][0] == 1; i++) if (s1[i - 1] == s3[i - 1]) dp[i][0] = 1;
        for (int j = 1; j <= n2 && dp[0][j - 1] == 1; j++) if (s2[j - 1] == s3[j - 1]) dp[0][j] = 1;
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                if (dp[i - 1][j] && s1[i - 1] == s3[i - 1 + j]) dp[i][j] = 1;
                if (!dp[i][j] && dp[i][j - 1] && s2[j - 1] == s3[j - 1 + i]) dp[i][j] = 1;
            }
        }
        return n1 == 0 && n2 == 0 || dp[n1][n2];
    }
};

// bottom up dp_slow
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();
        if (n1 + n2 != n3) return false;
        vector<int> possess(26, 0);
        for (char c : s1 + s2) possess[c -'a']++;
        for (char c : s3) if (possess[c -'a']-- < 0) return false;
        for (int i : possess) if (i != 0) return false;
        
        vector<vector<int>> dp(n3 + 1, vector<int>(n3 + 1, 0));
        dp[0][0] = 1;
        for (int len = 1; len <= n3; len++) {
            for (int i = max(0, len - n2), j = len - i; i <= min(len, n1) && j >= 0; i++, j--) {
                int cur = 0; // i-l1, j-l2
                if (j >= 1) cur = dp[i][j - 1] == 1 && s2[j - 1] == s3[len - 1] ? 1 : 0;
                if (cur == 0 && i >= 1) cur = dp[i - 1][j] == 1 && s1[i - 1] == s3[len - 1] ? 1 : 0;
                if (len == n3 && cur == 1) return true;
                dp[i][j] = cur;
            }
        }
        return n1 == 0 && n2 == 0;
        //return n1 == n2 == 0;
    }
};


# 1st attempt
// others, dp and mem_0ms
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
    	int n1 = s1.length(), n2 = s2.length();
    	if( n1 + n2 != s3.length() ) return false;
        return isInterleave(s1, 0, s2, 0, s3, new int[(n1+1)*(n2+1)]);
    }
    
    public boolean isInterleave(String s1, int p1, String s2, int p2, String s3, int[] memo) {
    	boolean r = false;
    	int key = p1*(s2.length()+1) + p2, p3 = p1 + p2;
    	if( memo[key] != 0 ) return memo[key] == 1;
    	if( p1 == s1.length()) r = s2.substring(p2).equals(s3.substring(p3));
    	else if( p2 == s2.length()) r = s1.substring(p1).equals(s3.substring(p3));
	else {
	    	char c1 = s1.charAt(p1), c2 = s2.charAt(p2), c = s3.charAt(p3);
	    	if( c == c1 && c == c2)
	    		r = isInterleave(s1, p1+1, s2, p2, s3, memo) ||
	    			isInterleave(s1, p1, s2, p2+1, s3, memo);
	   	else if( c == c1 ) r = isInterleave(s1, p1+1, s2, p2, s3, memo);
	    	else if( c == c2 ) r = isInterleave(s1, p1, s2, p2+1, s3, memo);
	}	
	memo[key] = r ? 1 : 2;
        return r;
    }
}

// derived_matrix
class Solution {
    
    public boolean isInterleave(String s1, String s2, String s3) {
        int a = s1.length(), b = s2.length(), c = s3.length();
        if (a + b != c) return false;
        boolean[][] solv = new boolean[a + 1][b + 1];
        solv[0][0] = true;
        for (int i = 1; i <= a; i++) {
            if (s3.charAt(i - 1) != s1.charAt(i - 1)) break;
            solv[i][0] = true;
        }
        for (int j = 1; j <= b; j++) {
            if (s3.charAt(j - 1) != s2.charAt(j - 1)) break;
            solv[0][j] = true;
        }
        for (int i = 1; i <= a; i++) {
            for (int j = 1; j <= b; j++) {
                if (solv[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1)) solv[i][j] = true;
                else if (solv[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) solv[i][j] = true;
            }
        }
        return solv[a][b];
    }
}

// indep
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int a = s1.length(), b = s2.length(), c = s3.length();
        if (a + b != c) return false;
        if (a == 0 && b == 0 && c == 0) return true;
        boolean fir = a > 0 && s1.charAt(0) == s3.charAt(0), sec = s2.length() > 0 && s2.charAt(0) == s3.charAt(0);
        
        if (fir && sec) return isInterleave(s1.substring(1), s2, s3.substring(1)) ||
                               isInterleave(s1, s2.substring(1), s3.substring(1));
        if (fir) return isInterleave(s1.substring(1), s2, s3.substring(1));
        if (a == 0) return s2.equals(s3);
        if (sec) return isInterleave(s1, s2.substring(1), s3.substring(1));
        if (b == 0) return s1.equals(s3);
        return false;
    }
}

class Solution {
    
    public boolean isInterleave(String s1, String s2, String s3) {
        int a = s1.length(), b = s2.length(), c = s3.length();
        if (a + b != c) return false;
        return solve(s1, s2, s3, 0, 0, 0, a, b, c);
    }
    
    public boolean solve(String s1, String s2, String s3, int aa, int bb, int cc, int a, int b, int c) {
        if (a - aa + b - bb != c - cc) return false;
        if (aa == a) return s2.substring(bb).equals(s3.substring(cc));
        if (bb == b) return s1.substring(aa).equals(s3.substring(cc));

        if (a == aa && b == bb && c == cc) return true;
        boolean fir = s1.charAt(aa) == s3.charAt(cc);
        boolean sec = s2.charAt(bb) == s3.charAt(cc);
        
	if (!fir && !sec) return false;
        if (fir && sec) return solve(s1, s2, s3, aa + 1, bb, cc + 1, a, b, c) ||
                               solve(s1, s2, s3, aa, bb + 1, cc + 1, a, b, c);
        if (fir) return solve(s1, s2, s3, aa + 1, bb, cc + 1, a, b, c);
        if (sec) return solve(s1, s2, s3, aa, bb + 1, cc + 1, a, b, c);
        return false;
    }
}
