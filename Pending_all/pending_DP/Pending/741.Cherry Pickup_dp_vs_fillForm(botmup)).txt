**** Specification ****
In a N x N grid representing a field of cherries, each cell is one of three possible
integers.
0 means the cell is empty, so you can pass through;
1 means the cell contains a cherry, that you can pick up and pass through;
-1 means the cell contains a thorn that blocks your way.
Your task is to collect maximum number of cherries possible by following the rules
below:

Starting at the position (0, 0) and reaching (N-1, N-1) by moving right or down 
through valid path cells (cells with value 0 or 1); After reaching (N-1, N-1), 
returning to (0, 0) by moving left or up through valid path cells; When passing
through a path cell containing a cherry, you pick it up and the cell becomes an empty
cell (0); If there is no valid path between (0, 0) and (N-1, N-1), then no cherries
can be collected. 

Example 1:
Input: grid =
[[0, 1, -1],
 [1, 0, -1],
 [1, 1,  1]]
Output: 5
Explanation: 
The player started at (0, 0) and went down, down, right right to reach (2, 2).
4 cherries were picked up during this single trip, and the matrix becomes 
[[0,1,-1],[0,0,-1],[0,0,0]]. Then, the player went left, up, up, left to return home, 
picking up one more cherry. The total number of cherries picked up is 5, and this is 
the maximum possible.

Note:
grid is an N by N 2D array, with 1 <= N <= 50.
Each grid[i][j] is an integer in the set {-1, 0, 1}.
It is guaranteed that grid[0][0] and grid[N-1][N-1] are not -1.
 

**** Testcases ****
[[1,1,-1],[1,-1,1],[-1,1,1]]
[[0,1,-1],[1,0,-1],[1,1,1]]
[[1,-1,-1,-1,-1],[1,0,1,-1,-1],[0,-1,1,0,1],[1,0,1,1,0],[-1,-1,-1,1,1]]

[[0,0,1,0,0,1,0,1,1,-1,0,0,-1,-1,0,1,1,-1,0,-1],[1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0],[1,0,1,1,0,0,1,0,0,0,1,0,1,1,1,-1,0,1,1,0],[0,1,1,0,0,0,1,0,1,1,0,-1,1,0,0,1,0,0,1,1],[-1,0,-1,1,0,0,1,1,0,0,1,1,0,-1,1,0,0,0,1,1],[0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0],[0,0,0,1,0,1,1,0,0,1,1,-1,1,0,1,1,0,1,1,0],[0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1],[0,0,0,-1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0],[1,0,1,1,1,0,0,1,1,0,1,0,0,0,-1,0,-1,0,1,0],[0,1,-1,1,1,1,1,0,1,0,0,1,1,0,-1,1,0,0,-1,0],[0,0,0,0,1,0,1,0,0,-1,0,1,0,-1,0,0,1,0,1,1],[1,-1,-1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0],[-1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0],[0,1,-1,1,1,1,0,0,1,-1,1,1,0,1,0,1,0,-1,1,0],[1,-1,1,0,1,1,1,0,0,0,1,1,1,1,-1,0,0,1,0,-1],[-1,1,0,0,0,1,1,1,1,1,0,1,1,-1,0,1,0,0,1,0],[0,0,0,-1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1],[0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1],[0,0,0,1,-1,0,-1,1,0,1,0,0,0,0,1,0,0,1,-1,0]]

[[1,-1,1,1,1,1,1,1,-1,1],
 [1,1,1,1,-1,-1,1,1,1,1],
 [-1,1,1,-1,1,1,1,1,1,1],
 [1,1,-1,1,-1,1,1,1,1,1],
 [-1,1,1,1,1,1,1,1,1,1],
 [-1,-1,1,1,1,-1,1,1,-1,1],
 [1,1,1,1,1,1,1,-1,1,1],
 [1,1,1,1,-1,1,-1,-1,1,1],
 [1,-1,1,-1,-1,1,1,-1,1,-1],
 [-1,1,-1,1,-1,1,1,1,1,1]]

[[1,-1,1,1,1,1,1,1,-1,1],[1,1,1,1,-1,-1,1,1,1,1],[-1,1,1,-1,1,1,1,1,1,1],    
 [1,1,-1,1,-1,1,1,1,1,1],[-1,1,1,1,1,1,1,1,1,1],[-1,-1,1,1,1,-1,1,1,-1,1],  
 [1,1,1,1,1,1,1,-1,1,1],[1,1,1,1,-1,1,-1,-1,1,1],[1,-1,1,-1,-1,1,1,-1,1,-1],
 [-1,1,-1,1,-1,1,1,1,1,1]]


**** Ideas ****
(3)


(2)

    
    /*                 level 0                  0,0
                             1              1,0     0,1
       0  1  2  3  4  5      2          2,0(0)  1,1(1)  0,2(2)
    0  1  0  1  0  0 -1      3      3,0(0)  2,1(1)  1,2(2)  0,3(3)
    1  0  1  1 -1  0 -1      4  4,0     3,1     2,2     1,3     0,4
    2  1  0  1  1  1  0      5      4,1     3,2     2,3     1,4     0,5
    3 -1 -1  1  0 -1  1      6          4,2     3,3     2,4     1,5
    4 -1  0  1  1  1  0      7              4,3     3,4     2,5
                             8                  4,4     3,5
                             9                      4,5
                             
For instance, at level 3, we are currently at evaluating dp[3][0][0]. This is the same
as we are evaluating the largest possible accumulate pick aftering picking at Loc 0 & 3
on level 3. This requires us to go thru the four possibilities that Loc 0 & 3 on Level 3
are reached from Level 2. 


(1)     
    /*                 level 0                  0,0
                             1              1,0     0,1
       0  1  2  3  4  5      2          2,0(0)  1,1(1)  0,2(2)
    0  1  0  1  0  0 -1      3      3,0(0)  2,1(1)  1,2(2)  0,3(3)
    1  0  1  1 -1  0 -1      4  4,0     3,1     2,2     1,3     0,4
    2  1  0  1  1  1  0      5      4,1     3,2     2,3     1,4     0,5
    3 -1 -1  1  0 -1  1      6          4,2     3,3     2,4     1,5
    4 -1  0  1  1  1  0      7              4,3     3,4     2,5
                             8                  4,4     3,5
                             9                      4,5
                             
We are going thru each level. At each level, we generate a new reference matrix (via
'ref = res') manipulating elements of ref for last level. Elements of such matrix is 
the accumulated value thus far.
For instance, at level 2, ref is 3x3:
       0  1  2
    0  a  c         
    1  b            
    2               

a is the cur val if both two picks on level 2 occur at location 0 (2,0). If one pick
occur at Loc 0 while the other at Loc 1 (1,1), then b/c is val after pick at 1/0. If 
grid[1][1]/[2][0] == -1, then a = b = c = -1. Especially for b and c, as they represent
the complement value when pick occur simultaneously at Loc 0 & 1, even if only one 
grid value is -1, they still both be -1.
                    
On level 3, we evaluate all possible combinations of two picks (00,01,02; 11,12;...)
on level 2. For instance, if two picks on level 2 occur at Loc 0 & 1. Then we first 
need to decide Loc on level 3 that can respectively be reached from these two picks.

It turns out Loc_0_Lev_2 -> Loc_0/1_Lev_3; Loc_1_Lev_2 -> Loc 1/2_Lev_3. Based on such
correspondence, we update reference matrix temporarily as res in 'update()'. pa here
is grid[2][0], pb is grid[1][1]; ast = 0, aed = 1; bst = 1; bed = 2.

Notably, since grid[3][0] (Loc_0_Lev_3) = -1, none of the two picks at Level 3 can 
involve Loc 0. Therefore, res[0][1](&[1][0]) and res[0][2](&[2][0]) are both left 
as -1 for level 3. (Two complement value, e.g. res[i][j] & res[j][i] would both = -1
if either tends to be).
    
When updating the vals, there are four possibilities:
        0               0               0   1               0   1
     0     1         0               0         2              1


**** Code ****
// ** 2nd visit ** Mar 23 2019
class Solution {
    
    int[][] dp;
    int n, m;
    
    // largest collected given two picks occurring at cur[0] & cur[1]
    public int solve(int[][] grid, int[] cur, int cl) {
        int ax = cur[0], a = cl-ax + ax*m, bx = cur[1], b = cl-bx + bx*m;
        if (dp[a][b] != -1) return dp[a][b];
        int val = grid[ax][cl-ax] + (ax == bx ? 0 : grid[bx][cl-bx]), mx = -1; cl++;
        if (a == m * n - 1) { dp[a][b] = val; return val; }
        
        for (int i = ax; i <= Math.min(ax+1, n-1); i++) {
            if (cl-i >= m || grid[i][cl-i] == -1) continue;
            for (int j = bx; j <= Math.min(bx+1, n-1); j++) {
                if (j > i || cl-j >= m || grid[j][cl-j] == -1) continue;
                mx = Math.max(mx, solve(grid, new int[]{i, j}, cl));
            }
        }
        if (mx == -1) dp[a][b] = -2;
        else dp[a][b] = val + mx;
        return dp[a][b];
    }
    
    public int cherryPickup(int[][] grid) {
        if (grid.length == 0) return 0;
        n = grid.length; m = grid[0].length; dp = new int[n*m][n*m];
        for (int i = 0; i < n*m; i++) Arrays.fill(dp[i], -1);
        int a = solve(grid, new int[]{0, 0}, 0);
        return a == -2 ? 0 : a;
    }
}

// ? hashmap fail
class Solution {
    
    HashMap<Integer, Integer>[] cache;
    int n, m;
    
    // largest collected given two picks occurring at cur[0] & cur[1]
    public int solve(int[][] grid, int[] cur, int cl) {
        int ax = cur[0], a = cl-ax + ax*m, bx = cur[1], b = cl-bx + bx*m;
	if (a > b) return -2;
        if (cache[a].containsKey(b)) return cache[a].get(b);
        int val = grid[ax][cl-ax] + (ax == bx ? 0 : grid[bx][cl-bx]), mx = -1; cl++;
        if (a == m * n - 1) { cache[a].put(b, val); return val; }
        for (int i = ax; i <= Math.min(ax+1, n-1); i++)
            for (int j = bx; j <= Math.min(bx+1, n-1); j++)
                if (cl-i < m && grid[i][cl-i] != -1 && cl-j < m && grid[j][cl-j] != -1)
                    mx = Math.max(mx, solve(grid, new int[]{i, j}, cl));
        if (mx == -1) cache[a].put(b, -2);
        else cache[a].put(b, val + mx);
        return cache[a].get(b);
    }
    
    public int cherryPickup(int[][] grid) {
        if (grid.length == 0) return 0;
        n = grid.length; m = grid[0].length;
        cache = new HashMap[n*m];
        Arrays.fill(cache, new HashMap<Integer, Integer>());
        int a = solve(grid, new int[]{0, 0}, 0);
        return a == -2 ? 0 : a;
    }
}

// others
public int cherryPickup(int[][] grid) {
    int N = grid.length, M = (N << 1) - 1;
    int[][] dp = new int[N][N];
    dp[0][0] = grid[0][0];
	    
    for (int n = 1; n < M; n++) {
		for (int i = N - 1; i >= 0; i--) {
			for (int p = N - 1; p >= 0; p--) {
				int j = n - i, q = n - p;
                
				if (j < 0 || j >= N || q < 0 || q >= N || grid[i][j] < 0 || grid[p][q] < 0) {
                    dp[i][p] = -1;
                    continue;
                 }
		 
				 if (i > 0) dp[i][p] = Math.max(dp[i][p], dp[i - 1][p]);
				 if (p > 0) dp[i][p] = Math.max(dp[i][p], dp[i][p - 1]);
				 if (i > 0 && p > 0) dp[i][p] = Math.max(dp[i][p], dp[i - 1][p - 1]);
		 
				 if (dp[i][p] >= 0) dp[i][p] += grid[i][j] + (i != p ? grid[p][q] : 0)
             }
		 }
    }
    
    return Math.max(dp[N - 1][N - 1], 0);
}

// ** 1st **
// derived
class Solution {
    
    public int cherryPickup(int[][] grid) {
        if (grid.length == 0 || grid[0][0] == -1) return 0;
        int r = grid.length, c = grid[0].length;
        // dp[r1][c1][r2] stores largest ans given two picks at [r1,c1] & [r2,c2]
        int[][][] dp = new int[r][c][r];
        for (int i = 0; i < r; i++) for (int j = 0; j < c; j++) Arrays.fill(dp[i][j], Integer.MIN_VALUE);
        dp[0][0][0] = grid[0][0];
        for (int r1 = 0; r1 < r; r1++) {
            for (int c1 = 0; c1 < c; c1++) { // pick1 at [r1,c1]
                if (grid[r1][c1] == -1 || (r1 == 0 && c1 == 0)) continue;
                for (int r2 = r1; r2 <= Math.min(r - 1, r1 + c1); r2++) { // pick2 at [r2,c2]
                    int c2 = r1 + c1 - r2, tmp = Integer.MIN_VALUE;
                    if (grid[r2][c2] == -1) continue;
                    if (r1 > 0) {
                        tmp = Math.max(tmp, dp[r1 - 1][c1][r2]); // a down, b right
                        if (r2 > 0) tmp = Math.max(tmp, dp[r1 - 1][c1][r2 - 1]); // a down, b down
                    }
                    if (c1 > 0) {
                        tmp = Math.max(tmp, dp[r1][c1 - 1][r2]); // a right, b right
                        if (r2 > 0) tmp = Math.max(tmp, dp[r1][c1 - 1][r2 - 1]); // a right, b down
                    }
                    dp[r1][c1][r2] = grid[r1][c1] + (r1 == r2 ? 0 : grid[r2][c2]) + tmp;
                }
            }
        }
        return Math.max(0, dp[r-1][c-1][r-1]);
    }
}


// indep
class Solution {

    // upper triangle of ref stores accumulative # of cherries picked up so far,
    // e.g. ref[0][1] stores that if two picks on curLevel occurs at 0 & 1
    int[][] res, grid, ref; 
    int[] len;
    
    // find locaiton of curLev accessible from given Loc on preLevel
    private int[] nextLev(int preLevel, int a) {
        int[] res = new int[2]; res[0] = a; res[1] = a + 1;
        if (len[preLevel] < len[preLevel + 1]) return res;
        res[1] = res[0]; res[0]--;
        if (a == 0) res[0] = res[1];
        else if (len[preLevel] > len[preLevel + 1] && a == len[preLevel] - 1) res[1] = res[0];
        return res;
    }
    
    /* update res and return max accumulated val after checking all permutations of pa & pb
     * val stored in upper triangle of ref
     * pa/b is Loc of elements in prev Level
     * a/b is Loc accessible on curLevel from pa/b
     * curMax accumulated val for currrent level
     **/
    public int update(int pa, int pb, int curLev, int[] a, int[] b, int curMax) {
        if (ref[pa][pb] == -1) return curMax;
	// row ID of first element of curLev                          
        int curR = curLev <= grid.length - 1 ? curLev : grid.length - 1;
        for (int i = a[0]; i <= a[1]; i++) {
            int ra = curR - i, ca = curLev - ra;
            if (grid[ra][ca] == -1) continue;
            for (int j = b[0]; j <= b[1]; j++) {
                int rb = curR - j, cb = curLev - rb;
                if (grid[rb][cb] == -1 || i > j) continue; // blocked or evaluated before
                if (i != j) res[i][j] = Math.max(res[i][j], ref[pa][pb] + grid[ra][ca] + grid[rb][cb]);
                else res[i][j] = Math.max(res[i][j], ref[pa][pb] + grid[ra][ca]);
                curMax = Math.max(curMax, res[i][j]);
            }
        }
        return curMax;
    }
    
    public int cherryPickup(int[][] grid) {
        if (grid.length == 0 || grid[0][0] == -1) return 0;
        int r = grid.length, c = grid[0].length, lg = r; // lg is length of longest level
        ref = new int[1][1]; len = new int[r + c - 1]; this.grid = grid; ref[0][0] = grid[0][0];
        //int[] test = new int[];
        
        // determine # of elements on each level
        for (int i = 0; i < lg; i++) { len[i] = i + 1; len[r + c - 2 - i] = i + 1; }
        for (int i = lg; i < r + c - 1 -lg; i++) len[i] = lg;
        
        // go thru each level
        for (int lev = 1, curMax = -1; lev < r + c - 1; lev++, curMax = -1) {
	    // update this, and update ref use this
            res = new int[len[lev]][len[lev]];
            for (int i = 0; i < res.length; i++) Arrays.fill(res[i], -1);
	    // evaluate permutation of prev level based on ref
            for (int a = 0; a < len[lev - 1]; a++)
                for (int b = a; b < len[lev - 1]; b++)
                    curMax = update(a, b, lev, nextLev(lev - 1, a), nextLev(lev - 1, b), curMax);
            //test[lev] = curMax;
            if (curMax == -1) return 0;
            ref = res;
        }
        return ref[0][0];
    }
}
