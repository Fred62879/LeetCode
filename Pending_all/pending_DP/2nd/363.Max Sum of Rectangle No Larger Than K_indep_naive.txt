## Specification

Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2 
Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).

Note: The rectangle inside the matrix must have an area > 0. What if the number of rows is much larger than the number of columns?






## Ideas
# (III) Merge Sort_optimize_generalize
https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/83611/Merge-sort-beat-100-python-submissions


# (II) Cumulative sum

// cpp_set optimize
https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/363968/C%2B%2B-20-ms-99-solution


// cpp_set
https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/83601/C%2B%2B-46ms-solutionbeats-99.78


// java_treeset_generalize
This version generalize to both larger row relative to column and the reverse

https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/83597/Java-Binary-Search-solution-time-complexity-min(mn)2*max(mn)*log(max(mn))


// java_treeset
https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/83631/using-cumulative-sum-and-TreeSet


// python bi_sect
https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/discuss/111842/Python-1200ms-binary-search-using-bisect



# (I) Naive

The resulting rect must be a block defined by [sr...tr][sc...tc], e.g.
[[1,0,2,-1,3],
 [4,2,-3,1,0],
 [2,1,4,2,-3]]
8

we first check rects that terminate at last row. Under this, we serially
check rect that start from row 2,1,0. For rect start from row 2, update
cur is the same as initialize it. As for row 1, we perform column-wise
addition, i.e. 4+2, 2+1, -3+4, 1+2, 0+(-3). Then we check rect terminates
at each column



## Code

# (III) TreeSet



# (II) Cumulative sum


# (I) naive 
class Solution {
    public int maxSumSubmatrix(int[][] m, int k) {
        int r = m.length, c = m[0].length, max = Integer.MIN_VALUE;
        for (int tr = r - 1; tr >= 0; tr--) {
            int[] cur = new int[c]; // cur[j] = m[tr][j] + ... + m[sr][j]
            for (int sr = tr; sr >= 0; sr--) {
                // evaluate rect starts at row sr and terminates at row tr
                for (int j = c - 1; j >= 0; j--) cur[j] += m[sr][j]; // update
                int[] col = Arrays.copyOf(cur, cur.length); // deep copy

		// column check
                for (int j = c - 2; j >= 0; j--) col[j] += col[j + 1];
                for (int tc = c - 1; tc >= 0; tc--) {
                    int offset = tc == c - 1 ? 0 : cur[tc + 1];
                    // evaluate rect terminate at col tc starts at col sc
                    // col[j] = col[sc] + ... + col[tc] - realized by
		    // minusing offset
                    for (int sc = tc; sc >= 0; sc--) {
                        int area = col[sc] -= offset;
                        if (area == k) return k;
                        if (area > max && area < k) max = Math.max(area, max);
                    }
                }
                
            }
        }
        return max;
    }
}
