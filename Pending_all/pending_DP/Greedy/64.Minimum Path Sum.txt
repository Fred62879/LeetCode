**** Specification ****
Given a m x n grid filled with non-negative numbers, find a path
from top left to bottom right which minimizes the sum of all 
numbers along its path. Note: You can only move either down or 
right at any point in time.

Example:
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1¡ú3¡ú1¡ú1¡ú1 minimizes the sum.


**** Code ****
// others
class Solution {
    public int minPathSum(int[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        int infi = Integer.MAX_VALUE;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (j - 1 < 0 && i - 1 < 0) continue;
                int a = i - 1 >= 0 ? grid[i - 1][j] : infi;
                int b = j - 1 >= 0 ? grid[i][j - 1] : infi;
                grid[i][j] += Math.min(a, b);
            }
        }
        return grid[r - 1][c - 1];
    }
}


// 2nd visit_others - Feb 3 2019
class Solution {
    public int minPathSum(int[][] grid) {
        
        for(int i=1; i<grid.length; i++) {
            grid[i][0] = grid[i-1][0] + grid[i][0];
        }
        for(int j=1; j<grid[0].length; j++) {
            grid[0][j] = grid[0][j-1] + grid[0][j];
        }
        for(int i=1; i<grid.length; i++) {
            for(int j=1; j<grid[0].length; j++) {
                grid[i][j] = Math.min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}