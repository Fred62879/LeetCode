## Specification
You are given K eggs, and you have access to a building with N floors from 1 to N. Each egg is identical in function, and if an egg breaks, you cannot drop it again. You know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break. Each move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with 1 <= X <= N). Your goal is to know with certainty what the value of F is. What is the minimum number of moves that you need to know with certainty what F is, regardless of the initial value of F?

Example 1:
Input: K = 1, N = 2
Output: 2
Explanation: 
Drop the egg from floor 1.  If it breaks, we know with certainty that F = 0.
Otherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.
If it didn't break, then we know with certainty F = 2.
Hence, we needed 2 moves in the worst case to know what F is with certainty.

Example 2:
Input: K = 2, N = 6
Output: 3

Example 3:
Input: K = 3, N = 14
Output: 4

Note:
1 <= K <= 100
1 <= N <= 10000



## Code
# (II) DP_bottom-up
//


// indep_O(N^3)_TLE
class Solution {
public:
    int superEggDrop(int K, int N) {
        // dp[i][j], min # of moves given i eggs to test j floors
        vector<vector<int>> dp(K + 1, vector<int>(N + 1, INT_MAX));
        for (int j = 1; j <= N; j++) dp[1][j] = j;
        for (int i = 1; i <= K; i++) { dp[i][1] = 1; if (N >= 2) dp[i][2] = 2; }
        
        for (int i = 2; i <= K; i++) { // i eggs totally
            for (int j = 3; j <= N; j++) { // j levels totally
                for (int k = j - 1; k >= 2; k--) { // first drop at level k
                    dp[i][j] = min(dp[i][j], 1 + max( dp[i-1][k-1], dp[i][j-k] ));
                }
            }
        }
        /*
        for (int i = 1; i <= K; i++) {
            for (int j = 1; j <= N; j++)
                cout << dp[i][j] << " ";
            cout<< endl;
        }
        */
        return dp[K][N];
    }
};


# (I) Math
// indep_5ms 100%
class Solution {
    public int superEggDrop(int k, int n) {
        if (k == 1) return n;
        int exp = 2, e = 0, a = k - 1, st = 0, col = 0;
        // more eggs than needed for binary search
        while (exp <= n) { e++; exp *= 2; }
        if (k >= e + 1) return e + 1;
        
        int[] ref = new int[k];
        ref[0] = 1;
        for (int i = 1; i < k; i++) ref[i] = 2 * ref[i - 1] + 1;
        // if least (1, 3, 7, 15, ...) is greater than n
        if (ref[a] > n) {
            while(a >= 1 && ref[a - 1] >= n) a--;
            return a + 1;            
        }
        // otherwise
        while (col <= n) {
            if (ref[k - 1] >= n) return col + k;
            ref[0] = ++col + 1;
            for (int i = 1; i < k; i++) ref[i] = ref[i] + ref[i - 1] + 1;
        }
        return 0;
    }
}

// TLE
class Solution {
    public int superEggDrop(int k, int n) {
        if (k == 1) return n;
        int exp = 1, e = 0;
        while (exp * 2 <= n) e++;
        if (k >= e) return e + 1;
        
        int[] ref = new int[n];
        for (int i = 0; i < n; i++) ref[i] = i + 1;
        for (int i = 1; i < k; i++) {
            int prev = 1, hold;
            for (int j = 1; j < n; j++) {
                hold = ref[j];
                ref[j] = prev + ref[j - 1] + 1;
                prev = hold;
            }
        }
        return ref[n - 1];
    }
}



## Ideas
# (II) DP



# (I) Math
// indep
Tests   Levels
eggs    1   2   3   4   5   6   7   8   9   10    11    12    13    14     15     16     17     18     19     20     21     22     23     24     25
   1    1   2   3   4   5   6   7   8   9   10    11    12    13    14     15     16     17     18     19     20     21     22     23     24     25

   2    1   2   2   3   3   3   4   4   4    4     5     5     5     5      5      6      6      6      6      6      6      7      7      7      7
               1,1         2,3              3,6                            4,10                                      5,15
   3    1   2   2   3   3   3   3   4   4    4     4     4     4     4      5      5      5      5      5      5      5      5      5      5      5
               1,1             3,3                                  6,7                                                                         10,14
   4    1   2   2   3   3   3   3   4   4    4     4     4     4     4      4      5      5      5      5      5      5      5      5      5      5
               1,1             3,3                                         7,7

Levels  Tests  
eggs    1    2      3      4      5       6
   1    1    2      3      4      5       6
   2    1  1,1,1  2,3,1  3,6,1  4,10,1  5,15,1
   3...

0  1(0)        2(1)        3(2)                          
1      3(0)        6(1)        10(2)
2          7(0)        14(1)        25(2)
3             15(0)        30(1)        56(2)  
4                 31(0)        62(1)        119(2)
5
6
7
8
