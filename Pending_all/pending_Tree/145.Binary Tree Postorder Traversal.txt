## Specification
Given a binary tree, return the postorder traversal of its nodes' values.



## Testcases
[1,2,3,4,5,null,null,null,null,6,7,8,9]



## Ideas
# (X) Summary
https://leetcode.com/problems/binary-tree-postorder-traversal/discuss/45551/Preorder-Inorder-and-Postorder-Iteratively-Summarization

# (III) Morris traversal


# (II) Iterative
Stack records nodes on the left arm. Prev denotes the just added node which is the right child of certain node 

# (I) Reverse Pre-order




## Code
# (III) Morris traversal


# (II) Iterative
// others
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if (root == nullptr) return {};
        vector<int> res;
        stack<TreeNode*> stk;
        TreeNode* prev = NULL;
        while (root || !stk.empty()) {
            if (root) {
                stk.push(root), root = root->left;
            } else {
                auto cur = stk.top();
                if (cur->right && cur->right != prev) {
                    root = cur->right;
                } else {
                    res.push_back(cur->val);
                    prev = cur;
                    stk.pop();
                }
            }
        }
        return res;
    }
};

# (I) Reverse Pre-order
// derived
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> stk;
        stk.push(root);
        while (!stk.empty()) {
            auto cur = stk.top(), stk.pop();
            if (cur == nullptr) break;
            
            res.push_back(cur->val);
            if (cur->left != nullptr) stk.push(cur->left);
            if (cur->right != nullptr) stk.push(cur->right);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
