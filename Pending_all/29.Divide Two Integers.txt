## Specification
Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator. Return the quotient after dividing dividend by divisor. The integer division should truncate toward zero.

Example 1:
Input: dividend = 10, divisor = 3
Output: 3

Example 2:
Input: dividend = 7, divisor = -3
Output: -2

Note:
Both dividend and divisor will be 32-bit signed integers.
The divisor will never be 0.

Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.



## Testcases
-2147483648
2

2147483648
2

1
-1




## Ideas
// Summary
https://leetcode.com/problems/divide-two-integers/discuss/13524/Summary-of-3-C%2B%2B-solutions

# (III) Naive
// others
https://leetcode.com/problems/divide-two-integers/discuss/13402/Fast-and-simple-Python-solutions-(56ms-64ms).-No-Bitwise-Operators.


# (II) Log based
https://leetcode.com/problems/divide-two-integers/discuss/13524/Summary-of-3-C%2B%2B-solutions


# (I) Bit
// modified
https://leetcode.com/problems/divide-two-integers/discuss/349025/C%2B%2B-4-ms-followed-all-rules

// compiler change cause crash
https://leetcode.com/problems/divide-two-integers/discuss/142849/C%2B%2BJavaPython-Should-Not-Use-%22long%22-Int


## Code
# (III) Log based
//


# (II) Bit shift
// derived_4ms_8.2MB
class Solution {
public:
    int divide(int A, int B) {
        if (A == B) return 1;
        if (B == 1) return A;
        // corner case
        int boost = 0;
        if (B == INT_MIN) return 0;
        if (A == INT_MIN) {
            if (B == -1) return INT_MAX;
            A++, boost = 1;
        }
        // normal case
        unsigned int a = abs(A), b = abs(B), res = 0, i;
        a += boost;
        while(b <= a) {
            int i = 0;
            while(i <= 29 && a >= (b << (i + 1))) i++;
            res += (1 << i);
            a -= (b << i);
        }
        return A > 0 == B > 0 ? res : -res;
    }
};


# (I) Naive
// optimized_4ms_8.2MB
**** WAIT ****
class Solution {
public:
    int divide(int A, int B) {
        if (A == INT_MIN && B == -1) return INT_MAX;
        long a = labs(A), b = labs(B), left = a, div = b, Q = 1, ans = 0;
        while(left >= b) {
            left -= div, ans += Q, div += div, Q += Q;
            if (left < div)
                div = b, Q = 1;
        }
        return (A > 0) == (B > 0) ? (int)ans : (int)-ans;
    }
};

// derived_8ms_8.3MB
class Solution {
public:
    int divide(int A, int B) {
        if (A == INT_MIN && B == -1) return INT_MAX;
        long a = labs(A), b = labs(B), product = 0, brun = b, incre = 1, res = 0;
        while(a >= b) {
            if (product + brun <= a) {
                product += brun, brun = brun + brun;
                res += incre, incre = incre + incre;
            } else {
                brun = b, incre = 1;
                if (product + brun > a) break;
            }
        }
        cout << res;
        return (A > 0) == (B > 0) ? (int)res : (int)-res;
    }
};


// indep
class Solution {
public:
    int divide(int A, int B) {
        if (A == B) return 1;
        if (B == 1) return A;
        // corner case
        int boost = 0;
        if (B == INT_MIN) return 0;
        if (A == INT_MIN) {
            if (B == -1) return INT_MAX;
            A++, boost = 1;
        }
        // normal case
        int a = abs(A), b = abs(B), res = 0, i;
        while(b < a) {
            for (i = 0; a >= (b << i); i++);
            res += (1 << i);
            a -= (b << i);
        }
        return res;
    }
};

class Solution {
public:
    int solve(long pdd, long pdr) {
        long res = 0, product = pdr;
        while(product <= pdd) {
            res++;
            if (INT_MAX - pdr < product) break;
            product += pdr;
        }
        return (int)res;
    }
    
    int divide(int dividend, int divisor) {
        if (divisor == 1) return dividend;
        if (dividend == INT_MIN && divisor == -1) return INT_MAX;
        
        // cout << INT_MIN << " " << dividend;
        int res = solve((long)abs(dividend), (long)abs(divisor));
        if (dividend > 0) return divisor > 0 ? res : -res;
        else return divisor > 0 ? -res : res;
    }
};
