## Specification
Given a binary tree, we install cameras on the nodes of the tree. Each camera at a node can monitor its parent, itself, and its immediate children. Calculate the minimum number of cameras needed to monitor all nodes of the tree. 

Example 1:
Input: [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.

Example 2:
Input: [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.

Note:
The number of nodes in the given tree will be in the range [1, 1000].
Every node has value 0.


## Testcases
[0,0,0,0,0,null,0,0,null,0,0,null,null,0,0,null,null,null,0,0,0]
[0,0,null,0,null,0,null,null,0]

## Ideas
(2) Greedy_others
https://leetcode.com/problems/binary-tree-cameras/discuss/211180/JavaC%2B%2BPython-Greedy-DFS
Cover leaf parent which is always better than covering leavea and then abandon all nodes monitored.

(1) Greedy_indep
For each subroot, we evaluate the min number of cameras needed to monitor all its children. Three possibilities exist for the condition of this current subroot. (a) It has a camera and it is therefore monitored. (b) It does not have a camera but we require it to be monitored only by its children. (c) It does not have a camera and we require it not to be monitored by children. 

Given access to the min cameras needed under each of the three conditions when the current root's left and right children are subroots on their own, we can evaluate the two and generate the three-condition min camera for the current root. When returning to the original root, the min number needed is simply the min of (a) & (b)


## Code
# DFS_others_improved idea
class Solution {
public:
    int ans = 0;
    
    // cam - 1; not monitored - 0; monitored no cam - 2;
    int dfs(TreeNode* root) {
        if (!root) return 2;
        int lft = dfs(root->left), rt = dfs(root->right);
        if (lft == 0 || rt == 0) { ans++; return 1; }
        if (lft == 1 || rt == 1) return 2; // *** IMPROVED HERE ***
        return 0;
    }
    
    int minCameraCover(TreeNode* root) {
        int a = dfs(root);
        return ans + (a == 0 ? 1 : 0);
    }
};

# DFS_greedy_others_similar idea
// cpp
class Solution {
public:
    int ans = 0;
    
    // cam - 1; not monitored - 0; monitored no cam - 2;
    int dfs(TreeNode* root) {
        if (!root) return 2;
        int lft = dfs(root->left), rt = dfs(root->right);
        if (lft == 0 || rt == 0) { ans++; return 1; }
        if (lft == 2 && rt == 2) return 0; // *** IMPROVABLE ***
        else return 2;
    }
    
    int minCameraCover(TreeNode* root) {
        int a = dfs(root);
        return ans + (a == 1 ? 1 : 0);
    }
};

// java
class Solution {
    private int NOT_MONITORED = 0;
    private int MONITORED_NOCAM = 1;
    private int MONITORED_WITHCAM = 2;
    private int cameras = 0;
	
    public int minCameraCover(TreeNode root) {
        if (root == null) return 0;
        int top = dfs(root);
        return cameras + (top == NOT_MONITORED ? 1 : 0);
    }
    
    // given min# of cameras allocated for root's children, return root condition
    private int dfs(TreeNode root) {
        if (root == null) return MONITORED_NOCAM;
        int left = dfs(root.left);
        int right = dfs(root.right);
        if (left == MONITORED_NOCAM && right == MONITORED_NOCAM) {
            return NOT_MONITORED;
        } else if (left == NOT_MONITORED || right == NOT_MONITORED) {
            cameras++;
            return MONITORED_WITHCAM;
        } else {
            return MONITORED_NOCAM;
        }
    }
}

# DFS_greedy_indep
class Solution {
    private int min(int[] array) {
        int minv = Integer.MAX_VALUE;
        for (int i : array)
            if (minv > i) minv = i;
        return minv;
    }
    
    public int[] solve(TreeNode subroot) {
        if (subroot == null) return new int[1];
        int[] res = new int[3], lft = new int[1], rt = new int[1];
        if (subroot.left != null) lft = solve(subroot.left);
        if (subroot.right != null) rt = solve(subroot.right);
        if (lft.length == 3) {
            if (rt.length == 3) {    // (I) left & right child
                // (i) camera presents in subroot
                res[0] = min(lft) + min(rt) + 1;
                // (ii) camera not in subroot which need to be monitored
                int a = lft[0] + Math.min(rt[0], rt[1]);
                int b = lft[1] == Integer.MAX_VALUE ? Integer.MAX_VALUE: rt[0] + lft[1];
                res[1] = Math.min(a, b);
                // (iii) camera not in subroot which need not to be monitored
                res[2] = lft[1] == Integer.MAX_VALUE || rt[1] == Integer.MAX_VALUE ? 
                    Integer.MAX_VALUE : lft[1] + rt[1];
            } else {                 // (II) no righht child
                int c = min(lft);
                res[0] = c == Integer.MAX_VALUE ? Integer.MAX_VALUE : (c + 1);
                res[1] = lft[0]; // lft child should have camear
                res[2] = lft[1]; // lft child should have no camear but monitored
            }
        } else if (rt.length == 3) { // (III) no left child
            res[0] = min(rt) + 1; res[1] = rt[0]; res[2] = rt[1];
        } else                       // (IV) no child
            return new int[]{1, Integer.MAX_VALUE, 0};
        return res;
    }
    
    public int minCameraCover(TreeNode root) {
        int[] camera = solve(root);
        return Math.min(camera[0], camera[1]);
    }
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
}

// for cpp learning

