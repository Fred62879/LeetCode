


## Code

//
class Solution {
public:
    char par[2] {'(', ')'};
    vector<string> res;
    
    // 
    void dfs(int st, int prev, int n, string& s) {
        if (st == n) ;
        // process right parenthesis
        for (int i = 0, ct = 0; i < n; i++) {
            if (s[i] == par[0]) ct++;
            else if (s[i] == par[1]) ct--;
            if (ct >= 0) continue;
            for (int j = prev; j < n; j++) {
                if (s[j] == par[1] && (j > 0 && s[j - 1] != par[1])) {
                    string cur = s.substr(st, j - st + 1) + s.substr(j + 1, n - j);
                    dfs(j + 1, j + 1, n, cur);
                }
            }
        }
        // process left parenthesis
        
    }
    
    vector<string> removeInvalidParentheses(string s) {
        dfs(0, 0, s, );
        return res;
    }
};
