class Solution {    
public:
    int overlap(string a, string b) {
        int ans = 0, ovlp = 0, n = a.size(), m = b.size();
        for (int i = 0, j = 0; i < n && j < m; i++) {
            if (a[i] != b[j]) { i -= j; j = 0; ovlp = 0; }
            else if (j == m - 1) {ans = max(ans, ovlp + 1); ovlp = 0; j = 0; }
            else { ovlp++; j++; }
        }
        ans = max(ans, ovlp);
        return ans == m ? -1 : ans;
    }
    
    string shortestSuperstring(vector<string>& A) {
        int n = A.size(), m = 1 << n;
        // calculate pair-wise distance
        vector<vector<int>> dist(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++) 
                if (i != j) dist[i][j] = overlap(A[i], A[j]);
        
        vector<vector<string>> dp(m, vector<string>(n)); // dp[i][j] path i terminate at j
        for (int i = 0; i < n; i++) dp[1 << i][i] += A[i];
        // bottom-up DP
        for (int path = 1; path < m; path++) {
            for (int node = 0; node < n; node++) {
                if ((path >> node) & 1 == 0) continue;
                
                for (int tail = 0; tail < n; tail++) {
                    if (node == tail || (((path >> tail) & 1 == 0)) continue;
                    int ppath = path^(1 << node);
                    if (ppath == 0) break;
                    string s = dp[ppath][tail] + A[node].substr(dist[tail][node]);
                    if (dp[path][node].empty() || dp[path][node].size() > s.size())
                        dp[path][node] = s;
                }
            }
        }
        string res = dp[m - 1][0];
        cout << dp[5][2] << ", " << dp[5][0] << ", " << dp[6][2] << ", " << dp[6][0];
        for (int i = 1; i < n; i++)
            if (res.size() > dp[m - 1][i].size()) res = dp[m - 1][i];
        return res;
    }
};


string shortestSuperstring(vector<string>& A) {
        int n = A.size();
        
        vector<vector<int>> overlaps(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int m = min(A[i].size(), A[j].size());
                for (int k = m; k >= 0; --k) {
                    if (A[i].substr(A[i].size() - k) == A[j].substr(0, k)) {
                        overlaps[i][j] = k;
                        break;
                    }
                }
            }
        }
  
        // dp[mask][i] = most overlap with mask, ending with ith element (ith 也包含在了mask里面)
        vector<vector<int>> dp(1<<n, vector<int>(n, 0));
        vector<vector<int>> parent(1<<n, vector<int>(n, -1));
        
        for (int mask = 0; mask < (1<<n); ++mask) {
            //以下循环是为了计算dp[mask][bit]
            for (int bit = 0; bit < n; ++bit) {
                if (((mask>>bit)&1) > 0) {//说明bit位在mask里面，此时dp[mask][bit]才有意义
                    int pmask = mask^(1<<bit);//这一步是为了把bit位从mask里面去掉
                    if (pmask == 0) continue;//如果mask里面只有一个词，那么跳过
                    for (int i = 0; i < n; ++i) {
                        if (((pmask>>i)&1) > 0) {//如果pmask里面包含了第i位，那么计算以i结尾的pmask，再接上bit位
                            int val = dp[pmask][i] + overlaps[i][bit];
                            if (val > dp[mask][bit]) {//如果新算出来的overlap比较大，那么替换原有overlap
                                dp[mask][bit] = val;
                                parent[mask][bit] = i;//保存这种情况下以bit结尾的前一个词。
                            }
                        }
                    }
                }
            }
        }
        
        vector<int> perm;
        vector<bool> seen(n);
        int mask = (1<<n) - 1;
        
        int p = 0;//先计算出答案的最后一个单词
        for (int i = 0; i < n; ++i) {
            if (dp[(1<<n) - 1][i] > dp[(1<<n) - 1][p]) {
                p = i;
            }
        }
        
        //通过parent数组依次回溯出最后一个单词是p这种情况下，前面所有的排列
        while (p != -1) {
            perm.push_back(p);
            seen[p] = true;
            int p2 = parent[mask][p];
            mask ^= (1<<p);//从mask里面移走p
            p = p2;
        }
        
        //由于回溯出来的是反的，倒一下
        reverse(perm.begin(), perm.end());
        
        //加上没有出现的单词
        for (int i = 0; i < n; ++i) {
            if (!seen[i]) {
                perm.push_back(i);
            }
        }
        
        string ans = A[perm[0]];
        for (int i = 1; i < n; ++i) {
            int overlap = overlaps[perm[i - 1]][perm[i]];
            ans += A[perm[i]].substr(overlap);
        }
        
        return ans;
        
    }

///
class Solution {    
public:
    int overlap(string a, string b) {
        int ans = 0, ovlp = 0, n = a.size(), m = b.size();
        for (int i = 0, j = 0; i < n && j < m; i++) {
            if (a[i] != b[j]) { i -= j; j = 0; ovlp = 0; }
            else if (j == m - 1) {ans = max(ans, ovlp + 1); ovlp = 0; j = 0; }
            else { ovlp++; j++; }
        }
        ans = max(ans, ovlp);
        return ans == m ? -1 : ans;
    }
    
    string shortestSuperstring(vector<string>& A) {
        int n = A.size(), m = 1 << n;
        // calculate pair-wise distance
        vector<vector<int>> dist(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++) 
                if (i != j) dist[i][j] = overlap(A[i], A[j]);
        
        // dp[i][j], max total overlap for path i starting from j
        vector<vector<int>> dp(m, vector<int>(n, -1));
        vector<vector<int>> successor(m, vector<int>(n, -1));
        for (int i = 0; i < n; i++) dp[1 << i][i] = 0;
        
        // bottom-up DP
        int st = 0, mxTotal = -1;
        for (int path = 1; path < m; path++) {
            for (int node = 0; node < n; node++) {
                if (((path >> node) & 1) == 0) continue;
                int ppath = path^(1 << node);
                if (ppath == 0) break;
                // append node before head
                for (int head = 0; head < n; head++) {
                    if (((ppath >> head) & 1) == 0) continue;
                    int prevOvlp = dp[path][node];
                    int curOvlp = dp[ppath][head] + dist[node][head];
                    if (prevOvlp < curOvlp) { 
                        dp[path][node] = curOvlp;
                        successor[m - 1][node] = head;
                        if (path == m - 1 && mxTotal < curOvlp) {
                            mxTotal = curOvlp; st = node;
                        }
                    }
                }
            }
        }
        int a = successor[m - 1][st], b = successor[m - 1][a], c = successor[m - 1][b], d = successor[m - 1][c];
        int e = successor[m - 1][d];
        cout << st << ", " << a << ", " << b << ", " << c << ", " << d << ", " << e;
        /*
        // trace and generate ans string
        string res = A[st];
        int trace = 1 << st;
        while (trace != m - 1) {
            int next = parent[trace][st], ovlp = dist[st][next];
            if (ovlp != -1) res += A[next].substr(ovlp, A[next].size());
            trace |= (1 << next); st = next;
            cout << trace << ", " << next;
        }
        // return res;
        */
        return "";
    }
};

