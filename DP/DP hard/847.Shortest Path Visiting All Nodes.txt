## Specification
Similar: LT943
An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph. graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected. Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges. 

Example 1:
Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:
Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]

Note:
1 <= graph.length <= 12
0 <= graph[i].length < graph.length


## Testcases
[[]]
[[],[],[]] // not in this case


## Ideas
(4) DP_top-down/DFS_mem
https://leetcode.com/problems/shortest-path-visiting-all-nodes/discuss/135842/19ms-Java-DFS-%2B-memo-solution-with-brief-comments


(3) Greedy/DFS_pruning_no_mem
https://leetcode.com/problems/shortest-path-visiting-all-nodes/discuss/232402/Solution-using-a-greedy-approach

cur[]: current route
visited[]: visit times of each node, in current route
count: how many nodes are visited

In each dfs function call, visit all the nodes which has the least visit times. When the count is equal to graph.size(), update the optimum result. And make a pruning when cur.size() >= result, it need not to continue dfs, just exit this funtion.


(2) BFS


(1) DP_bottom-up. 
The idea is to record the current tree as binary (nodes visited has entry 1). For each adjacent node of current root, we add the adj as the new root of the cur tree and obtain the number needed for tree rooted at adj. We terminate until tree rooted at every i has been grown to span the all nodes.

Differing from LT943, since not every node here is linked with others, the top-down method can only be done iteratively.


## Code
# (4) DP_top-down/DFS_mem
// derived
class Solution {
public:
    int n, m;
    vector<vector<int>> dp, visited;
    
public:
    // min steps visiting all nodes starting from tail given path already covered
    int dfs(int path, int tail, vector<vector<int>>& graph) {
        if (path == m - 1) return 0;
        if (dp[path][tail] != -1) return dp[path][tail];
        int cur = INT_MAX;
        for (int nxt : graph[tail]) {
            int npath = path | (1 << nxt);
            if (visited[npath][nxt]) continue;
            visited[npath][nxt] = 1;
            int grow = dfs(npath, nxt, graph);
            if (grow != -1) cur = min(cur, grow + 1);
            visited[npath][nxt] = 0;
        }
        if (cur == INT_MAX) return -1;
        dp[path][tail] = cur;
        return cur;
    }
    
    int shortestPathLength(vector<vector<int>>& graph) {
        n = graph.size(); m = 1 << n;
        dp.assign(m, vector<int>(n, -1));
        visited.assign(m, vector<int>(n, 0));
        
        int ans = INT_MAX;
        for (int i = 0; i < n; i++)
            ans = min(ans, dfs(1 << i, i, graph));
        return ans;
    }
};

# (3) Greedy/DFS_pruning_no mem
// Greedy
class Solution {
    int ans = Integer.MAX_VALUE;
    public int shortestPathLength(int[][] graph) {
        if (graph == null) throw new NullPointerException();
        HashMap<Integer, PriorityQueue<int[]>> map = buildMap(graph);
        int start = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < graph.length; i++) {
            min = Math.min(min, graph[i].length);
        }
        for (int i = 0; i < graph.length; i++) {
            if (graph[i].length == min) {
                HashSet<Integer> visited = new HashSet<>();
                dfs(map, i, 0, visited);
            }
        }
        return ans;
    }
    
    private HashMap<Integer, PriorityQueue<int[]>> buildMap(int[][] graph) {
        HashMap<Integer, PriorityQueue<int[]>> map = new HashMap<>();
        for (int i = 0; i < graph.length; i++) {
            PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b) -> a[1] - b[1]);
            for (int neigh: graph[i]) {
                pq.add(new int[]{neigh, graph[neigh].length});
            }
            map.put(i, pq);
        }
        return map;
    }
    
    private int dfs(HashMap<Integer, PriorityQueue<int[]>> map, int u, int hops, HashSet<Integer> visited) {
        visited.add(u);
        if (visited.size() == map.size()) ans = Math.min(ans, hops); 
        PriorityQueue<int[]> pq = new PriorityQueue<>(map.get(u));
        while (!pq.isEmpty()) {
            int[] v = pq.remove();
            if (!visited.contains(v[0]))
                hops = dfs(map, v[0], hops + 1, visited);
        }
        return hops + 1;
    }
}

// DFS greedy pruning
class Solution {
public:
    int result;
    void dfs(vector<vector<int>>& graph, vector<int>& cur, vector<int>& visited, int count) {
        if (result == graph.size()) return;
        if (count == graph.size()) {
            result = min(result, int(cur.size()));
            return;
        }
        if (cur.size() >= result) return;
        int pos = cur.back();
        
        int minv = INT_MAX;
        for (auto n : graph[pos]) minv = min(minv, visited[n]);
        for (auto n : graph[pos]) { // ** GREEDY **
            if (visited[n] == minv) {
                cur.push_back(n);
                if (!visited[n]) count++;
                visited[n]++;
                dfs(graph, cur, visited, count);
                visited[n]--;
                if (!visited[n]) count--;
                cur.pop_back();                
            }
        }
    }
    
    int shortestPathLength(vector<vector<int>>& graph) {
        result = INT_MAX;
        vector<int> cur;
        vector<int> visited(graph.size(), 0);
        int count = 0;
        for (int i = 0; i < graph.size(); i++) {
            cur.push_back(i);
            visited[i]++;
            count++;
            dfs(graph, cur, visited, count);
            count--;
            visited[i]--;
            cur.pop_back();
        }
        return result - 1;
    }
};

# (2) BFS
// others
concise python
https://leetcode.com/problems/shortest-path-visiting-all-nodes/discuss/147123/Python-8-lines-Heapq-and-BFS-and-Deque-solutions

// others use pair instead of vector
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int ans = 0, n = graph.size(), ts = 1 << n;
        if (n == 0) return 0;
        vector<vector<int>> visited(ts, vector<int>(n, 0));
        queue<pair<int,int>> cache;
        for (int i = 0; i < n; i++) {
            visited[1 << i][i] = 1;
            cache.push(make_pair(1 << i, i));
        }
        // BFS
        while (!cache.empty()) {
            ans++;
            int csz = cache.size(); // **** use size instead of creat a new one
            for (int i = 0; i < csz; i++) {
                pair<int, int> cur = cache.front(); cache.pop();
                int tree = cur.first, root = cur.second;
                
                for (int adj : graph[root]) {
                    int ntree = tree | 1 << adj;
                    if (ntree == ts - 1) return ans;
                    if (visited[ntree][adj]) continue;
                    cache.push(make_pair(ntree, adj));
                    visited[ntree][adj] = 1;
                }
            }
        }
        return 0;
    }
};

// indep
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int ans = 0, n = graph.size(), ts = 1 << n;
        if (n == 0) return 0;
        // cache[x][0/1], binary format tree/starting node
        vector<vector<int>> cache, visited(ts, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            visited[1 << i][i] = 1;
            cache.push_back({1 << i, i});
        }
        int ntree;
        while (!cache.empty()) {
            ans++;
            vector<vector<int>> ncache;
            for (vector<int> cur : cache) {
                for (int adj : graph[cur[1]]) {
                    ntree = cur[0] | 1 << adj;
                    if (ntree == ts - 1) return ans;
                    if (visited[ntree][adj]) continue;
                    ncache.push_back({ntree, adj});
                    visited[ntree][adj] = 1;
                }
            }
            cache = ncache;
        }
        return ntree == ts - 1 ? ans : 0;
    }
};

# (1) DP_bottom-up_others
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size(), ts = 1 << n;
        // dp[i][j] min len to travel thru tree j starting from i
        vector<vector<int>> dp(n, vector<int>(ts, INT_MAX));
        for (int i = 0; i < n; i++) dp[i][1 << i] = 0;
        int done = 0, ans = INT_MAX;
        while (!done) {
            done = 1;
            for (int i = 0; i < n; i++) {
                for (int t = 1; t < ts; t++) {
                    if (dp[i][t] == INT_MAX) continue; // path not exist or not yet visited
                    for (int adj : graph[i]) {    // append adj as root to tree p
                        int ntree = (t | 1 << adj);
                        dp[adj][ntree] = min(dp[adj][ntree], dp[i][t] + 1);
                        if (ntree == ts - 1) ans = min(ans, dp[adj][ntree]);
                    }
                }
                if (dp[i][ts - 1] == INT_MAX) done = 0;
                else ans = min(ans, dp[i][ts - 1]);
            }
        }
        return ans;
    }
};
