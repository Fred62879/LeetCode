**** Ideas ****

    This problem can be converted to finding the longest ascending subsequence out of a 
    sequence of ints. The original array is first sorted such that we only care about 
    the heights and only one of the evlps with same widths will be selected (same width,
    descending order, therefore, to select an ascending subsequence, only one of them 
    will be included)
    
    e.g. Find the longest ascending sequence out of:
    6, 37, 20, 15, 8, 50, 13, 24, 7, 8, 10, 12, 30, 7, 6, 1

         @                                                                                                       @
    6   37 ->   6    ^20    37  -> 6    ^15   20   37   ->   6  ^8   15   20   37   ->   6   8   15   20   37   ^50
    1  1+1      1    1+1     1     1    1+1    2    1        1  1+1   2    2    1        1   2    2    2    1   2+1
    ______________________________________________________________
                          
    6  8  ^13  15  20  37  50 -> 6  8  13  15  20  ^24  37  50
    1  2  2+1   2   2   1   3    1  2   3   2   2  3+1   1   3

    Val below each element is the length of longest ascending sequence stop at it.

    We should notice that once an element is added, val it implies will not change 
    throughout. e.g. after adding 20, it constantly entails 2. Therefore, only newly
    added values has the potential to bring about updates on the value of  max.

    This implies that once a value is added, we can ignore it somehow and only 
    concentrate on new values, especially we need to find the largest length of ascending
    sequence stop at each element before where the new one should be inserted.

 
len|1        2                                  3                       4
   |6 -> 6 ^37 -> 6 37 -> 6 20 -> 6 15 -> 6 8 ^50 -> 6 8 50 -> 6 8 13 ^24 -> 6 8 13 24
add|                20      15       8                   13                  7


NOTE: Arrays.binarySearch() returns index of the search key, if it is contained in the array;
      otherwise, (-(insertion point) ¨C 1). The insertion point is defined as the point at 
      which the key would be inserted into the array: the index of the first element greater 
      than the key, or a.length if all elements in the array are less than the specified key. 
      This guarantees that the return value will be >= 0 if and only if the key is found.


**** Code ****
class Solution {

    public int maxEnvelopes(int[][] e) {
        if (e.length == 0) return 0;
        Arrays.sort(e, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) return b[1] - a[1];
                return a[0] - b[0];
            }
        });
        int len = 0;
        int[] ref = new int[e.length];
        for (int[] evlp : e) {
            int cur = Arrays.binarySearch(ref, 0, len, evlp[1]);
            if (cur < 0) cur = -(cur + 1);
            ref[cur] = evlp[1];
            if (cur == len) len++;
        }
        return len;
    }

    // own idea
    public int maxEnvelopes(int[][] evlps) {
        if (evlps.length == 0) return 0;
        int len = 1, cur = 0;
        Arrays.sort(evlps, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) return b[1] - a[1];
                return a[0] - b[0];
            }
        });
        int[] ascd = new int[evlps.length];
        ascd[0] = evlps[0][1];
        for (int[] evlp : evlps) {
            if (ascd[cur] < evlp[1]) { 
                ascd[++cur] = evlp[1];
                len = Math.max(cur+1, len);
            } else if (ascd[cur] == evlp[1]) continue;
            else {
                int insert = Arrays.binarySearch(ascd, 0, len-1, evlp[1]);
                if (insert < 0) insert = -(insert + 1);
                ascd[insert] = evlp[1];
                len = Math.max(len, insert+1);
            }
        }
        return len;
    }

    // own idea, fail to implement in an efficient way
    public int maxEnvelopes(int[][] e) {
        if (e.length == 0) return 0;
        Arrays.sort(e, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) return b[1] - a[1];
                return a[0] - b[0];
            }
        });
        int len = 0;
        int[] ref = new int[e.length];
        for (int[] evlp : e) {
            
        }
        return len;
    }
}