// others
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null || prices.length<=1) return 0;
        int len = prices.length;
        if (k>len/2){ // simple case
            int res = 0;
            for (int i=1; i<len; ++i){
                if(prices[i] > prices[i-1])
                    res += prices[i] - prices[i-1];
            }
            return res;
        }
        int[] hold = new int[k+1];
        int[] sold = new int[k+1];
        Arrays.fill(hold, Integer.MIN_VALUE);
        for(int price : prices) {
            for(int j=1; j<=k; j++) {
                hold[j] = Math.max(hold[j], sold[j-1]-price); // hold->hold, sold->hold
                sold[j] = Math.max(sold[j], hold[j]+price); // sold->sold, hold->sold
            }
        }
        return sold[k];
    }
}

// semi-self
class Solution {
    public int maxProfit(int k, int[] prices) {
        int pl = prices.length;
        if(k >= pl/2) {      //// Same as k is infinite
            int nothing = 0, share = Integer.MIN_VALUE;
            for(int i = 0; i < pl; i++) {
                int tmp = nothing;
                nothing = Math.max(nothing, share + prices[i]);
                share = Math.max(share, tmp - prices[i]);
            }
            return nothing;
        }
        int[] b = new int[k + 1], s = new int[k + 1];
        Arrays.fill(b, Integer.MIN_VALUE);
        for (int i = 0; i < prices.length; i++) {  // #day
            for (int j = k; j >= 1; j--) {         // #transaction
                // before this step, s[j] is profit of trans j at day i - 1
                s[j] = Math.max(s[j], b[j] + prices[i]); 
                // before this, b[j] is profit s1b2 at day j - 1
                b[j] = Math.max(b[j], s[j - 1] - prices[i]);
            }
        }
        
        /*
        s3 = Math.max(s3, b3 + prices[j]);
        b3 = Math.max(b3, s2 - prices[j]);
        s2 = Math.max(s2, b2 + prices[j]);
        b2 = Math.max(b2, s1 - prices[j]);
        s1 = Math.max(s1, b1 + prices[j]);
        b1 = Math.max(b1, s0 - prices[j]);
	
	      3   2   6   5   0   3
	2  s  0   0   4 when use b[2] here to find profit @day2, it represent 0 - 2 (s1@day0 - prices@day1)
	   b -3  -2
	1  s  0   *
           b -3   *
        */
        
        return s[k];
    }
}

// merged
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null || prices.length<=1) return 0;
        int len = prices.length;
        int min = prices[0], max = 0, mono = 0, st = prices[0], total = 0; // NO of mono 
        for (int j = 1; j < prices.length; j++) {
            if (j == prices.length - 1) {
                if (prices[j] > prices[j - 1]) total += prices[j] - st;
                else total += prices[j - 1] - st;
                mono++;
            } else if (prices[j] < prices[j - 1]) { total += prices[j - 1] - st; mono++; st = prices[j]; }
        }
        if (k >= mono) return total;
        int[] hold = new int[k+1];
        int[] sold = new int[k+1];
        Arrays.fill(hold, Integer.MIN_VALUE);
        for(int price : prices) {
            for(int j=1; j<=k; j++) {
                hold[j] = Math.max(hold[j], sold[j-1]-price); // hold->hold, sold->hold
                sold[j] = Math.max(sold[j], hold[j]+price); // sold->sold, hold->sold
            }
        }
        return sold[k];
    }
}