**** Specification ****
Given a string containing just the characters '(' and ')', find the 
length of the longest valid (well-formed) parentheses substring.

Example 1:
Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"

Example 2:
Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"


**** Testcases ****
")((()())()())"
"((()())()())"
"(()()))))()())"

")()())()"
"(()())())()()"


**** Ideas ****
// 1st attempt
???

// 2nd visit
Maintain stack to record id of '(' not yet coupled. When ')' is encountered,
pop out one '(' from stack if not empty (if empty simply ignore). Then if 
this poped out id is 0, it means we reached the very front and should set start
id to be -1. Current max in this case will be i+1.

If stack is not empty after pop out, it means that there are still uncoupled
'(' left in the front. As a result, we all parenthesis following that one 
has been coupled. Thus, current max in this case should be i-stack.peek().

If stack is empty after pop out, we make use of the dp array which finally 
records the id of leftmost '(' in the consecutive series of parenthesis. All
parenthesis from that '(' upon have been coupled. Thus, cm = i-dp[?].

In summary, we always finding the leftmost '(' parenthesis not coupled. If no
such parenthesis exists, we are either checking the very first series as in
case one OR we are in an isolated series of parenthesis independent from the 
former.


**** Code ****
// ?
class Solution {
    
    public int longestValidParentheses(String s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * right);
            } else if (right >= left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * left);
            } else if (left >= right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
}

// stack - derived
class Solution {
    
    public int longestValidParentheses(String s) {
        char[] str = s.toCharArray();
        int n = str.length;
        if (n < 2) return 0;
        int[] max = new int[n];
        int maxi = 0;
        Stack<Integer> st = new Stack<Integer>();
        int j = -1;
        for (int i = 0; i < n; i++) {
            if (str[i] == '(') st.add(i);
            else {
                st.pop();
                if (st.isEmpty()) st.add(i);
            }
            maxi = max(maxi, i - s.peek());
        }
        return maxi;
    } 
}

// stack - others
// corrected in second visit. check - "(()())())()"
class Solution {
    
    public int longestValidParentheses(String s) {
        char[] str = s.toCharArray();
        int n = str.length;
        if (n < 2) return 0;
        int[] max = new int[n];
        int maxi = 0;
        Stack<Integer> st = new Stack<Integer>();
        st.add(-1); // newly added
        for (int i = 0; i < n; i++) {
            if (str[i] == '(') st.add(i);
            else {
                st.pop();
                if (st.isEmpty()) st.add(i);
            }
            maxi = Math.max(maxi, i - st.peek());
        }
        return maxi;
    } 
}

// stack 2nd
class Solution {
    
    public int longestValidParentheses(String s) {
        int n = s.length(), max = 0, j = -1;
        if (n < 2) return 0;
        while (s.charAt(++j) == ')') if (j >= n - 1) return 0;
        Stack<Integer> st = new Stack<Integer>();
        if (j >= 1) st.add(j - 1);
        else st.add(-1);
        for (int i = j; i < n; i++) {
            if (s.charAt(i) == '(') st.add(i);
            else if (!st.isEmpty()) {
                st.pop();
                if (st.isEmpty()) st.add(i);
                if (max < i - st.peek()) max = i - st.peek();
            }
        }
        return max;
    } 
}

// 2nd visit_indep
class Solution {
    
    public int longestValidParentheses(String s) {
        int n = s.length(), max = 0, a;
        if (n == 0) return 0;
        char[] cs = s.toCharArray(); int[] dp = new int[n]; 
        Arrays.fill(dp, -1);
        LinkedList<Integer> prevLeft = new LinkedList<Integer>();
        for (int i = 0; i < n; i++) {
            if (cs[i] == '(') prevLeft.add(i);
            else if (!prevLeft.isEmpty()) {
                // dp[i] is id of corresponding '(' of cs[i]
                dp[i] = prevLeft.removeLast(); 
                // dp[i] ... leftmost '(' in the continuous series
                if (dp[i] != 0 && cs[dp[i]-1] == ')' && dp[dp[i]-1] != -1) 
                    dp[i] = dp[dp[i]-1];
                
                // calculate length
                if (dp[i] == 0) a = -1;
                else if (!prevLeft.isEmpty()) a = prevLeft.peekLast();
                else a = dp[i] - 1;
                max = Math.max(max, i - a);
            }
        }
        return max;
    }
}