## Specification
You are given an integer array A.  From some starting index, you can make a series of jumps.  The (1st, 3rd, 5th, ...) jumps in the series are called odd numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even numbered jumps. 
You may from index i jump forward to index j (with i < j) in the following way: 

(I) During odd numbered jumps (ie. jumps 1, 3, 5, ...), you jump to the index j such that A[i] <= A[j] and A[j] is the smallest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j. 

(II) During even numbered jumps (ie. jumps 2, 4, 6, ...), you jump to the index j such that A[i] >= A[j] and A[j] is the largest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j. 

A starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping some number of times (possibly 0 or more than once.) Return the number of good starting indexes.

Example 1:
Input: [10,13,12,14,15]
Output: 2
Explanation: We can reach the end from starting indexes 3 and 4.

Example 2:
Input: [2,3,1,1,4]
Output: 3
Explanation: We can reach the end from starting indexes 1, 3, and 4.

Example 3:
Input: [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indexes 1, 2, and 4.

Note:
1 <= A.length <= 20000
0 <= A[i] < 100000


## Testcases
[2,3,1,1,4]
[1,2,3,2,1,4,4,5]
[10,13,12,14,15]
 0  1  2  3  4  5  6 7  8  9 10 11 12 13 14 15 16 17 18 19
[2,96,18,12,21,80,93,2,42,10,25,22,64,35,18,50, 3,10,98,19]


## Ideas
# (2) TreeMap
Instead of finding ceiling and floor manually, TreeMap can be used for simplification.

# (1) Stack
At each entry, if we are doing an odd/even jump, we are simply finding its ceiling/floor among the following elements. In this case, we let dp[0/1][i] denote whether an even/odd jump from i can finally reach the last element. DP part is very straightforward, the key is to find the ceiling/floor for each element. 

To do this we can first sort the id of all elements ascendingly/descendingly for to find ceiling/floor elements. For ceiling element, we maintain the id in the stack in descending order such that every time we encounter a new element whose id is larger than one/several elements in the stack, we pop out these id, ceiling of whose corresponding element is the element specificed by the new larger id.


## Code
# (2) TreeMap/DP_bottom-up
// others
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int n  = A.size(), res = 1;
        vector<int> ceiling(n), floor(n);
        ceiling[n - 1] = floor[n - 1] = 1;
        map<int, int> map;
        map[A[n - 1]] = n - 1;

        for (int i = n - 2; i >= 0; --i) {
            auto hi = map.lower_bound(A[i]), lo = map.upper_bound(A[i]);
            if (hi != map.end()) ceiling[i] = floor[hi->second];
            if (lo != map.begin()) floor[i] = ceiling[(--lo)->second];
            if (ceiling[i]) res++;
            map[A[i]] = i;
        }
        return res;
    }
};

# (1) Stack/DP_bottom-up
// derived
class Solution {
public:
    // flag == 1, ascending order sort
    // find floor(flag == -1) / ceiling (flag == 1) for all elements in A
    void fcg(int flag, vector<int>& id, vector<int>& A, vector<vector<int>>& fc) {
        sort(id.begin(), id.end(), [&A, flag] (int a, int b) { 
            if (A[a] != A[b]) return flag * (A[a] - A[b]) < 0; 
            return a < b;
        });
        stack<int> stk;
        for (int i = 0, sto = max(flag, 0); i < A.size(); i++) {
            while (!stk.empty() && stk.top() < id[i]) 
            { fc[sto][stk.top()] = id[i]; stk.pop(); }
            stk.push(id[i]);
        }
    }
    
    int oddEvenJumps(vector<int>& A) {
        int n = A.size(), ans = 1;
        vector<vector<int>> dp(2, vector<int>(n, 0));
        dp[0][n-1] = dp[1][n-1] = 1;
        // find floor and ceiling element
        vector<int> id(n);
        for (int i = 0; i < n; i++) id[i] = i;
        vector<vector<int>> fc (2, vector<int>(n, -1)); // fc[0/1], floor/ceiling
        fcg(-1, id, A, fc); fcg(1, id, A, fc);
        // DP
        for (int j = n - 2; j >= 0; j--)
            for (int i = 0; i <= 1; i++)
                if (fc[i][j] != -1) dp[i][j] = dp[1-i][fc[i][j]];
        
        for (int i = 0; i < n - 1; i++) if (dp[1][i]) ans++;
        return ans;
    }
};
