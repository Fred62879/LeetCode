## Specification
Similar: LT964
Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.) Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse). When you get an instruction "A", your car does the following: position += speed, speed *= 2. When you get an instruction "R", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.) For example, after commands "AAR", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1. Now for some target position, say the length of the shortest sequence of instructions to get there.

Example 1:
Input: 
target = 3
Output: 2
Explanation: 
The shortest instruction sequence is "AA".
Your position goes from 0->1->3.

Example 2:
Input: 
target = 6
Output: 5
Explanation: 
The shortest instruction sequence is "AAARA".
Your position goes from 0->1->3->7->7->6.

Note:
1 <= target <= 10000.



## Ideas
# (INTUITION & PROOF)
// official
Let A^k denote the command AAAA⋯A (k times). Starting with an "R" command doesn't help, and as the final sequence does not end on an "R", so we have some sequence like R A^{k_1} R A^{k_2} ... R A^{k_n} which could be instead A^{k_2} R A^{k_3} R ... A^{k_n} R R A^{k_1} for the same final position of the car. (Here, ki ≥0, where A^0 means no command.)

So let's suppose our command is always of the form A^{k_1} R A^{k_2} R ... A^{k_n}. Note that under such a command, the car will move to final position (2^{k_1} - 1) - (2^{k_2} - 1) + (2^{k_3} - 1) - ... Without loss of generality, we can say that (k_i, i odd) is monotone decreasing, and (k_i, i even) is also monotone decreasing. Also because terms will cancel out, we can also ignore the possibility that k_i = k_j (for i, ji,j with different parity).

Another key claim is that k_i is bounded by a+1, where a is the smallest integer such that 2^a ≥ target. Basically, if you drive past the target, you don't need to keep driving. This is because it adds another power of two (as 2^{k_i} - 1 = ∑ (j<k_i) 2^j) to the position that must get erased by one or more negative terms later (in whole or in part), as it is not part of the target.

// others math
https://leetcode.com/problems/race-car/discuss/147479/Mathematical-proof-on-why-the-DP-solution-works

// overall
https://leetcode.com/problems/race-car/discuss/124326/Summary-of-the-BFS-and-DP-solutions-with-intuitive-explanation%20is%20a%20better%20alternative.

# (5) Recursion

# (4) DP_bottom-up

# (3) DP_top-down
https://leetcode.com/problems/race-car/discuss/123834/C%2B%2BJavaPython-DP-solution

# (2) BFS

# (1) Dijstra's


## Code
# (3) DP_top-down
// others
class Solution {
public:
    int solve(int target, vector<int>& dp) {
        if (dp[target] != -1) return dp[target];
        int n = log(target) / log(2) + 1;
        dp[target] = n + 1 + solve((1 << n) - 1 - target, dp);
        for (int m = 0; m < n - 1; m++)
            dp[target] = min(dp[target], n + m + 1 + 
			     solve( (target - (1 << (n - 1)) + (1 << m)) , dp) );
        return dp[target];
    }
    
    int racecar(int target) {
        int power = log(target) / log(2), hi = 1 << (power + 1);
        vector<int> dp(hi, -1);
        for (int i = 0; i <= power + 1; i++) dp[(1 << i) - 1] = i;
        return solve(target, dp);
    }
};

// indep_not_imple
class Solution {
public:
    int ans = INT_MAX;
    
    // min# of movements needed when already gone thru cover#
    int dfs(vector<int> &ref, vector<int> &dp, int oriet, int cover, int t) {
        if (dp[cover] != 0) return dp[cover];
        int cur = INT_MAX, ct = 0;
        for (int cease : ref) { // A...A
            int reverse = INT_MAX, brake = INT_MAX; ct++;
            // if (ct >= ans) break;
            
            int ncovr = (oriet == -1 ? -cease : cease) + cover; // accelerate
            if (oriet == -1 && ncovr < 0 || oriet == 1 && ncovr >= 2 * t) break; // exceed limit
            if (ncovr == t) { cur = min(cur, ct); continue; } // reached
            
            reverse = dfs(ref, dp, -1, ncovr, t) + 1 + ct; // R
            brake = dfs(ref, dp, 1, ncovr, t) + 2 + ct;    // RR
            cur = min(cur, min(reverse, brake));
        }
        dp[cover] = cur;
        // ans = min(ans, cur);
        return cur;
    }
    
    int racecar(int target) {
        vector<int> ref, dp(target * 2, 0);
        for (int st = 1, i = 1; st < target * 2; st = st * 2 + 1)
            { ref.push_back(st); dp[st] = i++; }
        return dfs(ref, dp, 1, 0, target);
    }
};

class Solution {
public:
    // min # of operations to cover dest long distance
    int solve(vector<int> &ref, vector<int> &dp, int dest) {
        if  (dp[dest] != -1) return dp[dest];
        
        int ans = INT_MAX;
        for (int cease = 1, ct = 1; cease < dest * 2; cease = ref[ct]) {
            int cur = solve(ref, dp, abs(cease - dest)) + ct + (cease == dest ? 0 : 2);
            ans = min(ans, cur);
            if (++ct >= ref.size()) break;
        }
        dp[dest] = ans;
        return ans;
    }
    
    int racecar(int target) {
        vector<int> ref, dp(target + 1, -1);
        for (int st = 0, i = 0; st < target*2; st = st * 2 + 1) {
            ref.push_back(st);
            if (st <= target) dp[st] = i++;
        }
        return solve(ref, dp, target);
    }
};
