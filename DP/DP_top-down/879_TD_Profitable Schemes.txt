## Specification
There are G people in a gang, and a list of various crimes they could commit. The
i-th crime generates a profit[i] and requires group[i] gang members to participate.
If a gang member participates in one crime, that member can't participate in
another crime.

Let's call a profitable scheme any subset of these crimes that generates at least 
P profit, and the total number of gang members participating in that subset of 
crimes is at most G. How many schemes can be chosen?  Since the answer may be very 
large, return it modulo 10^9 + 7.

Example 1:
Input: G = 5, P = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: 
To make a profit of at least 3, the gang could either commit crimes 0 and 1, or just crime 1.
In total, there are 2 schemes.

Example 2:
Input: G = 10, P = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: 
To make a profit of at least 5, the gang could commit any crimes, as long as they commit one.
There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).

Note:
1 <= G <= 100
0 <= P <= 100
1 <= group[i] <= 100
0 <= profit[i] <= 100
1 <= group.length = profit.length <= 100


## Testcases
10
5
[2,3,5]
[6,7,8]

100
100
[2,5,36,2,5,5,14,1,12,1,14,15,1,1,27,13,6,59,6,1,7,1,2,7,6,1,6,1,3,1,2,11,3,39,21,20,1,27,26,22,11,17,3,2,4,5,6,18,4,14,1,1,1,3,12,9,7,3,16,5,1,19,4,8,6,3,2,7,3,5,12,6,15,2,11,12,12,21,5,1,13,2,29,38,10,17,1,14,1,62,7,1,14,6,4,16,6,4,32,48]
[21,4,9,12,5,8,8,5,14,18,43,24,3,0,20,9,0,24,4,0,0,7,3,13,6,5,19,6,3,14,9,5,5,6,4,7,20,2,13,0,1,19,4,0,11,9,6,15,15,7,1,25,17,4,4,3,43,46,82,15,12,4,1,8,24,3,15,3,6,3,0,8,10,8,10,1,21,13,10,28,11,27,17,1,13,10,11,4,36,26,4,2,2,2,10,0,11,5,22,6]


## Ideas
# (3) DP_bottom-up_2D_others

# (2) DP_bottom-up_3D_others

# (1) DP_top-down_indep
Sort id array in ascending group order. In this case, once the current g is less than the current group entry, we can return immediately. Another trick is to set non-positive p as 0. For instance, at entry 7 if we still have 5 people left, p <= 0 will generate the same result.


## Code
# (1) DP_top-down_3D
// indep_slow (140ms, 9%)
class Solution {
    
    long q = 1000000007;
    long[][][] dp;
    int [] group, profit; Integer[] id;
    
    // # of schemes >= p from lo onward using <= g people
    public long solve(int n, int g, int p, int lo) {
        if (lo >= n || g < group[id[lo]]) return 0;
        int np = p <= 0 ? 0 : p, cur = id[lo];
        if (dp[g][np][lo] != -1) return dp[g][np][lo];
        
        long a = solve(n, g, np, lo + 1), b = 0; // do not take cur profit
        if (g >= group[cur])
            b = ((p > profit[cur] ? 0 : 1) + solve(n, g - group[cur], np - profit[cur], lo + 1)) % q; // take current
        dp[g][np][lo] = (a + b) % q;
        return dp[g][np][lo];
    }
    
    public int profitableSchemes(int G, int P, int[] group, int[] profit) {
        int n = group.length; dp = new long[G + 1][P + 1][n];
        this.group = group; this.profit = profit; id = new Integer[n];
        for (int i = 0; i <= G; i++) 
            for (int j = 0; j <= P; j++) Arrays.fill(dp[i][j], -1);
        for (int i = 0; i < n; i++) id[i] = i;
        Arrays.sort(id, (Integer a, Integer b) -> group[a] - group[b]);
        return (int) solve(n, G, P, 0);
    }
}
