## Specification
Similar: LT 1125


We are given N different types of stickers. Each sticker has a lowercase English word on it.

You would like to spell out the given target string by cutting individual letters from your

collection of stickers and rearranging them. You can use each sticker more than once if you

want, and you have infinite quantities of each sticker. What is the minimum number of 
stickers that
 you need to spell out the target? If the task is impossible, return -1.



Example 1:

Input:
["with", "example", "science"], "thehat"

Output:
3

Explanation:

We can use 2 "with" stickers, and 1 "example" sticker.

After cutting and rearrange the letters of those stickers, we can form the target "thehat".

Also, this is the minimum number of stickers necessary to form the target string.



Example 2:

Input:
["notice", "possible"], "basicbasic"

Output:
-1

Explanation:

We can't form the target "basicbasic" from cutting letters from the given stickers.



Note:
stickers has length in the range [1, 50].

stickers consists of lowercase English words (without apostrophes).

target has length in the range [1, 15], and consists of lowercase English letters.

In all test cases, all words were chosen randomly from the 1000 most common US English
 words, 
and the target was chosen as a concatenation of two random words.

The time limit may be more challenging than usual. It is expected that a 50 sticker test case
 
can be solved within 35ms on average.




## Testcases

["and","pound","force","human","fair","back","sign","course","sight","world","close","saw","best","fill","late","silent","open","noon","seat","cell","take","between","it","hundred","hat","until","either","play","triangle","stay","separate","season","tool","direct","part","student","path","ear","grow","ago","main","was","rule","element","thing","place","common","led","support","mean"]
"quietchord"

["heavy","claim","seven","set","had","it","dead","jump","design","question","sugar","dress","any","special","ground","huge","use","busy","prove","there","lone","window","trip","also","hot","choose","tie","several","be","that","corn","after","excite","insect","cat","cook","glad","like","wont","gray","especially","level","when","cover","ocean","try","clean","property","root","wing"]
"travelbell"

["seven","set","design","question","sugar","dress","any","special","busy"]
"travelbell"




## Ideas

(5) BFS

(4) DP_top-down

(3) DP_bitwise_bottom_up

(2) DFS_backtracking

(1) DFS(Exhaust_search)_indep.





## Code

# (4) DP_top-down
class Solution {
private:
    // return smallest # of stickers to cover target
    int helper(unordered_map<string, int>& dp, vector<vector<int>>& mp, string target) {
        if (dp.count(target)) return dp[target];
        int ans = INT_MAX, n = mp.size();
        vector<int> tar(26, 0);
        for (char c:target) tar[c-'a']++;
        // try every sticker
        for (int i = 0; i < n; i++) { // for each sticker
            if (mp[i][target[0]-'a'] == 0) continue;
            string s; // chars not covered
            for (int j = 0; j < 26; j++) // chars not covered by cur sticker (i)
                if (tar[j]-mp[i][j] > 0) s += string(tar[j]-mp[i][j], 'a'+j);
            int tmp = helper(dp, mp, s);
            if (tmp!= -1) ans = min(ans, 1+tmp);
        }
        dp[target] = ans == INT_MAX? -1:ans;
        return dp[target];
    }

public:
    int minStickers(vector<string>& stickers, string target) {
        int m = stickers.size();
        vector<vector<int>> mp(m, vector<int>(26, 0));
        unordered_map<string, int> dp;
        // count characters a-z for each sticker 
        for (int i = 0; i < m; i++) 
            for (char c:stickers[i]) mp[i][c-'a']++;
        dp[""] = 0;
        return helper(dp, mp, target);
    }
};

