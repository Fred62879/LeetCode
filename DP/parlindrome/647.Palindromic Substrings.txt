**** Specification ****
Similar: LT132,730,940
Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".


**** Testcases ****
"aabcdcdaaeaabcdcbaa"


**** Code ****
// 2nd visit_Mar_7_2019
class Solution {
    public int countSubstrings(String s) {
        int n = s.length(), count = 0;
        for (int i = 0; i < n; i++) {
            // center around i
            int lo = i, hi = i;
            while (lo >= 1 && hi < n - 1 && s.charAt(--lo) == s.charAt(++hi)) count++;
            // symmetric
            int a = i, b = i + 1;
            while (a >= 0 && b < n && s.charAt(a--) == s.charAt(b++)) count++;
        }
        return count + n;
    }
}

// derived_dp
class Solution {
    
    int res = 0;
    
    public void even(int i, int len, String s) {
        if (i - len + 1 < 0 || i + len >= s.length() || s.charAt(i - len + 1) != s.charAt(i + len)) return;
        res++;
        even(i, len + 1, s);
    }
    
    public void odd(int i, int len, String s) {
        if (i - len < 0 || i + len >= s.length() || s.charAt(i - len) != s.charAt(i + len)) return;
        res++;
        odd(i, len + 1, s);
    }
    
    public int countSubstrings(String s) {
        int n = s.length();
        for (int i = 0; i < n - 1; i++) {
            even(i, 1, s);
            odd(i, 1, s);
        }
        return res + n;
    }
}

class Solution {
    
    public int countSubstrings(String s) {
        int lens = s.length();
        int result = 0;
        for (int i = 0; i < lens; ++i) {
            int od = 1, ev = 0;
            while (i - od >= 0 && i + od < lens && s.charAt(i - od) == s.charAt(i + od)) od++;
            result += od;
            
            while (i - ev >= 0 && i + 1 + ev < lens && s.charAt(i - ev) == s.charAt(i + ev + 1)) ev++;
            result += ev;
        }
        return result;
    }
}

// indep_recur
class Solution {
    
    
    int[] radix = new int[26]; // idx of most recent char
    int[] pre;
    
    private boolean solve(String s, int lo, int hi) {
        assert(s.charAt(hi) == s.charAt(lo));
        if (hi - lo <= 2) return true;
        if (s.charAt(hi - 1) != s.charAt(lo + 1)) return false;
        return solve(s, lo + 1, hi - 1);
    }
    
    public int countSubstrings(String s) {
        int n = s.length(), res = 0;
        pre = new int[n];
        Arrays.fill(radix, -1);
        Arrays.fill(pre, -1); 
        radix[s.charAt(0)- 'a'] = 0;
        for (int i = 1; i < n; i++) {
            int cur = s.charAt(i)- 'a';
            if (radix[cur] != -1) {
                pre[i] = radix[cur];
                int ci = i;
                while (pre[ci] != -1) {
                    if (solve(s, pre[ci], i))
                        res++; // sequence ends at i
                    ci = pre[ci];
                }
            }
            radix[cur] = i;
        }
        return res + n;
    }
}
