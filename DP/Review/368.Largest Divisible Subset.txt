## Specification
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0. If there are multiple solutions, return any subset is fine.

Example 1:
Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:
Input: [1,2,4,8]
Output: [1,2,4,8]



## Ideas
## (II) DFS_backtracking
https://leetcode.com/problems/largest-divisible-subset/discuss/84033/6ms-C%2B%2B-beats-100-w-explanations

The basic idea is to dfs on all possibilities. However, my initial attempt leads to TLE. For loop can be used to get AC. 

Another simple optimization to prune on path that will not lead to a better answer is to calculate the max number needed to accommodate the current subset to be at least as long as that of the best solution. Since each element is at least two times its preceding one, given the longest length so far and length of current path, we can predict the min value of the last value of the current path.


# (I) DP_bottom_up
// indep
For a ascending subset, it can be found that every time we want to add a new element to the set, the only requirement to satisfy is that the last element must be divisible to the new element. Based on this idea, we let dp denotes the longest subset from nums[i] onward. Every subset that uses nums[i] will thus share the following set which is dp[i].



## Code
# (II) DFS_backtracking
// others_optimized_4~8ms
class Solution {
public:
    int n, cpos = 0, bst_len = 0, max;
    vector<int> ans, bst; // ans, answer for current traverse; bst, longest ... so far
    vector<int> len; // len[i], max length of divisible subset terminating at nums[i]
    
    int valid(int id, vector<int>& nums) {
        return (cpos == 0 || (nums[id] % ans[cpos - 1] == 0 && cpos + 1 > len[id]));
    }
    
    // find longest divisible set from id onward
    void solve(int id, vector<int>& nums) {
        for (; id < n; id++) {
            if (bst_len > cpos && (((long) 1) << (bst_len - cpos - 1)) * nums[id] > max) break;
            
            if (valid(id, nums)) {
                len[id] = cpos + 1;
                ans[cpos++] = nums[id];
                solve(id + 1, nums);
                cpos--;
            }
        }
        if (bst_len < cpos) {
            bst_len = cpos;
            bst = vector<int>(ans.begin(), ans.begin() + cpos);
        }
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if (nums.size() <= 1) return nums;
        
        n = nums.size(), len.assign(n, 0), ans.resize(n + 1);
        sort(nums.begin(), nums.end());
        max = nums.back();
        
        solve(0, nums);
        return bst;
    }
};

// derived_68ms
class Solution {
public:
    int n, cpos = 0, bst_len = 0;
    vector<int> ans, bst; // ans, answer for current traverse; bst, longest ... so far
    vector<int> len; // len[i], max length of divisible subset terminating at nums[i]
    
    int valid(int id, vector<int>& nums) {
        return (cpos == 0 || 
                (nums[id] % ans[cpos - 1] == 0 && cpos + 1 > len[id]));
    }
    
    // find longest divisible set from id onward
    void solve(int id, vector<int>& nums) {
        for (; id < n; id++) if (valid(id, nums)) {
            len[id] = cpos + 1;
            ans[cpos++] = nums[id];
            solve(id + 1, nums);
            cpos--;
        }
        if (bst_len < cpos) {
            bst_len = cpos;
            bst = vector<int>(ans.begin(), ans.begin() + cpos);
        }
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        n = nums.size(), len.assign(n, 0), ans.resize(n + 1);
        sort(nums.begin(), nums.end());
        solve(0, nums);
        return bst;
    }
};

// improved_TLE
class Solution {
public:
    int n, cpos = 0, max_len = 0;
    vector<int> ans;
    vector<int> len; // len[i], max length of divisible subset terminating at nums[i]
    
    // find longest divisible set from id onward
    vector<int> solve(int id, vector<int>& nums) {
        if (id == nums.size()) {
            vector<int> res(ans.begin(), ans.begin() + cpos);
            return res;
        }
        
        vector<int> take_char;
        if (cpos == 0 || nums[id] % ans[cpos - 1] == 0) {
            if (cpos + 1 <= len[id]) // pruning
                return solve(id + 1, nums);
            
            len[id] = cpos + 1;
            ans[cpos++] = nums[id];
            take_char = solve(id + 1, nums);
            cpos--;
        }
        auto drop_char = solve(id + 1, nums);
        return take_char.size() > drop_char.size() ? take_char : drop_char;
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        n = nums.size(), len.assign(n, 0), ans.resize(n);
        sort(nums.begin(), nums.end());
        return solve(0, nums);
    }
};

// adapted_TLE
class Solution {
public:
    vector<int> len; // len[i], max length of divisible subset terminating at nums[i]
    
    // find longest divisible set from id onward
    vector<int> solve(int id, vector<int>& cur, vector<int>& nums) {
        if (id == nums.size()) return cur;
        
        vector<int> take_char;
        if (cur.size() == 0 || nums[id] % cur.back() == 0) {
            if (cur.size() + 1 <= len[id]) // pruning
                return solve(id + 1, cur, nums);
            
            len[id] = cur.size() + 1;
            cur.push_back(nums[id]);
            take_char = solve(id + 1, cur, nums);
            cur.pop_back();
        }
        auto drop_char = solve(id + 1, cur, nums);
        return take_char.size() > drop_char.size() ? take_char : drop_char;
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        len.assign(nums.size(), 0);
        
        vector<int> cur;
        sort(nums.begin(), nums.end());
        
        return solve(0, cur, nums);
    }
};


# (I) DP_bottom_up

//
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return nums;
        
        int max_len = 0, mx_id = 0;
        sort(nums.begin(), nums.end());
        vector<int> lsf(0); // id of none divisible num seen so far
        vector<int> tail(n); // previous ele of nums[i] of subset entailed by lsf[i]
        vector<int> col();
        for (int i = 1; i < n; i++) {
            int flag = 1; // flag == 1, none of nums[0:i] divisible to nums[i]
            for (int j = 0; j < lsf.size(); j++) {
                if (nums[i] % nums[lsf[j]] == 0) {
                    flag = 0;
                    if (i != 1) lsf[j] = i;
                    tail[i] = j;
                }
                if (flag) { // no divisible ele collected
                    lsf.push_back(i);
                    tail[i] = -1;
                }
            }
            if (max_len < lsf[i]) max_len = lsf[i], mx_id = i;
        }
        
        vector<int> ans(max_len);
        while (max_len-- > 0) {
            ans[max_len] = nums[mx_id];
            mx_id = tail[mx_id];
        }
        return ans;
    }
};

// derived_improved_24ms
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return nums;
        
        int max_len = 0, mx_id = 0;
        sort(nums.begin(), nums.end());
        vector<int> lsf(n); // lsf[i], len of longest subset terminate at nums[i]
        vector<int> tail(n); // previous ele of nums[i] of subset entailed by lsf[i]
        for (int i = 0; i < n; i++) {
            lsf[i] = 1, tail[i] = -1;
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && lsf[i] < lsf[j] + 1)
                    lsf[i] = lsf[j] + 1, tail[i] = j;
            }
            if (max_len < lsf[i]) max_len = lsf[i], mx_id = i;
        }
        
        vector<int> ans(max_len);
	for (int i = max_len - 1; i >= 0; i--) {
            ans[i] = nums[mx_id];
            mx_id = tail[mx_id];
        }
	/*
	// 28ms
        while (max_len-- > 0) {
            ans[max_len] = nums[mx_id];
            mx_id = tail[mx_id];
        }
	*/
        return ans;
    }
};

// indep_44ms
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return nums;
        
        sort(nums.begin(), nums.end());
        vector<int> ans{ nums[0] };
        // dp[i], longest subset from nums[i] onward
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n - 1; i >= 0; i--) {
            dp[i] = vector<int>();
            for (int j = i + 1; j < n; j++) 
                if (nums[j] % nums[i] == 0 && dp[j].size() > dp[i].size()) 
                    dp[i] = dp[j];
            dp[i].push_back(nums[i]);
            if (dp[i].size() > ans.size()) ans = dp[i];
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};



## Testcases
[4,9,1,2,3,8,24,16,32]
[1,2,3,5,7,9,16,27,28,30,36,40,45]
[2,4,6,9,19,81,729]
[832,33,531,416,335,298,365,352,582,936,366,305,930,530,97,349,71,295,840,108,299,804,925,627,953,571,658,732,429,136,563,462,666,330,796,315,695,500,896,982,217,200,912,98,297,612,169,943,628,593,959,904,219,240,857,789,897,940,569,384,502,382,401,184,716,230,29,963,211,597,515,122,163,86,215,105,889,842,49,847,267,87,954,407,245,975,719,746,709,471,281,238,186,510,618,149,73,214,663,194,260,825,631,474,519,668,329,718,765,947,156,353,490,962,679,560,59,387,31,692,976,568,201,273,159,730,819,418,906,801,892,672,559,866,389,675,812,744,164,737,57,195,115,933,158,909,598,359,853,314,983,11,395,153,781,301,838,625,704,256,351,996,225,644,521,509,674,417,272,622,937,723,632,331,228,412,181,435,469,157,368,524,38,132,325,420,127,731,771,604,505,634,67,374,894,3,448,878,686,641,316,207,76,363,795,235,770,446,820,493,177,816,615,410,117,944,829,190,831,289,516,964,170,134,671,885,682,119,402,82,485,901,375,68,858,739,56,974,683,884,815,872,715,104,290,348,588,834,788,472,466,867,550,779,65,802,459,440,870,753,608,808,623,642,44,437,865,758,540,506,691,958,854,546,39,595,369,504,63,311,722,441,786,899,338,651,874,946,811,848,939,284,824,309,653,133,514,460,678,54,399,759,468,61,480,783,266,900,400,237,403,534,213,914,473,198,380,373,288,154,844,535,409,249,285,168,69,345,647,851,846,264,102,246,106,648,576,212,438,981,987,379,360,667,95,172,101,580,891,385,747,161,927,361,818,657,171,342,232,734,714,362,425,475,28,41,551,142,131,51,229,9,607,326,522,687,792,845,665,358,91,720,155,565,99,26,650,539,780,589,950,935,372,227,424,750,833,554,841,552,60,757,430,916,140,790,426,776,96,199,923,806,949,755,711,659,911,611,310,774,265,880,690,706,761,286,255,756,204,444,478,601,529,669,241,784,566,528,208,270,511,236,271,378,58,453,467,233,250,567,296,932,989,367,626,35,162,887,572,603,564,797,280,406,970,689,408,431,638,489,85,50,357,803,47,555,793,422,763,110,869,861,253,320,538,347,405,769,64,875,630,537,328,553,166,948,303,160,800,507,920,922,90,693,636,17,455,183,210,856,762,656,174,873,579,176,688,640,1,938,902,341,740,581,427,111,972,443,22,791,304,574,575,725,477,700,817,381,479,248,121,411,547,182,871,599,203,13,224,541,724,178,775,388,4,251,321,52,88,100,279,614,839,84,151,735,40,752,773,376,77,476,708,396,988,961,24,231,445,609,952,965,986,414,451,881,42,257,32,334,130,596,527,94,333,317,244,960,710,852,862,421,81,37,452,274,187,268,520,491,778,18,743,620,145,72,370,118,748,633,997,436,143,573,495,180,34]
[480,812,614,116,368,538,570,423,883,441,81,262,18,696,985,911,627,479,114,455,539,290,733,536,469,349,621,432,898,595,794,378,407,845,774,944,414,548,178,854,981,439,872,676,775,782,303,605,247,109,143,888,193,31,357,542,3,140,791,598,933,520,356,691,365,129,634,778,29,163,984,9,953,855,684,80,988,338,587,799,827,474,991,857,182,884,859,322,675,808,606,546,297,910,644,282,40,672,797,23,680,749,877,715,828,216,405,864,802,555,690,276,545,809,781,108,482,807,916,88,352,430,736,73,17,301,96,165,323,127,914,551,842,93,766,308,920,152,997,547,48,246,355,354,837,986,50,11,475,379,899,544,221,697,123,890,253,240,487,561,159,638,557,705,37,155,412,865,860,600,850,875,835,881,885,433,263,331,277,806,903,973,966,377,862,219,617,348,779,337,687,832,725,841,243,589,700,531,68,625,764,952,58,470,566,740,746,724,995,70,689,371,931,907,987,630,685,318,372,945,43,564,983,616,732,421,498,398,261,102,731,19,742,540,431,180,249,810,374,714,97,10,521,12,900,856,631,125,25,737,234,831,467,647,346,268,128,530,723,817,131,844,363,990,235,1,753,90,980,718,104,868,840,573,659,706,949,305,51,568,200,98,274,347,228,510,224,229,458,381,208,468,663,335,358,503,788,513,493,582,169,896,150,599,993,124,826,248,77,591,876,535,171,608,434,75,402,393,409,111,895,549,759,41,326,927,288,646,417,250,254,921,196,367,332,592,406,489,166,103,847,494,107,173,773,999,418,424,408,54,604,874,682,869,281,273,317,38,265,204,719,893,917,738,375,121,280,635,863,39,688,642,761,517,359,198,822,387,438,232,157,436,500,74,227,35,699,602,314,333,465,20,994,112,285,813,233,275,526,853,560,873,576,255,534,783,188,194,824,199,823,800,330,117,225,553,628,777,300,803,729,105,703,562,982,905,671,609,340,942,22,902,351,816,934,662,712,287,46,241,504,861,78,463,744,192,257,271,190,86,339,66,935,176,291,373,975,752,187,658,266,1000,879,979,704,507,21,790,461,207,906,341,717,796,623,295,556,821,134,130,833,336,962,220,968,956,264,416,886,710,577,364,755,620,312,648,329,87,284,442,362,681,661,147,383,829,567,444,528,818,711,388,218,814,529,747,735,460,395,789,84,750,913,316,891,767,120,655,307,294,543,728,518,950,99,195,665,245,978,762,34,471,191,279,223,376,113,922,709,758,701,580,686,490,596,588,446,901,386,15,419,894,205,33,299,306,457,56,175,82,996,532,497,552,870,618,36,678,426,92,151,533,792,126,527,811,707,144,967,310,492,158,133,563,963,145,653,670,488,632,525,726,915,572,919,483,514,930,231,908,396,16,28,892,64,501,610,369,722,804,242,836,846,76,702,909,49,213,14,516,382,466,286]
