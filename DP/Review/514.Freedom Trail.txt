**** Specification ****
Given a string ring, which represents the code engraved on the outer ring and another string key,
which represents the keyword needs to be spelled. You need to find the minimum number of steps in
order to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at 12:00 direction. You need to spell all 
the characters in the string key one by one by rotating the ring clockwise or anticlockwise to 
make each character of the string key aligned at 12:00 direction and then by pressing the center 
button.

At the stage of rotating the ring to spell the key character key[i]: You can rotate the ring 
clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation 
is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i].
If the character key[i] has been aligned at the 12:00 direction, you need to press the center 
button to spell, which also counts as 1 step. After the pressing, you could begin to spell the 
next character in the key (next stage), otherwise, you've finished all the spelling.

Example:
Input: ring = "godding", key = "gd"
Output: 4

Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this
character. For the second key character 'd', we need to rotate the ring "godding" anticlockwise 
by two steps to make it become "ddinggo". Also, we need 1 more step for spelling. So the final 
output is 4.

Note:
Length of both ring and key will be in range 1 to 100.
There are only lowercase letters in both strings and might be some duplcate characters in both strings.
It's guaranteed that string key could always be spelled by rotating the string ring.


**** Code ****
// simple, derived from others directly
class Solution {
    public int findRotateSteps(String ring, String key) {
        if (ring == null) return 0;
        List<Integer>[] r = new List[26];
        for (int i = 0; i < 26; i++) {
            r[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < ring.length(); i++) {
            r[ring.charAt(i) - 'a'].add(i);
        }
        int[][] cache = new int[ring.length()][key.length()];
        return search(r, ring.length(), 0, key, 0, cache);
    }
    
    private int search(List<Integer>[] ring, int len, int p, String key, int index, int[][] cache) {
        if (index == key.length()) return 0;
        if (cache[p][index] > 0) return cache[p][index];
        char c = key.charAt(index);
        List<Integer> indices = ring[c - 'a'];
        int min = Integer.MAX_VALUE;
        for (int i: indices) {
            int oneDir = Math.abs(p - i);
            int otherDir = len - oneDir;
            min = Math.min(min, 1 + Math.min(oneDir, otherDir) + search(ring, len, i, key, index + 1, cache));
        }
        cache[p][index] = min;
        return min;
    }
}