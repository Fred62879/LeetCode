## Ideas
_(ii) 1st attempt others_



_(i) 1st attempt indep_
s1: abbc abbc abbc abbc
s2: abcb

we construct dp as:
id 0(a)  1(b)   2(c)
   0     1/2    3

We basically store the location of each char in s1. This saves the time to go thru each char in s1 to find the match char.
curNo is accumulated # of matched s2 so far,
curSt is char id in current s1 where 1st char in s2 is matched 
st is char id in 1st s1 where 1st char in s2 is matched
curS1 is char id in current s1 where former char in s2 is matched
ed is s1 id where final char in s2 is matched
if proceed = 1, ith s1 check finish, proceed to next s1
s2st is char id in s2 where check should start


it is discovered that the above method did not make use of loop detection but calculate thru, i.e. result is returned in the last line (return curNo/n2;) as in:

"bdefb"
10
"bdef"
1
loop may not start exactly at where the initial match occur. Therefore, loop is never detected if were to have the same start Loc as the first match



## Code
_(ii) 1st attempt others_
// others_unsolved
class Solution  {
public:
	int getMaxRepetitions(string s1, int n1, string s2, int n2)  {

		// Let (pass2, idx2) mean that we cover a string s2 for pass2 times,
		// and reach idx2-th character.
		// (pass2s, idx2s) stores the that, for pass1-th pass of s1,
		// we cover a string s2 for pass2s[pass1] times,
		// and reach idx2s[pass1]-th character.

		vector<int> pass2s(s2.size() + 1u, -1);
		vector<int> idx2s(s2.size() + 1u, -1);
		pass2s[0] = 0;
		idx2s[0] = 0; // at the beginning, we are at (0, 0)
		// we will let all elements in idx2s be different
		// according to pigeonhole principle,
		// we only need s2.size()+1 to find two elements 
		// that are identical to each other.

		int pass2 = 0;
		int idx2 = 0;

		for (int pass1 = 1; pass1 <= n1; ++pass1) {
			// Due to pigeonhole principle
			// we are sure to break within O(s2.size()) iterations

			for (int idx1 = 0; idx1 < s1.size(); ++idx1) { // scan s1
				if (s2[idx2] == s1[idx1]) {
					++idx2;
					if (idx2 == s2.size()) {
						idx2 = 0;
						++pass2;
					}
				}
			}
			pass2s[pass1] = pass2;
			idx2s[pass1] = idx2;

			// try to find the repetitive part
			for (int prevPass1 = 0; prevPass1 < pass1; ++prevPass1) {
				if (idx2s[prevPass1] == idx2) {
					// prevRepeat1 and pass1 share the same idx2,
					// repetitive part is found

					int repeatCount = (n1 - prevPass1) / (pass1 - prevPass1);
					int remainPass1count = (n1 - prevPass1) % (pass1 - prevPass1);

					int prefixPass2Num = pass2s[prevPass1]; // prefix part
					int repetitivePass2Num = repeatCount * (pass2s[pass1] - pass2s[prevPass1]); // repetitive part
					int suffixPass2Num = pass2s[prevPass1 + remainPass1count] - pass2s[prevPass1];
					
					int overallPass2Num = prefixPass2Num + repetitivePass2Num + suffixPass2Num;
					return overallPass2Num / n2;
				}
			}
		}

		// no repeative part found
		return pass2s[n1] / n2;
	}
};


_(i) 1st attempt indep_
// derived
/*
s1: abbc abbc abbc abbc
s2: abcb

we construct dp as:
id 0(a)  1(b)   2(c)
   0     1/2    3
   
// curNo is accumulated # of matched s2 so far
// curSt is char id in current s1 where 1st char in s2 is matched
// st is char id in 1st s1 where 1st char in s2 is matched
// curS1 is char id in current s1 where former char in s2 is matched
// ed is s1 id where final char in s2 is matched
// if proceed = 1, ith s1 check finish, proceed to next s1
// s2st is char id in s2 where check should start

*/

class Solution {
    
    // e.g. st.get(i) = a -> there is a first-char-match at a[1]\th char of a[0]\th s1
    ArrayList<int[]> ed = new ArrayList<int[]>();
    int proceed = 0;
    
    // cur 1st-char-match at curS1\th char of s1id\th s1, 
    private int val(int n1, int s1id, int curS1) {
        // check all prev char id in s1 where s2 fully matched
        int preface = -1;
        for (int i = 0; i < ed.size(); i++) if (ed.get(i)[1] == curS1) preface = i;
        int[] res = {s1id, curS1}; ed.add(res);
        if (preface == -1) return -1; // no loop
        int stid = ed.get(preface)[0], loop = ed.size()-1, curid = ed.get(loop)[0], left = 0;
        // calculate ans
        int residue = (n1 - stid) % (curid - stid);
        int fold = (n1 - stid) / (curid - stid);
        for (int i = preface + 1; i <= loop; i++)
            if (ed.get(i)[0] <= stid + residue) left++;
        return preface + 1 + (loop - preface) * fold + left;
    }
    
    // find char id (curS1) in cur s1 corresponds to cur char in s2
    private int next(ArrayList<Integer> cur, int curS1) {
        for (int k = 0; k < cur.size(); k++) {
            if (cur.get(k) > curS1) return cur.get(k); 
            else if (k == cur.size()-1) proceed = 1;
        }
        return curS1;
    }
    
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        ArrayList<Integer>[] dp = new ArrayList[26];
        for (int i = 0; i < 26; i++) dp[i] = new ArrayList<Integer>();
        for (int i = 0; i < s1.length(); i++) dp[s1.charAt(i)-'a'].add(i);   // store location for each char in s1
        
        int curNo = 0, curS1 = -1, s2st = -1;
        for (int i = 1; i <= n1; i++, proceed = 0, curS1 = -1) { // iterate thru s1
            for (int j = s2st+1; j < s2.length(); j++) {      // check char in s2 under cur s1
                if (dp[s2.charAt(j)-'a'].isEmpty()) return 0; // s1 does not contain s2[j]
                curS1 = next(dp[s2.charAt(j)-'a'], curS1);    // update curS1
                if (proceed == 1) { s2st = j - 1; break; }    // all s2[j] in cur s1 are checked, proceed to next s1
                if (j == s2.length()-1) {                     // cur s2 fully matched, re-initialize j and check loop
                    curNo++; j = -1;
                    int v = val(n1, i, curS1);
                    if (v != -1) return v / n2;
                } if (curS1 == s1.length()-1) { s2st = j; break; } // reach end in cur s1, proceed to next s1
            }
        }
        return curNo / n2;
    }
}

// derived
class Solution {
    
    int proceed = 0;
    // e.g. st.get(i) = a -> there is a first-char-match at a[1]\th char of a[0]\th s1
    ArrayList<int[]> st = new ArrayList<int[]>();

    
    // cur 1st-char-match at curS1\th char of s1id\th s1, 
    private int val(int n1, int s1id, int curS1) {
        // check all prev char id in s1 where 1st-char-match occurs for loop detection
        int preface = -1, loop = 0; ArrayList<Integer> ref = new ArrayList<Integer>();
        for (int i = 0; i < st.size(); i++) if (st.get(i)[1] == curS1) preface = i;
        int[] res = {s1id, curS1}; st.add(res);
        if (preface == -1) return -1; // no loop
        
        // loop start at curS1\th char of stid\th s1 (curS1 = st.get(preface)[1])
        int stid = st.get(preface)[0], curid = 0, rowPreface;
        for (int i = preface; i < st.size(); i++) {
            if (st.get(i)[0] == s1id && st.get(i)[1] == curS1) loop = i;
            curid = st.get(i)[0]; // within loop, current match at curid\th s1
            if (curid-stid < ref.size()) ref.set(curid-stid, ref.get(curid-stid) + i - preface);
            else ref.add(i - preface);
        }
        // calculate ans; first check if preface-1\th match occurs at same s1 as preface\th match
        if (preface == 0) rowPreface = 0;
        else rowPreface = st.get(preface - 1)[0] == stid ? st.get(preface - 1)[0] - 1 : st.get(preface - 1)[0];
        int residue = (n1 - rowPreface) % (curid - stid);
        int left = residue == 0 ? 0 : ref.get(residue - 1);
        int fold = (n1 - rowPreface) / (curid - stid);
        return preface + (loop - preface) * fold + left;
    }
    
    // find char id (curS1) in cur s1 corresponds to cur char in s2
    private int next(ArrayList<Integer> cur, int curS1) {
        for (int k = 0; k < cur.size(); k++) {
            if (cur.get(k) > curS1) return cur.get(k); 
            else if (k == cur.size()-1) proceed = 1;
        }
        return curS1;
    }
    
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        ArrayList<Integer>[] dp = new ArrayList[26];
        for (int i = 0; i < 26; i++) dp[i] = new ArrayList<Integer>();
        for (int i = 0; i < s1.length(); i++) dp[s1.charAt(i)-'a'].add(i);   // store location for each char in s1
        
        int curNo = 0, curSt = -1, curS1 = -1, ed = 0, s2st = -1;
        for (int i = 1; i <= n1; i++, curSt = -1, proceed = 0, curS1 = -1) { // iterate thru s1
            for (int j = s2st+1; j < s2.length(); j++) {      // check char in s2 under cur s1
                if (dp[s2.charAt(j)-'a'].isEmpty()) return 0; // if s1 does not contain s2[j]
                curS1 = next(dp[s2.charAt(j)-'a'], curS1);    // update curS1
                if (proceed == 1) { s2st = j - 1; break; }    // all s2[j] in cur s1 are checked, proceed to next s1
                if (j == 0) {                                 // first char match for each s2
                    int v = val(n1, i, curS1);
                    if (v != -1) return v / n2;
                }
                if (j == s2.length()-1) { curNo++; ed = i; j = -1; } // cur s2 fully matched, re-initialize j
                if (curS1 == s1.length()-1) { s2st = j; break; }     // if reach end in cur s1, proceed to next s1
            }
        }
        return curNo / n2;
    }
}


//
class Solution {
    
    int proceed = 0;
    int[] ref;
    
    private int val(int i, int ed, int n1, int n2, int curNo) {
        int r = i == ed ? (n1-1) % (ed-1) : n1 % ed;
        int fold = i == ed ? (n1-1) / (ed-1) : n1 / ed;;
        int residu = r == 0 ? 0 : ref[r];
        return (curNo * fold + residu) / n2;
    }
    
    // find char id (curS1) in cur s1 corresponds to cur char in s2
    private int next(ArrayList<Integer> cur, int curS1) {
        for (int k = 0; k < cur.size(); k++) {
            if (cur.get(k) > curS1) return cur.get(k); 
            else if (k == cur.size()-1) proceed = 1;
        }
        return curS1;
    }
    
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        ref = new int[n1 + 1];
        ArrayList<Integer>[] dp = new ArrayList[26];
        for (int i = 0; i < 26; i++) dp[i] = new ArrayList<Integer>();
        // store location for each char in s1
        for (int i = 0; i < s1.length(); i++) dp[s1.charAt(i)-'a'].add(i);
        
        int curNo = 0, curSt = -1, st = -1, curS1 = -1, ed = 0, s2st = -1;
        for (int i = 1; i <= n1; i++, curSt = -1, proceed = 0, curS1 = -1) { // iterate thru s1
            for (int j = s2st+1; j < s2.length(); j++) { // check char in s2 under cur s1
                if (dp[s2.charAt(j)-'a'].isEmpty()) return 0; // if s1 does not contain s2[j]
                curS1 = next(dp[s2.charAt(j)-'a'], curS1);    // update curS1
                if (proceed == 1) { s2st = j - 1; break; }        // all s2[j] in cur s1 are checked, proceed to next s1
                if (j == 0) { if (curNo == 0) st = curS1; curSt = curS1; }
                
                // first loop finised, turn to calculate ans
                if (i != 1 && curSt == st) return val(i, ed, n1, n2, curNo);
                if (j == s2.length()-1) { curNo++; ed = i; j = -1; } // cur s2 fully matched, re-initialize j
                if (curS1 == s1.length()-1) { s2st = j; break; }     // if reach end in cur s1, proceed to next s1
            }
            if (st == -1) return 0;
            ref[i] = curNo;
        }
        return curNo / n2;
    }
}


// improved_bug exist
// it can be assured that total # of s2-match in s1 over n2 is the ans we basically
// trying to detect a loop, that is if a new first-char-match occurs at the same Loc
// in s1 as that of the very first first-char-match, it starts a loop
class Solution {
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        int[] ref = new int[n1 + 1];
        // ArrayList<Integer> test = new ArrayList<Integer>();
        HashMap<Integer, Integer> test = new HashMap<Integer, Integer>();
	// curNo is accumulated # of s2-match
        // st is id of char in s1 being the very first first-char-match
        // ed is id of s1 where last char in s2 is matched
	// cur is id of last char matched in s2
        int curNo = 0, st = -1, ed = 0;
        for (int i = 1, cur = 0, curSt = -1; i <= n1; i++, curSt = -1) {
            for (int j = 0; j < s1.length(); j++) {
                if (s1.charAt(j) != s2.charAt(cur)) continue; 
                if (cur == 0) { if (curNo == 0) st = j; curSt = j; test.put(i, curSt); } // test.add(curSt); }
                if (i != 1 && curSt == st) break; // first loop ended
                if (++cur == s2.length()) { cur = 0; curNo++; ed = i; }   
            }
            if (st == -1) return 0;
            ref[i] = curNo;
            if (i != 1 && curSt == st) {
                int r = i == ed ? (n1-1) % (ed-1) : n1 % ed; // # of s1 left
                int fold = i == ed ? (n1-1) / (ed-1) : n1 / ed;;
                int residu = r == 0 ? 0 : ref[r];
                return (curNo * fold + residu) / n2;
            }
        }
        // for (int i = 1; i < test.size(); i++)
        //    if (test.get(i) == 15) return i;
        for (int i = 2; i < 10000; i++)
            if (test.get(i) != null) return test.get(i);
        return curNo / n2;
    }
}

// naive - TLE
class Solution {
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        char[] sc1 = s1.toCharArray(), sc2 = s2.toCharArray();
        int prevNo = 0, res = 0, prevs1 = 0, curNo = 0;
        for (int i = 1, cur = 0; i <= n1; i++) {
            for (int j = 0; j < s1.length(); j++) {
                if (sc1[j] != sc2[cur]) continue;
                if (++cur == s2.length()) { 
                    if (curNo++ == 0) prevs1 = i;
                    cur = 0; 
                }
            }
        }
        return curNo / n2;
    }
}




# (I) Debug
// indep
// correct method
class Solution {
    
    public HashMap<Integer, Integer> getMaxRepetitions(String s1, int n1, String s2, int n2) {
        int[] ref = new int[n1 + 1];
        HashMap<Integer, Integer> test = new HashMap<Integer, Integer>();
        int curNo = 0, st = -1, ed = 0;
        for (int i = 1, cur = 0, curSt = -1; i <= n1; i++, curSt = -1) {
            for (int j = 0; j < s1.length(); j++) {
                if (s1.charAt(j) != s2.charAt(cur)) continue;
                if (curNo == 0) test.put(cur, j);
                if (cur == 0) { if (curNo == 0) st = j; curSt = j;  } // test.add(curSt); }
                if (i != 1 && curSt == st) break; // first loop ended
                if (++cur == s2.length()) { cur = 0; curNo++; ed = i; }
            }
        }
        return test;
    }
    
    public static String stringToString(String input) {
            return JsonArray.readFrom("[" + input + "]").get(0).asString();
    }        
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            String s1 = stringToString(line);
            line = in.readLine();
            int n1 = Integer.parseInt(line);
            line = in.readLine();
            String s2 = stringToString(line);
            line = in.readLine();
            int n2 = Integer.parseInt(line);
            
            HashMap<Integer, Integer> ret = new Solution().getMaxRepetitions(s1, n1, s2, n2);
            
            //String out = String.valueOf(ret);
            for (int i = 0; i < s2.length(); i++)
                System.out.print(ret.get(i) + "\n");
        }
    }        
}


char id in s1 where each char in s2 is matched


15	15
44	44
10	44*
21	21
24	24
59	59
71	71
87	87
99	99
8	8
14	14
47	47
39	47*
39	39
49	49
77	77
98	98
40	98*
26	26
64	64
39	64*
49	7 *
46	46
5	46*
20	20
47	47

// update to locate char in s1 without iterating thru each
class Solution {
    
    int proceed = 0;
    int[] ref;
    
    private int val(int i, int ed, int n1, int n2, int curNo) {
        int r = i == ed ? (n1-1) % (ed-1) : n1 % ed;
        int fold = i == ed ? (n1-1) / (ed-1) : n1 / ed;;
        int residu = r == 0 ? 0 : ref[r];
        return (curNo * fold + residu) / n2;
    }
    
    // find char id (curS1) in cur s1 corresponds to cur char in s2
    private int next(ArrayList<Integer> cur, int curS1) {
        for (int k = 0; k < cur.size(); k++) {
            if (cur.get(k) > curS1) return cur.get(k); 
            else if (k == cur.size()-1) proceed = 1;
        }
        return curS1;
    }
    
    public HashMap<Integer, Integer> getMaxRepetitions(String s1, int n1, String s2, int n2) {
        HashMap<Integer, Integer> test = new HashMap<Integer, Integer>();
        ref = new int[n1 + 1];
        ArrayList<Integer>[] dp = new ArrayList[26];
        for (int i = 0; i < 26; i++) dp[i] = new ArrayList<Integer>();
        for (int i = 0; i < s1.length(); i++) dp[s1.charAt(i)-'a'].add(i);
        
        int curNo = 0, curSt = -1, curS1 = -1, ed = 0, s2st = -1;
        for (int i = 1; i <= n1; i++, curSt = -1, proceed = 0, curS1 = -1) {
            for (int j = s2st+1; j < s2.length(); j++) {
                curS1 = next(dp[s2.charAt(j)-'a'], curS1);
		if (proceed != 1) test.put(j, curS1);
                if (proceed == 1) { s2st = j - 1; break; }
                if (j == s2.length()-1) { test.put(j, curS1); return test; }
                if (curS1 == s1.length()-1) { s2st = j; break; }
            }
            ref[i] = curNo;
        }
        return test;
    }
    
    public static String stringToString(String input) {
            return JsonArray.readFrom("[" + input + "]").get(0).asString();
    }        
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            String s1 = stringToString(line);
            line = in.readLine();
            int n1 = Integer.parseInt(line);
            line = in.readLine();
            String s2 = stringToString(line);
            line = in.readLine();
            int n2 = Integer.parseInt(line);
            
            HashMap<Integer, Integer> ret = new Solution().getMaxRepetitions(s1, n1, s2, n2);
            
            //String out = String.valueOf(ret);
            for (int i = 0; i < s2.length(); i++)
                System.out.print(ret.get(i) + "\n");
        }
    }        
}


// update method to calculate loop
class Solution {
    
    int proceed = 0;
    ArrayList<int[]> st = new ArrayList<int[]>();

     
    private int val(int n1, int s1id, int curS1) {
        int preface = -1, loop = 0; ArrayList<Integer> ref = new ArrayList<Integer>();
        for (int i = 0; i < st.size(); i++) if (st.get(i)[1] == curS1) preface = i;
        int[] res = {s1id, curS1}; st.add(res);
        if (preface == -1) return -1;
        int stid = st.get(preface)[0], curid = 0, rowPreface;
        for (int i = preface; i < st.size(); i++) {
            if (st.get(i)[0] == s1id && st.get(i)[1] == curS1) loop = i;
            curid = st.get(i)[0];
            if (curid-stid < ref.size()) ref.set(curid-stid, ref.get(curid-stid) + i - preface);
            else ref.add(i - preface);
        }
        if (preface == 0) rowPreface = 0;
        else rowPreface = st.get(preface - 1)[0] == stid ? st.get(preface - 1)[0] - 1 : st.get(preface - 1)[0];
        int residue = (n1 - rowPreface) % (curid - stid);
        int left = residue == 0 ? 0 : ref.get(residue - 1);
        int fold = (n1 - rowPreface) / (curid - stid);
        return preface + (loop - preface) * fold + left;
    }
    
    private int next(ArrayList<Integer> cur, int curS1) {
        for (int k = 0; k < cur.size(); k++) {
            if (cur.get(k) > curS1) return cur.get(k); 
            else if (k == cur.size()-1) proceed = 1;
        }
        return curS1;
    }
    
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        ArrayList<Integer>[] dp = new ArrayList[26];
        for (int i = 0; i < 26; i++) dp[i] = new ArrayList<Integer>();
        for (int i = 0; i < s1.length(); i++) dp[s1.charAt(i)-'a'].add(i);
        
        int curNo = 0, curSt = -1, curS1 = -1, ed = 0, s2st = -1;
        for (int i = 1; i <= n1; i++, curSt = -1, proceed = 0, curS1 = -1) { // iterate thru s1
            for (int j = s2st+1; j < s2.length(); j++) {      // check char in s2 under cur s1
                if (dp[s2.charAt(j)-'a'].isEmpty()) return 0; // if s1 does not contain s2[j]
                curS1 = next(dp[s2.charAt(j)-'a'], curS1);    // update curS1
                if (proceed == 1) { s2st = j - 1; break; }
                if (j == 0) {
                    int v = val(n1, i, curS1);
                    if (v != -1) return v / n2;
                }
                if (j == s2.length()-1) { curNo++; ed = i; j = -1; }
                if (curS1 == s1.length()-1) { s2st = j; break; }
            }
        }
        return curNo / n2;
    }
    
    public static String stringToString(String input) {
            return JsonArray.readFrom("[" + input + "]").get(0).asString();
    }        
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            String s1 = stringToString(line);
            line = in.readLine();
            int n1 = Integer.parseInt(line);
            line = in.readLine();
            String s2 = stringToString(line);
            line = in.readLine();
            int n2 = Integer.parseInt(line);
            
            Solution sol = new Solution();
            int ret = sol.getMaxRepetitions(s1, n1, s2, n2);
            ArrayList<int[]> st = sol.st;
            System.out.println(st.size());
            for (int i = 0; i < st.size(); i++)
                System.out.print(st.get(i)[0] + ", " + st.get(i)[1] + "\n");
        }
    }        
}

