class Solution {
    
    public int calculateMinimumHP(int[][] d) {
        int r = d.length, c = d[0].length;
        int[][] ref = new int[r][c];
        for (int i = 0; i < r; i++) Arrays.fill(ref[i], Integer.MAX_VALUE);
        ref[r - 1][c - 1] = d[r - 1][c - 1] >= 0 ? 1 : 1 - d[r - 1][c - 1];
        for (int i = r - 1; i >= 0; i--) {
            for (int j = c - 1; j >= 0; j--) {
                if (i + 1 < r) ref[i][j] = Math.min(ref[i][j], Math.max(1, ref[i + 1][j] - d[i][j]));
                if (j + 1 < c) ref[i][j] = Math.min(ref[i][j], Math.max(1, ref[i][j + 1] - d[i][j]));
            }
        }
        return ref[0][0];
    }
}


class Solution {
    public int calculateMinimumHP(int[][] mat) {
        if(mat.length == 0)
            return 0;
        int m = mat.length, n = mat[0].length;
        mat[m-1][n-1] = Math.max(1,-1*mat[m-1][n-1]+1);
        for(int i = m-1; i >=0 ;i--)
        {
            for(int j = n-1; j >=0 ;j--)
            {
                if(i == m-1 && j == n-1)
                    continue;
                else if(i == m-1)
                    mat[i][j] = Math.max(1,mat[i][j+1] - mat[i][j]);
                else if(j == n-1)
                    mat[i][j] = Math.max(1,mat[i+1][j] - mat[i][j]);
                else
                    mat[i][j] = Math.max(1,Math.min(mat[i+1][j],mat[i][j+1])-mat[i][j]);
            }
        }
        return mat[0][0];
    }
}