**** Specification ****
You have n super washing machines on a line. Initially, each washing machine has 
some dresses or is empty. For each move, you could choose any m (1 ≤ m ≤ n) 
washing machines, and pass one dress of each washing machine to one of its adjacent
washing machines at the same time. Given an integer array representing the number 
of dresses in each washing machine from left to right on the line, you should find
the minimum number of moves to make all the washing machines have the same number
of dresses. If it is not possible to do it, return -1.

Example1
Input: [1,0,5]
Output: 3
Explanation: 
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
3rd move:    2     1 <-- 3    =>    2     2     2   

Example2
Input: [0,3,0]
Output: 2
Explanation: 
1st move:    0 <-- 3     0    =>    1     2     0    
2nd move:    1     2 --> 0    =>    1     1     1     

Example3
Input: [0,2,0]
Output: -1
Explanation: 
It's impossible to make all the three washing machines have the same number of dresses. 
Note:
The range of n is [1, 10000].
The range of dresses number in a super washing machine is [0, 1e5].


**** Testcases ****
[1,4,3,6,7,5,2]: 4
[1,4,3,8,4,6,2]
[6,1,4,3,7,5,2]: 3
[4,3,4,3,7,5,2]
[6,1,5]: 2

[7,6,8,4,6,4,5,9,4,6,7]: 3
[7,10,9,12,0,9,11,4,10]: 6


**** Ideas ****
(1) We count the total # of donations to the left and right at each machine if exist. 
The ans should be largest of such donations. This method examines the movement thru
each machine which is necessary for the machine in quesiton.

	Induction proof: for current machine i, we assume max# of moves are required to
	restore the balance of subarray [0, i-1] 
	(i) machine i accept a# from left and donate totally b# to its right:
	The notable point is that the b-a# donations solely from i rightward and the 
	delivery of a# dresses thru i cannot occur simultaneously, they must occur one
	by one. Moreover, the a# rightward is covered by max#, which means max-a# moves
	in [0, i-1] are totally independent from b-a# moves. This is the case because
	only when the a# is not happening can we make the b-a# moves. And no matter 
	whether the a# is occurring on their own or there are other simulta movements
	in [0, i-1] they are occurring.
	Therefore, we compare max-a# and b-a# to see which one is covered by which. The
	larger one would guarantee all movements needed outside of the a# from [0, i-1]
	to [i]. Thus, max_new = Math.max(max-a, b-a) + a = Math.max(max, b).
	The max_new we obtain is the smallest # of moves to balance[0, i] with b dresses
	moving right

	(ii) i donate a# to left and accept b# from its right
	The same idea applies. max_new is ... accepting b# from right
	
	(iii) i donate a# to left and donate b# to its right
	This time, max# is calculated assuming a# have been borrowed from i by [0, i-1]
	Since a# and b# this time are still independent, we again find the free movement
	in [0, i-1] not interfered with a#. The next follows the same idea.

	(iv) i accept a# from left and accept b# from right
	We actually can ignore such case as max# now recorded # of moves for a# to be
	deposited to i. And since we are still accepting dresses from right, there are
	still machines following. And at machine i+1, new max calculated would cover
	the b# now accepted.

	(v) If i is not interacting with any side, that is simply the case where
	independent moves occur freely, e.g. i accept a# from left but not interacting
	with right. Then max actually will not change. 

(2) The Running balance. If you start from the first washing machine and traverse to 
the last machine, a running balance can be calculated. The absolute value of the 
running balance at any time (let's call that MAX_RUNNING_BALANCE) tells you that at 
least that amount of moves has to be made. That is based on the fact that during a 
move only 1 dress can move from a machine. The running balance can be calculated from
left to right or from right to left; taking abs of the difference will output the same
max value.

The running balance only accounts for the flow in one direction. However, dresses can 
flow in both directions. Because of this, we need to account the max offload which is 
the number of dresses - the expected average (let's call this MAX_OFFLOAD). This will 
tell you that at any machine there is at least that MAX_OFFLOAD moves.

(3)
对位置k上的洗衣机来说，如果左边k个洗衣机中（下标从0开始）原有衣服总数小于avg*k，表明左
边k个洗衣机作为整体最终需要从右边洗衣机（包含位置k）中获取衣服，而获取衣服必定需要通过
位置k的洗衣机，右边同理。

这里拿lCnt表示位置k左边所有洗衣机最终向右边洗衣机（包含位置k）输送的衣服数，如果lCnt小
于0，表示左边洗衣机最终需要从右边洗衣机中获取衣服，同理拿rCnt表示位置k右边所有洗衣机最
终向左边洗衣机（包含位置k）中输送的衣服数。lCnt和rCnt在知道了avg之后很容易计算，这样通
过判断lCnt和rCnt的正负即可得出位置k上洗衣机的最小操作数。



如果 lCnt>0 && rCnt>0 

?表明位置k需要同时从两侧获取衣服，两侧可以同时进行，所以位置k上最
小操作数为max(lCnt, rCnt)；



如果lCnt<0 && rCnt<0

表明位置k同时向两侧输出衣服，两侧不能同时进行，所以位置k上最小操作
数为-lCnt-rCnt；



其他情况

表明位置k需要从一侧获取衣服，然后向另一侧输出衣服，两侧可以同时进行，所以位置
k上最小操作数为max(abs(lCnt), abs(rCnt))。


// naive
As is indicated by the 5th testcase, one washing machine can accept more than one
dresses at the same time but can only pass or donate one at one time.

We can go thru the array until the very first position i where sum of elements from 1
to i is larger than balanced total. This means that machine i should be giving out
dresses both left and rightward. For instance, in example 1 above, 7 should give 2
dresses to the left and 1 to the right. Further, we can actually add the two dresses
from 7 to 6 and one dress from 7 to 5, without changing the result. This is because
wherever the dresses are finally to be added, those passing left should go across 6,
creating a temporary state of holding 8 dresses and the same holds for right moving.
In such case, dresses passing left and right ward should be added together being 
the result.

For a specific machine that need dresses from both side, 

Take [1,4,3,8] for instance. To balance 1, to the very least, we need three movements
to allocate three dresses to machine 0. This leaves only one dress for machine 1 and 
we also need three dresses to balance it. Essentially, this is the same as to allocate
three dresses directly to machine 0 from 2, which is left with 0 dress. We then move
4 dresses from machine 3 to 2 for balance. In total, we can treat this as the movement
of 4 elements from machine 3 leftward, with one dress left at machine 2 and the rest 
going to machine 0.


**** Code ****
// others-1
public class Solution {
    public int findMinMoves(int[] machines) {
        int n = machines.length, sum = 0;
        for (int num : machines) sum += num;
        if (sum % n != 0) return -1;
        int avg = sum / n, move = 0;
        int[] leftSums = new int[n], rightSums = new int[n];
        for (int i = 1; i < n; i ++) leftSums[i] = leftSums[i-1] + machines[i-1];
        for (int i = n - 2; i >= 0; i --) rightSums[i] = rightSums[i+1] + machines[i+1];
        for (int i = 0, left = 0, right = 0; i < n; i++, left = 0, right = 0) {
            int expLeft = i * avg, expRight = (n - i - 1) * avg;
            if (expLeft > leftSums[i]) left = expLeft - leftSums[i];
            if (expRight > rightSums[i]) right = expRight - rightSums[i];
            move = Math.max(move, left + right);
        }
        return move;
    }
}

// others-2
class Solution {
    public int findMinMoves(int[] machines) {
        int moves = 0, total = 0, avg = total/machines.length;
        for (int clothes: machines) total += clothes;
        if (total % machines.length != 0) return -1;
        int maxRunningBalance = 0, maxOffLoad = 0, runningBalance = 0;
        for(int clothes: machines) {
            int offload = clothes - avg;
            runningBalance += offload;
            maxRunningBalance = Math.max(maxRunningBalance, Math.abs(runningBalance));
            maxOffLoad = Math.max(maxOffLoad, offload);
        }
        return Math.max(maxOffLoad, maxRunningBalance);
    }
}

// others-3
class Solution {
    
    public int findMinMoves(int[] machines) {
        if(machines.empty()) return 0;
        int n = machines.size(), minMv = INT_MIN, avg;
        vector<int> sum(n+1, 0);
        
        for(int i=0; i<n; ++i)
            sum[i+1] = sum[i] + machines[i];
        if(sum.back() % n) return -1;
        avg = sum.back() / n;
        
        for(int i=0; i<n; ++i) {
            int lCnt = sum[i] - avg * i;
            int rCnt = sum.back() - sum[i+1] - avg * (n - 1 - i);
            if(lCnt > 0 && rCnt > 0)
                minMv = max(minMv, max(lCnt, rCnt));
            else if(lCnt < 0 && rCnt < 0)
                minMv = max(minMv, 0 - lCnt - rCnt);
            else
                minMv = max(minMv, max(abs(lCnt), abs(rCnt)));
        }
        
        return minMv;
    }
}

// others-3-cpp
class Solution {
public:
    int findMinMoves(vector<int>& machines) {
        if(machines.empty()) return 0;
        int n = machines.size(), minMv = INT_MIN, avg;
        vector<int> sum(n+1, 0);
        
        for(int i=0; i<n; ++i)
            sum[i+1] = sum[i] + machines[i];
        if(sum.back() % n) return -1;
        avg = sum.back() / n;
        
        for(int i=0; i<n; ++i) {
            int lCnt = sum[i] - avg * i;
            int rCnt = sum.back() - sum[i+1] - avg * (n - 1 - i);
            if(lCnt > 0 && rCnt > 0)
                minMv = max(minMv, max(lCnt, rCnt));
            else if(lCnt < 0 && rCnt < 0)
                minMv = max(minMv, 0 - lCnt - rCnt);
            else
                minMv = max(minMv, max(abs(lCnt), abs(rCnt)));
        }
        
        return minMv;
    }
};