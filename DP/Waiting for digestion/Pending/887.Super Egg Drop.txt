

   1   2   3   4   5   6   7   8   9   10    11    12    13    14     15     16     17     18     19     20     21     22     23     24     25
1  1   2   3   4   5   6   7   8   9   10    11    12    13    14     15     16     17     18     19     20     21     22     23     24     25

****
2  1   2   2   3   3   3   4   4   4    4     5     5     5     5      5      6      6      6      6      6      6      7      7      7      7
                      2,3                                             4,10                                      
          1,1                          3,6                                                                      5,15                                           
****
3  1   2   2   3   3   3   3   4   4    4     4     4     4     4      5      5      5      5      5      5      5      5      5      5      5
          1,1                                                  6,7                                 
                          3,3                                                                                                              10,14                 
****
4  1   2   2   3   3   3   3   4   4    4     4     4     4     4      4      5      5      5      5      5      5      5      5      5      5
          1,1                                                         7,7                                 
                          3,3                                                                                                                           
****


Levels  Tests  
eggs    1    2      3      4      5       6
   1    1    2      3      4      5       6
   2    1  1,1,1  2,3,1  3,6,1  4,10,1  5,15,1
   3...

// TLE
class Solution {
    public int superEggDrop(int k, int n) {
        if (k == 1) return n;
        int exp = 1, e = 0;
        while (exp * 2 <= n) e++;
        if (k >= e) return e + 1;
        
        int[] ref = new int[n];
        for (int i = 0; i < n; i++) ref[i] = i + 1;
        for (int i = 1; i < k; i++) {
            int prev = 1, hold;
            for (int j = 1; j < n; j++) {
                hold = ref[j];
                ref[j] = prev + ref[j - 1] + 1;
                prev = hold;
            }
        }
        return ref[n - 1];
    }
}





0  1(0)        2(1)        3(2)                          

1      3(0)        6(1)        10(2)

2          7(0)        14(1)        25(2)

3             15(0)        30(1)        56(2)  

4                 31(0)        62(1)        119(2)

5

6

7

8

// 5ms 100%
class Solution {
    public int superEggDrop(int k, int n) {
        if (k == 1) return n;
        int exp = 2, e = 0, a = k - 1, st = 0, col = 0;
        // more eggs than needed for binary search
        while (exp <= n) { e++; exp *= 2; }
        if (k >= e + 1) return e + 1;
        
        int[] ref = new int[k];
        ref[0] = 1;
        for (int i = 1; i < k; i++) ref[i] = 2 * ref[i - 1] + 1;
        // if least (1, 3, 7, 15, ...) is greater than n
        if (ref[a] > n) {
            while(a >= 1 && ref[a - 1] >= n) a--;
            return a + 1;            
        }
        // otherwise
        while (col <= n) {
            if (ref[k - 1] >= n) return col + k;
            ref[0] = ++col + 1;
            for (int i = 1; i < k; i++) ref[i] = ref[i] + ref[i - 1] + 1;
        }
        return 0;
    }
}