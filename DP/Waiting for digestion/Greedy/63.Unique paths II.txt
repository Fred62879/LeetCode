**** Specification ****
A robot is located at the top-left corner of a m x n grid. The robot can only
move either down or right at any point in time. The robot is trying to reach 
the bottom-right corner of the grid (marked 'Finish' in the diagram below).
Now consider if some obstacles are added to the grids. How many unique paths 
would there be?


**** Testcases ****
[[0,0,0,0,0],[0,0,1,1,0],[0,0,0,1,0],[0,1,0,0,0]]


**** Code ****
// 2nd visit, Mar 15 2019
class Solution {
    public int uniquePathsWithObstacles(int[][] og) {
        if (og[0].length == 0 || og[0][0] == 1) return 0;
        int n = og.length, m = og[0].length;
        if (og[n-1][m-1] == 1) return 0;
        og[n-1][m-1] = 1;
        for (int i = n - 2; i >= 0; i--) og[i][m-1] = og[i][m-1] == 1 ? 0 : og[i+1][m-1];
        for (int j = m - 2; j >= 0; j--) og[n-1][j] = og[n-1][j] == 1 ? 0 : og[n-1][j+1];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = m - 2; j >= 0; j--) {
                if (og[i][j] == 1) og[i][j] = 0;
                else og[i][j] = og[i+1][j] + og[i][j+1];
            }
        }
        return og[0][0];
    }
}


// 1st attempt, dfs_tle
private int solver(int[][] og, int r, int c, int cr, int cc) {
        if (cr == r - 1 && cc == c - 1 && og[cr][cc] == 0) return 1;
        if (cr >= r || cc >= c || og[cr][cc] == 1) return 0;
        return solver(og, r, c, cr + 1, cc) + solver(og, r, c, cr, cc + 1);
    }
    
    public int uniquePathsWithObstacles(int[][] og) {
        int r = og.length;
        int c = og[0].length;
        if (r == 0 || c == 0 || og[0][0] == 1) return 0;
        return solver(og, r, c, 0, 0);
    }
