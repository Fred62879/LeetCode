**** Specification ****
Given two words word1 and word2, find the minimum number of operations
required to convert word1 to word2. You have the following 3 operations
permitted on a word:

Insert a character
Delete a character
Replace a character

Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


**** Testcases ****
"asdsdf"
""

""
"a"

"zoologicoarchaeologist"
"zoogeologist"

"pneumonoultramicroscopicsilicovolcanoconiosis"
"ultramicroscopically"


**** Code ****
// others
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] res = new int[n + 1][m + 1];
        for (int i = 0; i <= m; i++) res[n][i] = m - i;
        for (int i = 0; i <= n; i++) res[i][m] = n - i;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {

                int a = Math.min(res[i + 1][j], Math.min(res[i][j + 1], res[i + 1][j + 1]));
                if (word2.charAt(i) == word1.charAt(j)) res[i][j] = res[i + 1][j + 1];
                else res[i][j] = a + 1;
            }
        }
        return res[0][0];
    }
}

// 2nd visit Feb 4 2019_error
class Solution {
    
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        if (len1 == 0) return len2;
        if (len2 == 0) return len1;
        int[][] dp = new int[len1][len2];
        dp[0][0] = word1.charAt(0) == word2.charAt(0) ? 0 : 1;
        for (int j = 1; j < len2; j++)
            dp[0][j] = (word1.charAt(0) == word2.charAt(j) ? 0 : 1) + dp[0][j-1];
        for (int i = 1; i < len1; i++)
            dp[i][0] = (word2.charAt(0) == word1.charAt(i) ? 0 : 1) + dp[i-1][0];
        for (int i = 1; i < len1; i++) {
            for (int j = 1; j < len2; j++) {
                int del = dp[i-1][j] + 1;
                int cur = word1.charAt(i) == word2.charAt(j) ? 0 : 1;
                int min = cur + Math.min(dp[i][j-1], dp[i-1][j-1]);
                dp[i][j] = Math.min(min, del);
            }
        }
        return dp[len1-1][len2-1];
    }
}