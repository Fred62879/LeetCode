**** Specification ****
Given two integers n and k, find how many different arrays consist of numbers from 1
to n such that there are exactly k inverse pairs. We define an inverse pair as 
following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's
an inverse pair; Otherwise, it's not. Since the answer may be very large, the answer
should be modulo 109 + 7.

Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse 
pair.

Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: 
The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.

Note:
The integer n is in the range [1, 1000] and k is in the range [0, 1000].


**** Ideas ****
We can do a bottom-up dp. Similar with LT95, if we were asked to return all forms of
arrays of length n with k inverse pairs, we build from the very bottom. For pair-n,k:
1,0: 1                    4,0: 1234
2,0: 12(1,0)              4,1: 1243(3,0)/2134(3,1)/1324(3,1)
2,1: 21(1,0)              4,2: 1423(3,0)/2143(3,1)/1342(3,1)/3214(3,2)/3124(3,2)
3,0: 123(2,0)             4,3: 4123(3,0)/2413(3,1)/1432(3,1)/3421(3,2)/3412(3,2)/3214(3,3)
3,1: 213(2,1)/132(2,0)    4,4: 4213(3,1)/4132(3,1)/2431(3,2)/3421(3,2)/3241(3,3)      
3,2: 231(2,1)/312(2,0)    4,5: 4231(3,2)/4312(3,2)/3421(3,3)
3,3: 321(2,1)             4,6: 4321(3,3)

1: 1
2: 1 1
3: 1 2 2 1
4: 1 3 5 6 5 3 1
5: 1 4 9 15 20 22 20  15   9  4
6:1 5 14 29 49 71 90 101 101 90 71 49 29 14 5 1
7:



**** Code ****
//
// faster, less space efficient
class Solution {
public:
    int kInversePairs(int n, int k) {
        const int mod = 1e9+7;        
        vector<vector<int>> dp(n + 1, vector<int>(k+1, 0)); 
        for(int i=0; i<=n; ++i)dp[i][0] = 1;
 
        for(int i = 1; i <= n; ++i){   
            for(int j = 1; j <= min(k, i*(i-1)/2); ++j){ 
                dp[i][j] = (dp[i][j-1] + dp[i-1][j])%mod;
                if(j>=i)  dp[i][j] =(dp[i][j] - dp[i-1][j-i] + mod) % mod;
            } 
        }
        return dp[n][k];
    }

};

// original idea
class Solution {
    public int kInversePairs(int n, int k) {
        int[] prev = new int[1], update;
        prev[0] = 1;
        for (int i = 1, pl = 1; i <= n; i++, pl = prev.length) {
            update = new int[i - 1 + pl];
            for (int j = 0; j < i - 1 + pl; j++) {
                if (i == n && j > k) break;
                int st = j - (i - 1) <= 0 ? 0 : j - (i - 1);
                for (int m = st; m < Math.min(pl, j + 1); m++)
                    update[j] += prev[m];
            }
            prev = update;
        }
        return k >= prev.length ? 0 : prev[k];
    }
}

// improved
class Solution {
    
    long p = 1000000007;
    
    public int kInversePairs(int n, int k) {
        long[] prev = new long[k+1], update;
        prev[0] = (long) 1;
        for (int i = 1, cl = 1; i <= n; i++, cl = i - 1 + cl) {
            update = new long[k+1]; update[0] = (long) 1;
            for (int j = 1; j < Math.min(cl, k + 1); j++) {
                long offset = j - (i - 1) <= 0 ? (long) 0 : prev[j - i];
                long last = j >= prev.length ? (long) 0 : prev[j];
                update[j] = ((long) update[j - 1] + last + p - offset) % p;
            }
            prev = update;
        }
        return k > prev.length ? 0 : (int) prev[k];
    }
}
