## Specification
Given an unsorted array of integers, find the length of the longest consecutive elements
sequence. Your algorithm should run in O(n) complexity.

Example:
Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.


## Code
// (3) sort first, even faster
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int ans = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            int cur = 1;
            while (i < n - 1 && abs(nums[i + 1] - nums[i]) <= 1)
                if (nums[i] != nums[++i]) cur++;
            ans = max(ans, cur);
        }
        return ans;
    }
};

// (2) derived
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> ref(nums.begin(), nums.end());
        int ans = 0, n = nums.size();
        for (int i : ref) {
            int cur = 1, cp = i;
            if (ref.find(cp - 1) != ref.end()) continue;
            while (ref.find(++cp) != ref.end()) cur++;
            ans = max(ans, cur);
        }
	/*
	for(auto it = uset.begin(); it != uset.end(); ++it) {
            if(uset.find(*it + 1) == uset.end()) {
                int tmp = *it - 1;
                while(uset.find(tmp) != uset.end()) --tmp;
                best = max(best, *it - tmp);
            }
        }
	*/
        return ans;
    }
};


// (1) indep
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> ref(nums.begin(), nums.end());
        int ans = 0, n = nums.size();
        unordered_map<int, int> marked;
        for (int i : nums) marked[i] = 0;
        for (int i : ref) {
            if (marked[i]) continue;
            int cur = 1, cp = i;
            while (ref.find(--cp) != ref.end()) { cur++; marked[cp] = 1; }
            cp = i;
            while (ref.find(++cp) != ref.end()) { cur++; marked[cp] = 1; }
            ans = max(ans, cur);
        }
        return ans;
    }
};
