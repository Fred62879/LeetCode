## Specification
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]). You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?



## Code
// others_concise
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l = 0, r = nums.size()-1;
        
        while (l <= r) {
            while (l < r && nums[l] == nums[l + 1]) l++;
            while (r > l && nums[r] == nums[r - 1]) r--;
            int mid = (l+r) / 2;
            if (target == nums[mid]) return true;
            
            if (nums[mid] > nums[r]) { // rotated
                if (target < nums[mid] && target >= nums[l]) r = mid - 1;
                else l = mid + 1;
            } else if (nums[mid] < nums[l]) { // rotated
                if (target > nums[mid] && target <= nums[r]) l = mid + 1;
                else r = mid - 1;
            } else { // normal bs
                if (target < nums[mid]) r = mid - 1;
                else l = mid + 1;
            }
        }
        return false;
    }
};

// others_concise
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int lo = 0, hi = nums.size() - 1;
        while(lo <= hi) {
            int mid = (lo + hi) / 2;
            if (nums[mid] == target) return true;
            
            if (nums[mid] > nums[lo]) {
                if (target < nums[mid] && target >= nums[lo]) hi = mid - 1;
                else lo = mid + 1;
            } else if (nums[mid] < nums[lo]) {
                if (target > nums[mid] && target <= nums[hi]) lo = mid + 1;
                else hi = mid - 1;
            } else lo++;
        }
        return false;
    }
};

// indep
class Solution {
public:
    int large, target;
    
    // whether target exists within lo - hi
    int solve(int lo, int hi, vector<int>& nums) {
        if (lo > hi) return 0;
        int mid = (lo + hi) / 2;
        if (nums[mid] == target) return 1;
        if (nums[lo] > nums[hi]) { // (I) lo ~ hi spanning rotated array
            if (large) { // (i) target element in larger half
                if (nums[mid] < nums[lo] || target < nums[mid]) hi = mid - 1;
                else lo = mid + 1;
            } else { // (ii) smaller half
                if (nums[mid] > nums[hi] || target > nums[mid]) lo = mid + 1;
                else hi = mid - 1;
            }
        } else if (nums[lo] < nums[hi]) { // (II) lo ~ hi spanning sorted array
            if (nums[mid] < target) lo = mid + 1;
            else hi = mid - 1;
        } else { // (III) lo ~ hi spanning array with unsured identity
            if (nums[mid] == nums[lo]) return solve(lo, mid - 1, nums) || solve(mid + 1, hi, nums);
            else if (nums[mid] > nums[lo]) {
                if (!large || target > nums[mid]) lo = mid + 1;
                else hi = mid - 1;
            } else {
                if (large || target < nums[mid]) hi = mid - 1;
                else lo = mid + 1;
            }
        }
        return solve(lo, hi, nums);
    }
    
    bool search(vector<int>& nums, int target) {
        int n = nums.size(), lo = 0, hi = n - 1;
        if (!n) return false;
        if (target == nums[0] || target == nums[n-1]) return true;
        
        this->target = target;
        large = target > nums[0] ? 1 : 0;
        return solve(0, n - 1, nums);
    }
};
