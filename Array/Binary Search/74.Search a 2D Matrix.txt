## Specification
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties: Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row.

Example 1:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Example 2:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


## Code
// binarySearch indep
class Solution {
public:
    int n, m;
    
    int binarySearch(int target, vector<vector<int>>& matrix) {
        int lo = 0, hi = n - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (matrix[mid][0] == target) return -1;
            if (matrix[mid][0] > target) hi = mid - 1;
            else if (matrix[mid][m-1] == target) return -1;
            else if (matrix[mid][m-1] > target) return mid;
            else lo = mid + 1;
        }
        return matrix[lo][0] <= target && matrix[lo][m-1] >= target ? lo : -2;
    }
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0 || matrix[0].size() == 0) return false;
        n = matrix.size(), m = matrix[0].size();
        int row = binarySearch(target, matrix);
        if (row == -1) return true;
        if (row == -2) return false; // target < min or > max
        cout << row;
        auto col = lower_bound(matrix[row].begin(), matrix[row].end(), target);
        if (col == matrix[row].end()) return false;
        return matrix[row][col - matrix[row].begin()] == target;
    }
};
