## Specification
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]). Find the minimum element. The array may contain duplicates.

Example 1:
Input: [1,3,5]
Output: 1

Example 2:
Input: [2,2,2,0,1]
Output: 0

Note:
This is a follow up problem to Find Minimum in Rotated Sorted Array.
Would allow duplicates affect the run-time complexity? How and why?


## Testcases
[3,3,3,1]
[3,3,3,3,3,3,3,3,1,3]


## Code
// indep
class Solution {
public:
    // find entry that violates ascending order or return -1 if not find
    int solve(vector<int>& nums, int lo, int hi) {
        if (lo >= hi || nums[lo] < nums[hi]) return -1;
        // boundary not duplicate
        if (nums[lo] > nums[hi]) {
            int cl = lo, ch = hi;
            while (cl != ch) {
                int mid = (cl + ch) / 2;
                if (mid < ch && nums[mid] > nums[mid + 1]) return mid + 1;
                if (mid > cl && nums[mid] < nums[mid - 1]) return mid;
                if (nums[mid] > nums[hi]) cl = mid + 1;
                else if (nums[mid] < nums[lo]) ch = mid - 1;
            }
            return cl;
        }
        // boundary identical - nums[lo] == nums[hi]
        int mid = (lo + hi) / 2;
        if (mid < hi && nums[mid] > nums[mid + 1]) return mid + 1;
        if (mid > lo && nums[mid] < nums[mid - 1]) return mid;
        int a = solve(nums, lo, mid - 1), b = solve(nums, mid + 1, hi);
        return a == -1 ? b : a;
    }
    
    int findMin(vector<int>& nums) {
        int sz = nums.size();
        if (nums[0] < nums[sz - 1]) return nums[0];
        int ans = solve(nums, 0, sz - 1);
        return ans == -1 ? nums[0] : nums[ans];
    }
};
