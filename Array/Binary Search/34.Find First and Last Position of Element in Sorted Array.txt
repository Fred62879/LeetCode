## Specification
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value. Your algorithm's runtime complexity must be in the order of O(log n). If the target is not found in the array, return [-1, -1].

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


## Code
# Binary Search
// iterator_others
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        auto it1 = lower_bound(nums.begin(), nums.end(), target);
        auto it2 = lower_bound(nums.begin(), nums.end(), target + 1);
        if (it1 != nums.end() && *it1 == target)
            return { it1 - nums.begin(), it2 - nums.begin() - 1 };
        return { -1, -1 };
    }
};

// indep
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size(), lo = 0, hi = n - 1;
        if (n == 0) return { -1, -1 };
        
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (nums[mid] == target) {
                lo = hi = mid;
                while (nums[lo] == target && lo > 0 && nums[lo] == nums[lo - 1]) lo--;
                while (nums[hi] == target && hi < n - 1 && nums[hi] == nums[hi + 1]) hi++;
                return { lo, hi };
            }
            else if (nums[mid] > target) hi = mid - 1;
            else lo = mid + 1;
        }
        return {-1, -1};
    }
};
