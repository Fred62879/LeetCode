## Specification
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array. Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1



## Idea
When doing the binary search, first evaluating whether the lo and hi pointers span an rotated or sorted array. If sorted, then this is a simple bs problem. Otherwise, we need to evaluate the relation between the target and the three pointer-lo, hi, mid, to decide how to update the lo and hi pointers.


## Code
# (1) Binary_search
// indep
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size(), lo = 0, hi = n - 1;
        if (!n) return -1;
        if (target == nums[0]) return 0;
        if (target == nums[n-1]) return n-1;
        
        int large = target > nums[0] ? 1 : 0;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (nums[mid] == target) return mid;
            if (nums[lo] > nums[hi]) { // (I) lo ~ hi spanning rotated array
                if (large) { // (i) target element in larger half
                    if (nums[mid] < nums[lo] || target < nums[mid]) hi = mid - 1;
                    else lo = mid + 1;
                } else { // (ii) smaller half
                    if (nums[mid] > nums[hi] || target > nums[mid]) lo = mid + 1;
                    else hi = mid - 1;
                }
            } else { // (II) lo ~ hi spanning sorted array
                if (nums[mid] < target) lo = mid + 1;
                else hi = mid - 1;
            }
        }
        return -1;
    }
};
