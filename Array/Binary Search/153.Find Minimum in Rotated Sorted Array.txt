## Specification
Suppose an array sorted in ascending order is rotated at some pivot unknown to you
beforehand. i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]. Find the minimum element.
You may assume no duplicate exists in the array.

Example 1:
Input: [3,4,5,1,2] 
Output: 1

Example 2:
Input: [4,5,6,7,0,1,2]
Output: 0


## Code
class Solution {
public:
    int findMin(vector<int>& nums) {
        int sz = nums.size(), lo = 0, hi = sz - 1;
        if (nums[0] <= nums[sz - 1]) return nums[0];
        while (true) {
            int mid = (lo + hi) / 2;
            if (mid < sz - 1 && nums[mid] > nums[mid + 1]) return nums[mid + 1];
            if (mid > 0 && nums[mid] < nums[mid - 1]) return nums[mid];
            if (nums[mid] > nums[sz - 1]) lo = mid + 2;
            else if (nums[mid] < nums[0]) hi = mid - 2;
        }
        return 0;
    }
};
