## Specification
A Range Module is a module that tracks ranges of numbers. Your task is to design and
implement the following interfaces in an efficient manner.

addRange(int left, int right) Adds the half-open interval [left, right), tracking every real
number in that interval. Adding an interval that partially overlaps with currently tracked
numbers should add any numbers in the interval [left, right) that are not already tracked.

queryRange(int left, int right) Returns true if and only if every real number in the interval 
[left, right) is currently being tracked.

removeRange(int left, int right) Stops tracking every real number currently being tracked in 
the interval [left, right).

Example 1:
addRange(10, 20): null
removeRange(14, 16): null
queryRange(10, 14): true (Every number in [10, 14) is being tracked)
queryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)

Note:
A half open interval [left, right) denotes all real numbers left <= x < right.
0 < left < right < 10^9 in all calls to addRange, queryRange, removeRange.
The total number of calls to addRange in a single test case is at most 1000.
The total number of calls to queryRange in a single test case is at most 5000.
The total number of calls to removeRange in a single test case is at most 1000.


## Testcases
["RangeModule","addRange","removeRange","queryRange","queryRange","queryRange"]
[[],[10,20],[14,16],[10,14],[13,15],[16,17]]

["RangeModule","addRange","queryRange","removeRange","removeRange","addRange","queryRange","addRange","queryRange","removeRange"]
[[],[5,8],[3,4],[5,6],[3,6],[1,3],[2,3],[4,8],[2,3],[4,9]]

["RangeModule","addRange","removeRange","queryRange","queryRange","queryRange","removeRange","removeRange","removeRange","addRange","addRange","addRange","removeRange","addRange","queryRange"]
[[],[14,100],[1,8],[77,80],[8,43],[4,13],[3,9],[45,49],[41,90],[58,79],[4,83],[34,39],[84,100],[8,9],[32,56]]

["RangeModule","addRange","removeRange","queryRange","queryRange","queryRange","removeRange","removeRange","removeRange","addRange","addRange","addRange","removeRange","addRange","queryRange","addRange","addRange","queryRange","queryRange","addRange","removeRange","removeRange","removeRange","queryRange","queryRange","addRange","addRange","queryRange","addRange","addRange","removeRange","addRange","addRange","queryRange","removeRange","queryRange","removeRange","addRange","addRange","queryRange","removeRange","removeRange","addRange","queryRange","queryRange","removeRange","removeRange","removeRange","queryRange","addRange","removeRange","removeRange","queryRange","removeRange","removeRange","queryRange","addRange","addRange","removeRange","queryRange","queryRange","addRange","removeRange","removeRange","addRange","addRange","addRange","addRange","queryRange","removeRange","addRange","addRange","addRange","queryRange","addRange","removeRange","queryRange","removeRange","removeRange","removeRange","queryRange","queryRange","queryRange","queryRange","queryRange","removeRange","queryRange","removeRange","queryRange","addRange","queryRange"]
[[],[14,100],[1,8],[77,80],[8,43],[4,13],[3,9],[45,49],[41,90],[58,79],[4,83],[34,39],[84,100],[8,9],[32,56],[35,46],[9,100],[85,99],[23,33],[10,31],[15,45],[52,70],[26,42],[30,70],[60,69],[10,94],[2,89],[26,39],[46,93],[30,83],[42,48],[47,74],[39,45],[14,64],[3,97],[16,34],[28,100],[19,37],[27,91],[55,62],[64,65],[2,48],[55,78],[21,89],[31,76],[13,32],[2,84],[21,88],[12,31],[89,97],[56,72],[16,75],[18,90],[46,60],[20,62],[28,77],[5,78],[58,61],[38,70],[24,73],[72,96],[5,24],[43,49],[2,20],[4,69],[18,98],[26,42],[14,18],[46,58],[16,90],[32,47],[19,36],[26,78],[7,58],[42,54],[42,83],[3,83],[54,82],[71,91],[22,37],[38,94],[20,44],[37,89],[15,54],[1,64],[63,65],[55,58],[23,44],[25,87],[38,85],[27,71]]


## Ideas
(1) The idea is not maintain a set of intervals all of which are isolated from each other,
not even share the right & left boundary. When adding new intervals, if notintersecting with
any, add directly, otherwise merge with intersected ones.
When deleting, simply deleting all intersected parts.

## Code
// (2) others_Tree
// c
struct node {
    int ends[2];
    struct node *left, *right;
};

typedef struct {
    struct node *root;

} RangeModule;

RangeModule* rangeModuleCreate() {
    RangeModule *obj;
    obj = (RangeModule *) malloc(sizeof(RangeModule));
    obj->root = NULL;
    return obj;
}

struct node *addRange(struct node *p, int end0, int end1) {
    if (p == NULL) {
        p = (struct node *) malloc(sizeof(struct node));
        p->ends[0] = end0;
        p->ends[1] = end1;
        p->left = p->right = NULL;  
        return p;  
    } 

    if (end1 <= p->ends[0]) {
        p->left = addRange(p->left, end0, end1);
    } else if (end0 >= p->ends[1]){
        p->right = addRange(p->right, end0, end1);
    } else {
        if (end0 < p->ends[0])
            p->left = addRange(p->left, end0, p->ends[0]);
        if (end1 > p->ends[1])
            p->right = addRange(p->right, p->ends[1], end1);
    } 
    return p;
}

void rangeModuleAddRange(RangeModule* obj, int left, int right) {
    obj->root = addRange(obj->root, left, right);
}

bool queryRange(struct node *p, int end0, int end1) {
    if (p == NULL)
        return 0;
    if (end0 >= p->ends[0] && end1 <= p->ends[1])
        return 1;
   
    if (end1 <= p->ends[0])
        return queryRange(p->left, end0, end1);
    if (end0 >= p->ends[1])
        return queryRange(p->right, end0, end1);
    
    bool l = 1, r = 1;
    if (end0 < p->ends[0])
        l = queryRange(p->left, end0, p->ends[0]);
    if (end1 > p->ends[1])
        r = queryRange(p->right, p->ends[1], end1);
    return l && r;
}

bool rangeModuleQueryRange(RangeModule* obj, int left, int right) {
    return queryRange(obj->root, left, right);
}

struct node *removeRange(struct node *p, int end0, int end1) {
    if (p == NULL)
        return NULL;

    if (end1 <= p->ends[0]) {
        p->left = removeRange(p->left, end0, end1);
    } else if (end0 >= p->ends[1]){
        p->right = removeRange(p->right, end0, end1);
    } else if (end0 > p->ends[0] && end1 < p->ends[1]) {
        struct node *tmp = (struct node *) malloc(sizeof(struct node));
        tmp->right = p->right;
        tmp->left = NULL;
        tmp->ends[0] = end1;
        tmp->ends[1] = p->ends[1];
        p->right = tmp;
        p->ends[1] = end0;
        
    } else {
        struct node *l = removeRange(p->left, end0, p->ends[0]);
        struct node *r = removeRange(p->right, p->ends[1], end1);
        if (end1 > p->ends[0] && end1 < p->ends[1]) {
            p->ends[0] = end1;
            p->left = l;
        } else if (end0 > p->ends[0] && end0 < p->ends[1]) {
            p->ends[1] = end0;
            p->right = r;
        } else {
            if (l == NULL)
                p = r;
            else {
                struct node *tmp = l;
                while (tmp->right != NULL)
                    tmp = tmp->right;
                tmp->right = r;
                p = l;
            }
        }
    } 
    return p;
}

void rangeModuleRemoveRange(RangeModule* obj, int left, int right) {
    obj->root = removeRange(obj->root, left, right);
}

void freeTree(struct node *root) {
    if (root == NULL)
        return;
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

void rangeModuleFree(RangeModule* obj) {
    freeTree(obj->root);
}

// java
class RangeModule {
    TreeNode root;
    public RangeModule() {
    }
    
    public void addRange(int left, int right) {
        root = addRange(root, left, right);
    }
    
    public boolean queryRange(int left, int right) {
        return queryRange(root, left, right);
    }
    
    public void removeRange(int left, int right) {
        root = removeRange(root, left, right); //记得要写成root = 否则把root删了 。。
    }
    
    private TreeNode removeRange(TreeNode root, int start, int end) {
        if (start >= end) return root;
        if (root == null) return root;
        if (root.end <= start) {
            root.right = removeRange(root.right, start, end);
        } else if (root.start >= end) {
            root.left = removeRange(root.left, start, end);
        } else {
            root.left = removeRange(root.left, start, root.start);
            root.right = removeRange(root.right, root.end, end);
            root.left = addRange(root.left, root.start, start);
            root.right = addRange(root.right, end, root.end);
            root = remove(root);
        }
        return root;
    }
    private TreeNode remove(TreeNode node) {
        if (node == null) return null;
        if (node.left == null) return node.right;
        TreeNode leftLargest = getLargest(node.left, node);
        leftLargest.left = node.left;
        leftLargest.right = node.right;
        return leftLargest;
    }
    private TreeNode getLargest(TreeNode node, TreeNode parent) {
        while (node.right != null) {
            parent = node;
            node = node.right;
        }
        if (node == parent.left) parent.left = node.left;
        if (node == parent.right) parent.right = node.left;
        node.left = null;
        return node;
    }
    private boolean queryRange(TreeNode root, int start, int end) {
        if (start >= end) return true;
        if (root == null) return false;
        if (start >= root.end) return queryRange(root.right, start, end);
        if (end <= root.start) return queryRange(root.left, start, end);
        if (start >= root.start && end <= root.end) return true;
        return queryRange(root.left,  start, root.start) && queryRange(root.right, root.end, end);
    }
    private TreeNode addRange(TreeNode root, int start, int end) {
        if (start >= end) return root;
        if (root == null) return new TreeNode(start, end);
        if (root.start >= end) {
            root.left = addRange(root.left, start, end);
        } else if (root.end <= start) {
            root.right = addRange(root.right, start, end);
        } else {
            root.left = addRange(root.left, start, root.start);
            root.right = addRange(root.right, root.end, end);
        }
        return root;
    }
    
}
class TreeNode {
    int start, end;
    TreeNode left, right;
    public TreeNode(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

// (1) indep_TreeMap
class RangeModule {
    
    TreeMap<Integer, Integer> cache;

    public RangeModule() {
        cache = new TreeMap<Integer, Integer>();
    }
    
    private int get(int key, int level) {
        if (level == 0) return cache.floorKey(key) == null ? -1 : cache.floorKey(key);
        if (level == 1) return cache.ceilingKey(key) == null ? -1 : cache.ceilingKey(key);
        return cache.containsKey(key) ? cache.get(key) : -1;
    }
    
    public void addRange(int left, int right) {
        int rhi = get(right, 1), rlo = get(left, 1), nhi = -1;
        // update right side
        if (rlo != -1) { // exist intervals to the left of "left-right"
            int above = rhi == -1 ? right : rhi;
            for (; rlo != -1 && rlo < above; cache.remove(rlo), rlo = get(rlo, 1))
                nhi = cache.get(rlo);
            // add new interval
            if (rhi !=  -1 && rhi == right) { cache.put(left, cache.get(rhi)); cache.remove(rhi); }
            else cache.put(left, Math.max(right, nhi));
        } else cache.put(left, right);
        
        // update left side
        Integer llo = cache.lowerKey(left), nrht = get(left, 2);
        if (llo == null || cache.get(llo) < left) return;
        cache.remove(left); cache.put(llo, Math.max(cache.get(llo), nrht));
    }
    
    public boolean queryRange(int left, int right) {
        Integer lo = cache.floorKey(left);
        return lo != null && cache.get(lo) >= right;
    }
    
    public void removeRange(int left, int right) {
        // update right side
        int hi = get(left, 1), nhi = -1;
        if (hi != -1 && hi < right) {
            for (; hi != -1 && hi < right; cache.remove(hi), hi = get(hi, 1))
                nhi = cache.get(hi);
            if (nhi > right) cache.put(right, nhi);
        }
        // update left side
        int lo = get(left, 0), lov = lo != -1 ? cache.get(lo) : -1;
        if (lo == -1) return;
        if (lov > left) cache.replace(lo, left);
        if (lov > right) cache.put(right, lov);
    }
}


/**
 * Your RangeModule object will be instantiated and called as such:
 * RangeModule obj = new RangeModule();
 * obj.addRange(left,right);
 * boolean param_2 = obj.queryRange(left,right);
 * obj.removeRange(left,right);
 */
