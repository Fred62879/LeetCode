## Specification
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2

Example 2:
Input: [2,2,2,2,2]
Output: 5



## Testcases
[1,6,3,2,4,6,8,3,10,9,3,3,1,2,4,6,3,4,7,8,2,1]
[2,2,2,2,2]



## Ideas
# (II) DP_Binary search
https://leetcode.com/problems/number-of-longest-increasing-subsequence/discuss/107295/9ms-C%2B%2B-Explanation%3A-DP-%2B-Binary-search-%2B-prefix-sums-O(NlogN)-time-O(N)-space

https://leetcode.com/problems/number-of-longest-increasing-subsequence/discuss/228153/C%2B%2B-8ms-O(N*log(N))-beats-100-queue-easy-to-understand

For instance, given 1 3 8-5-4 13-11-7 14 6, we can find that when we are at 6, to update dp, there is no need to check 1, 3, nor 8,5,4. This is because the LIS now is [1,3,4,7,14], if we want to derive the # of LIS terminate at 6, we shall maximize the length of the array that can end at 6. In this case, 6 can be appended to only [1,3,4]. However, the 5, once presented at 4's position is also a valid prev element of 6.   
			     11
			     10
        8  13		      8
        5  11        	      5
  1  3  4   7  14  	1  3  4  10

As a result, after we replace 7 with 6 to update LIS, we can refer one position back to decide dp[i][1] with dp[i][0] being the insertion site (position of 7) readily available. However, given a more frequent replacement at a particular position, say 1 3 11-10-8-5-4 10, if we are evaluating 9, we shall replace 10 with 9 and to know how many LIS (length 4) would terminate 9, we shall add up the # of LIS (length 3) ends at 8, 5, and 4 which requires O(n). Actually, we can use prefix sum to make it a O(1) operation via recording the # of LIS terminate at element >= 8, and >= 4.

Thus, for each i, we do two binary search, (i) the first to help locate the insertion site (ceiling of nums[i] in current LIS for whole array, e.g. for [1,3,4,9,10] 9 shall be used to replace the 9) which is also employed in LT300 as a mean to derive the length of LIS and (ii) the second used to select the floor element of nums[i] among those once presented one position ahead of the insertion site.


# (I) DP
dp[i][0] records the length of LIS from nums[i] onward and dp[i][1] denotes the # of such LIS from nums[i] onward. As we iterating from n-1 to 0, at each i we update dp[i][0] via evaluating all j (i < j < n) such that nums[j] > nums[i] and appending i to j would increase dp[i][0]. Then, we simply update the answer



## Code
# (II) DP_Binary search
**** WAIT ****


# (I) DP
// derived
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size(), ans = 0, mxl = 1;
        // dp[i][0/1], length of longest subseq from i onward/its amount
        vector<vector<int>> dp(n, vector<int>(2, 1));
        
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) if (nums[i] < nums[j]) {
                if (dp[j][0] + 1 > dp[i][0]) {
                    dp[i][0] = dp[j][0] + 1;
                    dp[i][1] = dp[j][1];
                } else if (dp[j][0] + 1 == dp[i][0])
                    dp[i][1] += dp[j][1];
            }
            mxl = max(mxl, dp[i][0]);
        }
        for (int i = 0; i < n; i++)
            if (dp[i][0] == mxl) ans += dp[i][1];
        return ans;
    }
};

// indep
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size(), ans = 0, mxl = INT_MIN;
	// dp[i][0/1], length of longest subseq from i onward/its amount
        vector<vector<int>> dp(n, vector<int>(2, 1));
        
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) if (nums[j] > nums[i] && dp[i][0] <= 1 + dp[j][0]) {
                int candid = 1 + dp[j][0];
                if (candid == dp[i][0]) dp[i][1] += dp[j][1];
                else dp[i][0] = candid, dp[i][1] = dp[j][1];
            }
            if (mxl < dp[i][0]) mxl = dp[i][0], ans = dp[i][1];
            else if (mxl == dp[i][0]) ans += dp[i][1];
        }
        if (mxl == INT_MIN) return n;
        return ans;
    }
};
