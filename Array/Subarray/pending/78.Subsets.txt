## Specification
Type: Subsets, Permutations, Combination Sum, and Palindrome Partitioning

Similar: LT90, 39
Given a set of distinct integers, nums, return all possible subsets (the power set). Note: The solution set must not contain duplicate subsets.

Example:
Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]



## Ideas
# (II) Bit manipulation
https://leetcode.com/problems/subsets/discuss/27278/C%2B%2B-RecursiveIterativeBit-Manipulation

# (I) DFS
Trivial



## Code
# (II) Bit manipulation


# (I) DFS
// others_iterative
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        for(int n : nums){
            int size = result.size();
            for(int i=0; i<size; i++){
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(n);
                result.add(subset);
            }
        }
        return result;
    }
}

// indep_recursive
class Solution {
public:
    // find all subsets from ed backward
    vector<vector<int>> solve(int ed, vector<int>& nums) {
        if (ed < 0) return {{ }};
        auto front = solve(ed - 1, nums);
        int m = front.size();
        for (int i = 0; i < m; i++) {
            auto cur = front[i];
            cur.push_back(nums[ed]);
            front.push_back(cur);
        }
        return front;
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        return solve(nums.size() - 1, nums);
    }
};
