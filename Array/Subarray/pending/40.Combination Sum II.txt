## Specification
Type: Subsets, Permutations, Combination Sum, and Palindrome Partitioning

Similar: LT39

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target. Each number in candidates may only be used once in the combination.

Note: All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8, A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5, A solution set is:
[
  [1,2,2],
  [5]
]



## Code

# (I) DFS_backtracking
// derived
class Solution {
public:
    // find all cols sum up to t using c[lo:hi]
    void solve(int t, int lo, vector<int>& run, vector<int>& c, vector<vector<int>>& res) {
        if (t == 0) { res.push_back(run); return; }
        for (int i = lo; i < c.size() && c[i] <= t; i++) {
            run.push_back(c[i]);
            solve(t - c[i], i + 1, run, c, res);
            run.pop_back();
            while (i < c.size() - 1 && c[i] == c[i + 1]) i++;
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& cand, int target) {
        vector<int> run;
        vector<vector<int>> res;
        sort(cand.begin(), cand.end());
        solve(target, 0, run, cand, res);
        return res;
    }
};
