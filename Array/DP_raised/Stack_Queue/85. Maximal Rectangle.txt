## Specification
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:
Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6


## Ideas
// 2nd visit adapted from LT84


## Code
# (2) 2nd visit Mar 14 2019
// indep
class Solution {
    
    private int solve(LinkedList<Integer> ref, int[] heights, int i, int ans) {
        while (!ref.isEmpty() && (i == heights.length 
		|| heights[ref.peekLast()] > heights[i])) {
            int ch = ref.removeLast();
            int len = i - 1 - (ref.isEmpty() ? -1 : ref.peekLast());
            ans = Math.max(ans, heights[ch] * len);
        }
        return ans;
    }
    
    public int area(int[] heights) {
        LinkedList<Integer> ref = new LinkedList<Integer>();
        int n = heights.length, ans = 0;
        if (n != 0) ref.add(0);
        for (int i = 1; i < n; i++) {
            ans = solve(ref, heights, i, ans);
            ref.addLast(i);
        }
        return solve(ref, heights, n, ans);
    }
    
    public int maximalRectangle(char[][] ma) {
        if (ma.length == 0) return 0;
        int n = ma.length, m = ma[0].length, ans = 0;
        int[] h = new int[m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
                h[j] = ma[i][j] == '0' ? 0 : h[j] + 1;
            ans = Math.max(ans, area(h));
        }
        return ans;
    }
}


# (1) 1st attempt
// derived
class Solution {

    // maintain stack as an ascending array, any entries violating
    // this will incur the calculation of cur max
    public int calculator(int[] height) {
	int max = 0, len = height.length, i = 0, j = 0, k = 0;
        int[] stack = new int[len];
        stack[j] = i++;
        while (i < len) {
            if(height[i] >= height[stack[j]]) {
                stack[++j] = i++;
                continue;
            }
            while(j >= 0 && height[i] < height[stack[j]]) {
                int popid = stack[j--];
                if (j == -1) max = Math.max(max, height[popid] * i);
		// find value of area with height[popid] being the smallest
                else max = Math.max(max, height[popid] * (i - stack[j] - 1));
            }
            stack[++j] = i++;
        }
        while (j >= 0) {
            int popid = stack[j--];
            if (j == -1) max = Math.max(max, height[popid] * i);
            else max = Math.max(max, height[popid] * (i - stack[j] - 1));
        }
        return max;
    }
    
    // slower - due to use of stack, array operation improve alot
    public int calculator(int[] rectangle) {
	int maxArea = 0, i = 1, popIndex;
	Stack<Integer> stack = new Stack<>();
	stack.add(0);
	while(i < rectangle.length) {
		if(rectangle[i] >= rectangle[stack.peek()]) {
			stack.add(i++);
               		continue;
		}
	        while(!stack.isEmpty() && rectangle[stack.peek()] > rectangle[i]) {
               		popIndex = stack.pop();
	                if(stack.isEmpty()) maxArea = Math.max(maxArea, rectangle[popIndex]*i);
	                else maxArea = Math.max(maxArea, rectangle[popIndex] * (i-stack.peek()-1));
           	}
	        stack.add(i++);
	}
	while(!stack.isEmpty()) {
		popIndex = stack.pop();
		if(stack.isEmpty()) maxArea = Math.max(maxArea, rectangle[popIndex]*i);
		else maxArea = Math.max(maxArea, rectangle[popIndex] * (i-stack.peek()-1));
	 }
	return maxArea;
    }
    
    // quicker
    public int calculator(int[] height) {
	    if (height == null || height.length < 1) return 0;
	    int[] stack = new int[height.length + 1];
	    int len = 0, max = 0;
	    for (int i = 0; i <= height.length; i++) {
            	int h = (i == height.length) ? 0 : height[i];
	        while (len != 0 && (i == height.length || height[stack[len - 1]] > h)) {
        	        if (len == 1) max = Math.max(height[stack[--len]] * i, max);
                	else max = Math.max(height[stack[--len]] * (i - stack[len - 1] - 1), max);
	        }
                stack[len++] = i;
            }
            return max;
    }

    // possible even faster
    not yet attempt to implement but it seems that in calculator, we do not need evaluate 
    thru all { for (int i = 0; i <= height.length; i++) } start position, but instead we can
    make use of array, e.g. if height = { 1, 3, 2, 4, 0, 2 }
    we add 1, then add 3. when it comes to 2, since 2 > stack[1] = 3, we popout3 (decrement 
    location pointer) and calculate (3*1). Then we add 4. When comes to 0, we need to pumpout
    all current values in stack and to calculate length.
    
    public int maximalRectangle(char[][] m) {
        int r = m.length, max = 0;
        if (r == 0) return max;
        int c = m[0].length;
        int[] ht = new int[c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (m[i][j] == '0') ht[j] = 0;
                else ht[j]++;
            }
            int tmp = calculator(ht);
            if (max < tmp) max = tmp;
            // max = Math.max(max, tmp);
        }
        return max;
    }
}

// indep
class Solution {
    
    int max = 0;
    char[][] m;
    int[] ref;
    int e;
    
    public void update(int st, int ed, int curRow) {
        if (curRow == m.length) return;
        for (int curCol = st; curCol <= ed; curCol++) {
            if (m[curRow][curCol] == '0') ref[curCol] = -1;
            else if (curCol > st) 
		ref[curCol] = ref[curCol - 1] == -1 ? curCol : ref[curCol - 1];
        }
    }
    
    // find max area until the last row of curRow
    // and update ref for curRow
    public int bfs(int numRow, int curRow, int curMax) {
        for (int curCol = 0; curCol < ref.length; curCol++) { // go through ref
            // locate the critical point - ref[i] != -1 && ref[i] == -1
            if (ref[curCol] == -1 || 
		(curCol + 1 < ref.length && ref[curCol + 1] != -1)) continue;
            // find largest area until curRow - 1
            if (curMax < numRow * (curCol - ref[curCol] + 1)) 
                curMax = numRow * (curCol - ref[curCol] + 1);
	    // update ref from ref[j] to j for row r
            update(ref[curCol], curCol, curRow);
        }
        if (curMax > max) max = curMax;
        return curMax;
    }
    
    public int maximalRectangle(char[][] m) {
        int r = m.length;
        if (r == 0) return 0;
        int c = m[0].length;
        this.m = m;
	// start from each row, calculate the largest possible
        for (int startRow = 0; startRow < r; startRow++) {
            ref = new int[c];
            Arrays.fill(ref, -1);
            if (m[startRow][0] == '1') ref[0] = 0;
	    // initialize reference array based on startRow
            for (int curCol = 1; curCol < c; curCol++)
                if (m[startRow][curCol] == '1') 
                    ref[curCol] = ref[curCol - 1] == -1 ? curCol : ref[curCol - 1];
	    // calculate max possible, starting from startRow, ending at curRow
            for (int curRow = startRow + 1; curRow <= r; curRow++) {
                int curMax = 0;
		// curMax is the max until last row of curRow
                curMax = bfs(curRow - startRow, curRow, curMax);
		// if largest expectation smaller than cur max, abandon
                if (curMax * (r - curRow + 1) < max) break;
            }
        }
        return max;
    }
}
