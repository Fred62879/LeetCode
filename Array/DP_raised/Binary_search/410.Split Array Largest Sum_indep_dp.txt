**** Specification ****
Given an array which consists of non-negative integers and an integer m, you can 
split the array into m non-empty continuous subarrays. Write an algorithm to 
minimize the largest sum among these m subarrays.

Note: If n is the length of array, assume the following constraints are satisfied:
1 ¡Ü n ¡Ü 1000
1 ¡Ü m ¡Ü min(50, n)

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays. The best way is to split it
into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.


**** Testcase ****
[2,3,1,2,4,3]
5

[2,3,1,2,4,3,7,6,2,1,3,4,5,10,21,3,4,3,4,5,6,7,8,0,2,3,4]
9

[5334,6299,4199,9663,8945,3566,9509,3124,6026,6250,7475,5420,9201,9501,38,5897,4411,6638,9845,161,9563,8854,3731,5564,5331,4294,3275,1972,1521,2377,3701,6462,6778,187,9778,758,550,7510,6225,8691,3666,4622,9722,8011,7247,575,5431,4777,4032,8682,5888,8047,3562,9462,6501,7855,505,4675,6973,493,1374,3227,1244,7364,2298,3244,8627,5102,6375,8653,1820,3857,7195,7830,4461,7821,5037,2918,4279,2791,1500,9858,6915,5156,970,1471,5296,1688,578,7266,4182,1430,4985,5730,7941,3880,607,8776,1348,2974,1094,6733,5177,4975,5421,8190,8255,9112,8651,2797,335,8677,3754,893,1818,8479,5875,1695,8295,7993,7037,8546,7906,4102,7279,1407,2462,4425,2148,2925,3903,5447,5893,3534,3663,8307,8679,8474,1202,3474,2961,1149,7451,4279,7875,5692,6186,8109,7763,7798,2250,2969,7974,9781,7741,4914,5446,1861,8914,2544,5683,8952,6745,4870,1848,7887,6448,7873,128,3281,794,1965,7036,8094,1211,9450,6981,4244,2418,8610,8681,2402,2904,7712,3252,5029,3004,5526,6965,8866,2764,600,631,9075,2631,3411,2737,2328,652,494,6556,9391,4517,8934]
9


**** Code ****
// naive dp-TLE
class Solution {
    
    int[] nums;
    
    private int sum(int st, int ed) {
        int ans = 0;
        for (int i = st; i <= ed; i++) ans += nums[i];
        return ans;
    }
    
    // return minimum possible largest sum among m subarrays starting from ed+1
    // previous subarray finish at ed, current subarray starts from ed+1
    private int solve(int ed, int m) {
        int min = Integer.MAX_VALUE;
        if (m == 1) return sum(ed + 1, nums.length - 1);
        for (int i = ed + 1, curSum = nums[i]; i <= nums.length - m; curSum += nums[++i]) {
            int max = Math.max(curSum, solve(i, m-1)); // max(ed+1... i; i+1... n-1)
            min = Math.min(min, max); // min((ed+1, ..., i | i+1, ..., n-1),
                                      //      ed+1, ..., i+1 | i+2, ..., n-1), ...
        }
        return min;
    }
    
    public int splitArray(int[] nums, int m) {
        this.nums = nums;
        return solve(-1, m);
    }
}

// mem-accepted
class Solution {
    
    int[] nums;
    int[][] cache;
    
    private int sum(int st, int ed) {
        int ans = 0;
        for (int i = st; i <= ed; i++) ans += nums[i];
        return ans;
    }
    
    // return minimum possible largest sum among m subarrays starting from ed+1
    // previous subarray finish at ed, current subarray starts from ed+1
    private int solve(int ed, int m) {
        int min = Integer.MAX_VALUE;
        if (m == 1) return sum(ed + 1, nums.length - 1);
        if (cache[m-1][ed+1] != -1) return cache[m-1][ed+1];
        for (int i = ed + 1, curSum = nums[i]; i <= nums.length - m; curSum += nums[++i]) {
            int max = Math.max(curSum, solve(i, m-1));
            min = Math.min(min, max);
        }
        cache[m-1][ed+1] = min;
        return min;
    }
    
    public int splitArray(int[] nums, int m) {
        this.nums = nums;
        cache = new int[m][nums.length];
        for (int i = 0; i < m; i++) Arrays.fill(cache[i], -1);
        return solve(-1, m);
    }
}