## Specification
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 
Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 



## Code
# (2) Binary Search

# (1) Two pointers
// derived_12ms
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if (nums.size() == 0) return 0;
        if (nums[0] >= s) return 1;
        
        int n = nums.size(), i = 0, j = 0, sum = nums[0], ans = n + 1;
        for (int j = 1; j < n; j++) {
            sum += nums[j];
            while (sum >= s) { **** IMPROVED HERE ****
                ans = min(ans, j - i + 1);
                sum -= nums[i++];
            }
        }
        return ans == n + 1 ? 0 : ans;
    }
};

// indep_16ms
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if (nums.size() == 0) return 0;
        if (nums[0] >= s) return 1;
        
        int n = nums.size(), i = 0, j = 0, sum = nums[0], ans = n + 1;
        while (++j < n) {
            sum += nums[j];
            while (sum >= s && i <= j) {
                ans = min(ans, j - i + 1);
                sum -= nums[i++];
            }
        }
        return ans == n + 1 ? 0 : ans;
    }
};
